(responsable_CC_v1 <- barres(vars = variables_responsable_CC, error_margin=T, rev = F, miss = F, showLegend=F, labels=labels_responsable, hover=labels_responsable))
barres <- function(data, vars, file, title="", labels, color=c(), rev_color = FALSE, hover=legend, nsp=TRUE, sort=TRUE, legend=hover, showLegend=T, margin_r=0, margin_l=NA, online=FALSE,
display_values=T, thin=T, legend_x=NA, show_ticks=T, xrange=NA, save = FALSE, df=e1, miss=T, weights = T, fr=T, rev=T, grouped = F, error_margin = F, color_margin = '#ffffff88', N = NA) {
if (missing(vars) & missing(legend) & missing(hover)) warning('hover or legend must be given')
if (!missing(miss)) nsp <- miss
if (missing(data) & !missing(vars)) {
data <- dataKN(vars, data=df, miss=miss, weights = weights, return = "", fr=fr, rev=rev)
N <- dataN(vars[1], data=df, miss=miss, weights = weights, return = "N")
if (missing(legend) & missing(hover)) {
if (is.logical(df[[vars[1]]])) hover <- legend <- labels # data1(var = vars[1], data=df, weights = weights)
else hover <- legend <- dataN(var = vars[1], data=df, miss=miss, weights = weights, return = "legend", fr=fr, rev_legend = rev) } }
if (length(color)==0) color <- color(data, nsp, rev_color = rev_color)
margin_t <- 0 + 25*(!(thin))
if (title!="") { margin_t <- 100 }
if (grepl("<br>", title)) { margin_t <- 150 }
legendSize <- 15 # 10, 13
legendY <- 1.1  + 0.3*thin/(ncol(data)-1) # last term may be problematic
legendX <- 0.2
# legendFont <- 'Open Sans'
if (is.na(margin_l)) { margin_l <- 4.7*max(nchar(labels)/(1 + str_count(labels, '<br>'))) }
if (max(nchar(labels)) > 25) { legendSize <- 15 } # 9, 13
# if (max(nchar(labels)) > 50) { legendSize <- 8 }
# if (max(nchar(labels)) > 60) { legendSize <- 7 }
if (max(nchar(labels)) > 50) { # 70
legendSize <- 13 # 11
# legendY = 1.2
legendX= -0.2 # 1
# if (ncol(data)>1) margin_t = 170
}
if (!is.na(legend_x)) legendX <- legend_x
if (!showLegend) { margin_t <- max(0, margin_t - 70) }
if (ncol(data)==1) legendY = 1.5 + 0.3*thin
if (sort) {
order <- order_agree(data = data, miss = miss, rev = rev, n = length(labels))
labels <- labels[order]
data <- matrix(data[, order], nrow=nrow(data))
}
if (nrow(data)==1 & (sort | !showLegend)) {  # new: add !showLegend to manage responsable_CC i.e. comparisons of a multiple answer question
if (!sort) order <- 1:length(labels)
hover <- hover[order]
value <- c()
for (i in 1:length(hover)) {
hover[i] <- paste(hover[i], "<br>Choisi dans ", round(100*data[1, i]), "% des réponses", sep="")
value[i] <- paste(round(100*data[1, i]), '%', sep='') } # '%  '
hovers <- matrix(hover, nrow=length(hover))
values <- matrix(value, nrow=length(hover))
}
else {
hovers <- values <- c()
if (nsp) {
for (i in 1:(length(hover)-1)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]/(1+data[length(hover), j])), '% des réponses<br>', round(100*data[i, j]), '% des réponses exprimées') )
values <- c(values, paste(round(100*data[i, j]/(1+data[length(hover), j])), '%', sep='')) # '%  '
}
}
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[length(hover)], '<br>', round(100*data[length(hover), j]/(1+data[length(hover), j])), '% des réponses<br>') )
values <- c(values, paste(round(100*data[length(hover), j]/(1+data[length(hover), j])), '%', sep='')) # '%  '
}
}
else {
if (is.element(hover[length(hover)],c("PNR", "NSP"))) hover <- hover[1:(length(hover)-1)]
if (is.element(legend[length(legend)],c("PNR", "NSP"))) legend <- legend[1:(length(legend)-1)]
for (i in 1:length(hover)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]), '% des réponses exprimées<br>') )
values <- c(values, paste(round(100*data[i, j]), '%', sep='')) # '%  '
}
}
}
hovers <- matrix(hovers, ncol=length(hover))
values <- matrix(values, ncol=length(hover))
}
if (!(display_values)) values <- replace(values, T, '')
bars <- plot_ly(x = data[1,], y = labels, type = 'bar', orientation = 'h', text = values[,1], textposition = 'auto',
error_x = list(visible = error_margin, array=qnorm(1-0.05/2)*sqrt(data[1,]*(1-data[1,])/(N-1)), color = color_margin), # sort=FALSE,
hoverinfo = hovers[,1], name=legend[1], marker = list(color = color[1], line = list(color = 'white'))) %>% # , width = 0
layout(xaxis = list(title = "",
showgrid = show_ticks,
showline = FALSE,
showticklabels = show_ticks,
gridcolor = toRGB("gray70"), # + noir, + proche de 0
gridwidth = 1,
griddash = "dot",
autotick = FALSE,
ticks = "outside",
tick0 = 0,
dtick = 0.1,
ticklen = 5*show_ticks,
tickwidth = 1,
tickcolor = toRGB("gray70"),
zeroline = T,
range = xrange,
domain = c(0.01 + 0.14*(!(" " %in% labels)), 1)
),
yaxis = list(title = "",
showgrid = FALSE,
showline = FALSE,
showticklabels = FALSE,
categoryorder = "trace",
# automargin = T,
zeroline = FALSE),
hovermode = 'closest',
barmode = ifelse(grouped, 'group', 'stack'),
title = list(text = title, font = list(color = 'black')),
# title = title,
# titlefont = list(color='black'),
font = list(color='black', size=legendSize-1),
# paper_bgcolor = 'rgb(248, 248, 255)', plot_bgcolor = 'rgb(248, 248, 255)',
margin = list(l = margin_l, r = margin_r, t = margin_t, b = 24, autoexpand = thin), # 21, autoexpand=FALSE removes useless margin at bottom but creates bug with legend
# margin = list(b = 20, t = margin_t),
legend = list(orientation='h', y=legendY, x=legendX, traceorder='normal', font=list(size=legendSize, color='black')), # family='Balto',  , family=legendFont
# showlegend = (showLegend & !((("Yes" %in% legend) | ("Oui" %in% legend)) & (length(legend)<4)))) %>%
showlegend = (showLegend & !(setequal(legend, c('Yes', 'No', 'PNR')) | setequal(legend, c('Oui', 'Non', 'NSP'))))) %>%
# labeling the y-axis
add_annotations(xref = 'paper', yref = 'y', x = 0.14, y = labels,
xanchor = 'right',
text = labels,
font = list(family = 'Arial', size = 14, color = 'black'),
showarrow = FALSE, align = 'right') # %>%
# Legend in the Yes/No case
if ((setequal(legend, c('Yes', 'No', 'PNR')) | setequal(legend, c('Oui', 'Non', 'NSP')))) {
bars <- bars %>% add_annotations(xref = 'x', yref = 'paper',
x = c(0.1, 0.9, 1.1),
y = 1.5,
text = legend,
font = list(family = 'Arial', size = 16, color = 'black'),
showarrow = FALSE) } # %>%
# print(nrow(data))
# print(hover)
# print(nrow(hovers))
# print(ncol(hovers))
if (nrow(data)>1) { for (i in 2:nrow(data)) { # evaluate=TRUE,
bars <- add_trace(bars, x = data[i,], name=legend[i], text = values[,i], hoverinfo = 'text', hovertext = hovers[,i], marker = list(color = color[i]),
error_x = list(visible = error_margin, array=qnorm(1-0.05/2)*sqrt(data[i,]*(1-data[i,])/(N-1)), color = color_margin)) # width thickness (in px)
} }
if (online) { api_create(bars, filename=file, sharing="public") }
if (!missing(file) & save) save_plotly(bars, filename = file) # new
return(bars)
}
# barres(file="CC_responsible", data=data1(variables_responsable_CC), miss=F, rev = F, sort=T, showLegend=FALSE, labels=labels_responsable, hover=labels_responsable)
(responsable_CC_v1 <- barres(vars = variables_responsable_CC, error_margin=T, rev = F, miss = F, showLegend=F, labels=labels_responsable, hover=labels_responsable))
barres <- function(data, vars, file, title="", labels, color=c(), rev_color = FALSE, hover=legend, nsp=TRUE, sort=TRUE, legend=hover, showLegend=T, margin_r=0, margin_l=NA, online=FALSE,
display_values=T, thin=T, legend_x=NA, show_ticks=T, xrange=NA, save = FALSE, df=e1, miss=T, weights = T, fr=T, rev=T, grouped = F, error_margin = F, color_margin = '#00000088', N = NA) {
if (missing(vars) & missing(legend) & missing(hover)) warning('hover or legend must be given')
if (!missing(miss)) nsp <- miss
if (missing(data) & !missing(vars)) {
data <- dataKN(vars, data=df, miss=miss, weights = weights, return = "", fr=fr, rev=rev)
N <- dataN(vars[1], data=df, miss=miss, weights = weights, return = "N")
if (missing(legend) & missing(hover)) {
if (is.logical(df[[vars[1]]])) hover <- legend <- labels # data1(var = vars[1], data=df, weights = weights)
else hover <- legend <- dataN(var = vars[1], data=df, miss=miss, weights = weights, return = "legend", fr=fr, rev_legend = rev) } }
if (length(color)==0) color <- color(data, nsp, rev_color = rev_color)
margin_t <- 0 + 25*(!(thin))
if (title!="") { margin_t <- 100 }
if (grepl("<br>", title)) { margin_t <- 150 }
legendSize <- 15 # 10, 13
legendY <- 1.1  + 0.3*thin/(ncol(data)-1) # last term may be problematic
legendX <- 0.2
# legendFont <- 'Open Sans'
if (is.na(margin_l)) { margin_l <- 4.7*max(nchar(labels)/(1 + str_count(labels, '<br>'))) }
if (max(nchar(labels)) > 25) { legendSize <- 15 } # 9, 13
# if (max(nchar(labels)) > 50) { legendSize <- 8 }
# if (max(nchar(labels)) > 60) { legendSize <- 7 }
if (max(nchar(labels)) > 50) { # 70
legendSize <- 13 # 11
# legendY = 1.2
legendX= -0.2 # 1
# if (ncol(data)>1) margin_t = 170
}
if (!is.na(legend_x)) legendX <- legend_x
if (!showLegend) { margin_t <- max(0, margin_t - 70) }
if (ncol(data)==1) legendY = 1.5 + 0.3*thin
if (sort) {
order <- order_agree(data = data, miss = miss, rev = rev, n = length(labels))
labels <- labels[order]
data <- matrix(data[, order], nrow=nrow(data))
}
if (nrow(data)==1 & (sort | !showLegend)) {  # new: add !showLegend to manage responsable_CC i.e. comparisons of a multiple answer question
if (!sort) order <- 1:length(labels)
hover <- hover[order]
value <- c()
for (i in 1:length(hover)) {
hover[i] <- paste(hover[i], "<br>Choisi dans ", round(100*data[1, i]), "% des réponses", sep="")
value[i] <- paste(round(100*data[1, i]), '%', sep='') } # '%  '
hovers <- matrix(hover, nrow=length(hover))
values <- matrix(value, nrow=length(hover))
}
else {
hovers <- values <- c()
if (nsp) {
for (i in 1:(length(hover)-1)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]/(1+data[length(hover), j])), '% des réponses<br>', round(100*data[i, j]), '% des réponses exprimées') )
values <- c(values, paste(round(100*data[i, j]/(1+data[length(hover), j])), '%', sep='')) # '%  '
}
}
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[length(hover)], '<br>', round(100*data[length(hover), j]/(1+data[length(hover), j])), '% des réponses<br>') )
values <- c(values, paste(round(100*data[length(hover), j]/(1+data[length(hover), j])), '%', sep='')) # '%  '
}
}
else {
if (is.element(hover[length(hover)],c("PNR", "NSP"))) hover <- hover[1:(length(hover)-1)]
if (is.element(legend[length(legend)],c("PNR", "NSP"))) legend <- legend[1:(length(legend)-1)]
for (i in 1:length(hover)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]), '% des réponses exprimées<br>') )
values <- c(values, paste(round(100*data[i, j]), '%', sep='')) # '%  '
}
}
}
hovers <- matrix(hovers, ncol=length(hover))
values <- matrix(values, ncol=length(hover))
}
if (!(display_values)) values <- replace(values, T, '')
bars <- plot_ly(x = data[1,], y = labels, type = 'bar', orientation = 'h', text = values[,1], textposition = 'auto',
error_x = list(visible = error_margin, array=qnorm(1-0.05/2)*sqrt(data[1,]*(1-data[1,])/(N-1)), color = color_margin), # sort=FALSE,
hoverinfo = hovers[,1], name=legend[1], marker = list(color = color[1], line = list(color = 'white'))) %>% # , width = 0
layout(xaxis = list(title = "",
showgrid = show_ticks,
showline = FALSE,
showticklabels = show_ticks,
gridcolor = toRGB("gray70"), # + noir, + proche de 0
gridwidth = 1,
griddash = "dot",
autotick = FALSE,
ticks = "outside",
tick0 = 0,
dtick = 0.1,
ticklen = 5*show_ticks,
tickwidth = 1,
tickcolor = toRGB("gray70"),
zeroline = T,
range = xrange,
domain = c(0.01 + 0.14*(!(" " %in% labels)), 1)
),
yaxis = list(title = "",
showgrid = FALSE,
showline = FALSE,
showticklabels = FALSE,
categoryorder = "trace",
# automargin = T,
zeroline = FALSE),
hovermode = 'closest',
barmode = ifelse(grouped, 'group', 'stack'),
title = list(text = title, font = list(color = 'black')),
# title = title,
# titlefont = list(color='black'),
font = list(color='black', size=legendSize-1),
# paper_bgcolor = 'rgb(248, 248, 255)', plot_bgcolor = 'rgb(248, 248, 255)',
margin = list(l = margin_l, r = margin_r, t = margin_t, b = 24, autoexpand = thin), # 21, autoexpand=FALSE removes useless margin at bottom but creates bug with legend
# margin = list(b = 20, t = margin_t),
legend = list(orientation='h', y=legendY, x=legendX, traceorder='normal', font=list(size=legendSize, color='black')), # family='Balto',  , family=legendFont
# showlegend = (showLegend & !((("Yes" %in% legend) | ("Oui" %in% legend)) & (length(legend)<4)))) %>%
showlegend = (showLegend & !(setequal(legend, c('Yes', 'No', 'PNR')) | setequal(legend, c('Oui', 'Non', 'NSP'))))) %>%
# labeling the y-axis
add_annotations(xref = 'paper', yref = 'y', x = 0.14, y = labels,
xanchor = 'right',
text = labels,
font = list(family = 'Arial', size = 14, color = 'black'),
showarrow = FALSE, align = 'right') # %>%
# Legend in the Yes/No case
if ((setequal(legend, c('Yes', 'No', 'PNR')) | setequal(legend, c('Oui', 'Non', 'NSP')))) {
bars <- bars %>% add_annotations(xref = 'x', yref = 'paper',
x = c(0.1, 0.9, 1.1),
y = 1.5,
text = legend,
font = list(family = 'Arial', size = 16, color = 'black'),
showarrow = FALSE) } # %>%
# print(nrow(data))
# print(hover)
# print(nrow(hovers))
# print(ncol(hovers))
if (nrow(data)>1) { for (i in 2:nrow(data)) { # evaluate=TRUE,
bars <- add_trace(bars, x = data[i,], name=legend[i], text = values[,i], hoverinfo = 'text', hovertext = hovers[,i], marker = list(color = color[i]),
error_x = list(visible = error_margin, array=qnorm(1-0.05/2)*sqrt(data[i,]*(1-data[i,])/(N-1)), color = color_margin)) # width thickness (in px)
} }
if (online) { api_create(bars, filename=file, sharing="public") }
if (!missing(file) & save) save_plotly(bars, filename = file) # new
return(bars)
}
# barres(file="CC_responsible", data=data1(variables_responsable_CC), miss=F, rev = F, sort=T, showLegend=FALSE, labels=labels_responsable, hover=labels_responsable)
(responsable_CC_v1 <- barres(vars = variables_responsable_CC, error_margin=T, rev = F, miss = F, showLegend=F, labels=labels_responsable, hover=labels_responsable))
barres <- function(data, vars, file, title="", labels, color=c(), rev_color = FALSE, hover=legend, nsp=TRUE, sort=TRUE, legend=hover, showLegend=T, margin_r=0, margin_l=NA, online=FALSE,
display_values=T, thin=T, legend_x=NA, show_ticks=T, xrange=NA, save = FALSE, df=e1, miss=T, weights = T, fr=T, rev=T, grouped = F, error_margin = F, color_margin = '#00000033', N = NA) {
if (missing(vars) & missing(legend) & missing(hover)) warning('hover or legend must be given')
if (!missing(miss)) nsp <- miss
if (missing(data) & !missing(vars)) {
data <- dataKN(vars, data=df, miss=miss, weights = weights, return = "", fr=fr, rev=rev)
N <- dataN(vars[1], data=df, miss=miss, weights = weights, return = "N")
if (missing(legend) & missing(hover)) {
if (is.logical(df[[vars[1]]])) hover <- legend <- labels # data1(var = vars[1], data=df, weights = weights)
else hover <- legend <- dataN(var = vars[1], data=df, miss=miss, weights = weights, return = "legend", fr=fr, rev_legend = rev) } }
if (length(color)==0) color <- color(data, nsp, rev_color = rev_color)
margin_t <- 0 + 25*(!(thin))
if (title!="") { margin_t <- 100 }
if (grepl("<br>", title)) { margin_t <- 150 }
legendSize <- 15 # 10, 13
legendY <- 1.1  + 0.3*thin/(ncol(data)-1) # last term may be problematic
legendX <- 0.2
# legendFont <- 'Open Sans'
if (is.na(margin_l)) { margin_l <- 4.7*max(nchar(labels)/(1 + str_count(labels, '<br>'))) }
if (max(nchar(labels)) > 25) { legendSize <- 15 } # 9, 13
# if (max(nchar(labels)) > 50) { legendSize <- 8 }
# if (max(nchar(labels)) > 60) { legendSize <- 7 }
if (max(nchar(labels)) > 50) { # 70
legendSize <- 13 # 11
# legendY = 1.2
legendX= -0.2 # 1
# if (ncol(data)>1) margin_t = 170
}
if (!is.na(legend_x)) legendX <- legend_x
if (!showLegend) { margin_t <- max(0, margin_t - 70) }
if (ncol(data)==1) legendY = 1.5 + 0.3*thin
if (sort) {
order <- order_agree(data = data, miss = miss, rev = rev, n = length(labels))
labels <- labels[order]
data <- matrix(data[, order], nrow=nrow(data))
}
if (nrow(data)==1 & (sort | !showLegend)) {  # new: add !showLegend to manage responsable_CC i.e. comparisons of a multiple answer question
if (!sort) order <- 1:length(labels)
hover <- hover[order]
value <- c()
for (i in 1:length(hover)) {
hover[i] <- paste(hover[i], "<br>Choisi dans ", round(100*data[1, i]), "% des réponses", sep="")
value[i] <- paste(round(100*data[1, i]), '%', sep='') } # '%  '
hovers <- matrix(hover, nrow=length(hover))
values <- matrix(value, nrow=length(hover))
}
else {
hovers <- values <- c()
if (nsp) {
for (i in 1:(length(hover)-1)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]/(1+data[length(hover), j])), '% des réponses<br>', round(100*data[i, j]), '% des réponses exprimées') )
values <- c(values, paste(round(100*data[i, j]/(1+data[length(hover), j])), '%', sep='')) # '%  '
}
}
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[length(hover)], '<br>', round(100*data[length(hover), j]/(1+data[length(hover), j])), '% des réponses<br>') )
values <- c(values, paste(round(100*data[length(hover), j]/(1+data[length(hover), j])), '%', sep='')) # '%  '
}
}
else {
if (is.element(hover[length(hover)],c("PNR", "NSP"))) hover <- hover[1:(length(hover)-1)]
if (is.element(legend[length(legend)],c("PNR", "NSP"))) legend <- legend[1:(length(legend)-1)]
for (i in 1:length(hover)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]), '% des réponses exprimées<br>') )
values <- c(values, paste(round(100*data[i, j]), '%', sep='')) # '%  '
}
}
}
hovers <- matrix(hovers, ncol=length(hover))
values <- matrix(values, ncol=length(hover))
}
if (!(display_values)) values <- replace(values, T, '')
bars <- plot_ly(x = data[1,], y = labels, type = 'bar', orientation = 'h', text = values[,1], textposition = 'auto',
error_x = list(visible = error_margin, array=qnorm(1-0.05/2)*sqrt(data[1,]*(1-data[1,])/(N-1)), color = color_margin), # sort=FALSE,
hoverinfo = hovers[,1], name=legend[1], marker = list(color = color[1], line = list(color = 'white'))) %>% # , width = 0
layout(xaxis = list(title = "",
showgrid = show_ticks,
showline = FALSE,
showticklabels = show_ticks,
gridcolor = toRGB("gray70"), # + noir, + proche de 0
gridwidth = 1,
griddash = "dot",
autotick = FALSE,
ticks = "outside",
tick0 = 0,
dtick = 0.1,
ticklen = 5*show_ticks,
tickwidth = 1,
tickcolor = toRGB("gray70"),
zeroline = T,
range = xrange,
domain = c(0.01 + 0.14*(!(" " %in% labels)), 1)
),
yaxis = list(title = "",
showgrid = FALSE,
showline = FALSE,
showticklabels = FALSE,
categoryorder = "trace",
# automargin = T,
zeroline = FALSE),
hovermode = 'closest',
barmode = ifelse(grouped, 'group', 'stack'),
title = list(text = title, font = list(color = 'black')),
# title = title,
# titlefont = list(color='black'),
font = list(color='black', size=legendSize-1),
# paper_bgcolor = 'rgb(248, 248, 255)', plot_bgcolor = 'rgb(248, 248, 255)',
margin = list(l = margin_l, r = margin_r, t = margin_t, b = 24, autoexpand = thin), # 21, autoexpand=FALSE removes useless margin at bottom but creates bug with legend
# margin = list(b = 20, t = margin_t),
legend = list(orientation='h', y=legendY, x=legendX, traceorder='normal', font=list(size=legendSize, color='black')), # family='Balto',  , family=legendFont
# showlegend = (showLegend & !((("Yes" %in% legend) | ("Oui" %in% legend)) & (length(legend)<4)))) %>%
showlegend = (showLegend & !(setequal(legend, c('Yes', 'No', 'PNR')) | setequal(legend, c('Oui', 'Non', 'NSP'))))) %>%
# labeling the y-axis
add_annotations(xref = 'paper', yref = 'y', x = 0.14, y = labels,
xanchor = 'right',
text = labels,
font = list(family = 'Arial', size = 14, color = 'black'),
showarrow = FALSE, align = 'right') # %>%
# Legend in the Yes/No case
if ((setequal(legend, c('Yes', 'No', 'PNR')) | setequal(legend, c('Oui', 'Non', 'NSP')))) {
bars <- bars %>% add_annotations(xref = 'x', yref = 'paper',
x = c(0.1, 0.9, 1.1),
y = 1.5,
text = legend,
font = list(family = 'Arial', size = 16, color = 'black'),
showarrow = FALSE) } # %>%
# print(nrow(data))
# print(hover)
# print(nrow(hovers))
# print(ncol(hovers))
if (nrow(data)>1) { for (i in 2:nrow(data)) { # evaluate=TRUE,
bars <- add_trace(bars, x = data[i,], name=legend[i], text = values[,i], hoverinfo = 'text', hovertext = hovers[,i], marker = list(color = color[i]),
error_x = list(visible = error_margin, array=qnorm(1-0.05/2)*sqrt(data[i,]*(1-data[i,])/(N-1)), color = color_margin)) # width thickness (in px)
} }
if (online) { api_create(bars, filename=file, sharing="public") }
if (!missing(file) & save) save_plotly(bars, filename = file) # new
return(bars)
}
# barres(file="CC_responsible", data=data1(variables_responsable_CC), miss=F, rev = F, sort=T, showLegend=FALSE, labels=labels_responsable, hover=labels_responsable)
(responsable_CC_v1 <- barres(vars = variables_responsable_CC, error_margin=T, rev = F, miss = F, showLegend=F, labels=labels_responsable, hover=labels_responsable))
is.null(annotation(e1$statut_emploi))
is.null(annotation(e1$bug))
is.null(annotation(e1$cause_CC_AT))
is.null(annotation(e1$connaissance_CCC))
is.null(annotation(e1$cause_CC_CCC))
is.null(annotation(e1$France_CC))
is.null(annotation(e1$certitude_gagnant))
is.null(annotation(e1$gauche_droite_nsp))
(gauche_droite_nsp_v1 <- barres(vars = "gauche_droite_nsp", miss = T, labels="Comment vous définiriez-vous ?", rev=F, rev_color = T))
(effets_CC_AT_v1 <- barres(vars = "effets_CC_AT", rev = F, miss = T, labels="Effets du changement climatique, \nsi rien n'est fait pour le limiter ?"))
(cause_CC_CCC_CCC <- barres(vars = "cause_CC_CCC", df = c, miss = F, labels="Cause du changement climatique"))
(confiance_gouvernement_v1 <- barres(vars = "confiance_gouvernement", miss = T, labels="En général, faites-vous confiance au gouvernement\n pour prendre de bonnes décisions ?"))
(pour_sortition_v1 <- barres(vars = "pour_sortition", miss = T, rev=F, thin=F, labels="Pour une assemblée constituée de 150 citoyens tirés au sort, \ndotée d'un droit de veto sur les textes votés au Parlement"))
is.null(annotation(e1$certitude_gagnant))
is.null(annotation(e1$pour_sortition))
(confiance_gouvernement_v1 <- barres(vars = "confiance_gouvernement", miss = T, labels="En général, faites-vous confiance au gouvernement\n pour prendre de bonnes décisions ?"))
is.null(annotation(e1$taxe_approbation))
(trop_impots_v1 <- barres(vars = "trop_impots", miss = T, labels="Paie-t-on trop d'impôt en France ?"))
(patrimoine_v1 <- barres(vars = "patrimoine", rev = F, rev_color = T, miss = T, labels="Patrimoine net du ménage"))
is.null(annotation(e1$patrimoine))
(pour_taxe_carbone2_v1 <- barres(data = data_taxe_carbone_v1, rev = F, miss = T, sort = F, labels = c("Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est pour", "Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est contre", "Favorable à une augmentation de la taxe carbone\nVariante: sans information"), legend=c('Oui', 'Non', 'NSP')))
is.null(annotation(e1pour_taxe_carbone))
is.null(annotation(e1$pour_taxe_carbone))
(gilets_jaunes_v2 <- barres(vars = "gilets_jaunes", df=e2, miss = T, labels="Que pensez-vous des gilets jaunes ?"))
is.null(annotation(e1$certitude_gagnant))
is.null(annotation(e1$gilets_jaunes))
(gauche_droite_nsp_v2 <- barres(vars = "gauche_droite_nsp", df=e2, miss = T, labels="Comment vous définiriez-vous ?", rev=F, rev_color = T))
is.null(annotation(e1$gauche_droite_nsp))
decrit(e1$certitude_gagnant)
is.null(annotation(e1$certitude_gagnant))
decrit(e1$pourt_sortition, miss=T, weights=T)
decrit("pour_sortition", data = e1, miss=T, weight=T)
is.null(annotation(e1$pour_sortition))
(pour_taxe_carbone2_v1 <- barres(data = data_taxe_carbone_v1, rev = F, miss = T, sort = F, labels = c("Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est pour", "Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est contre", "Favorable à une augmentation de la taxe carbone\nVariante: sans information"), legend=c('Oui', 'Non', 'NSP')))
decrit("pour_taxe_carbone", data=e1, which=e1$variante_taxe_carbone=='pour', miss=T, weight=T)
decrit("certitude_gagnant", data=e1, miss=T, weight=T)
decrit("taxe_approbation", data=e1, miss=T, weight=T)
(pro_tax_carbon <- barres(vars = "taxe_approbation", df = e1, rev = F, thin = F, miss = T, sort = F, labels = c("Favorable to a carbon tax and dividend"), legend = c("Yes", "No", "PNR")))
decrit("patrimoine", data=e1, miss=T, weight=T)
(patrimoine_v1 <- barres(vars = "patrimoine", rev = F, rev_color = T, miss = T, labels="Patrimoine net du ménage"))
decrit("gilets_jaunes", data=e1, miss=T, weight=T)
(gilets_jaunes_v1 <- barres(vars = "gilets_jaunes", miss = T, labels="Que pensez-vous des gilets jaunes ?"))
.08/.92
length(which(e1$gilets_jaunes=="NSP"))
length(which(is.missing(e1$gilets_jaunes)))
length(which(!is.missing(e1$gilets_jaunes)))
length(which(!is.missing(e1$gilets_jaunes) & (!(e1$gilets_jaunes %in% c("NSP", "Non concerné·e")))))
length(which(!is.missing(e1$patrimoine) & (!(e1$patrimoine %in% c("NSP", "Non concerné·e")))))
length(which(!is.missing(e1$pour_sortition) & (!(e1$pour_sortition %in% c("NSP", "Non concerné·e")))))
length(which(!is.missing(e1$taxe_approbation) & (!(e1$taxe_approbation %in% c("NSP", "Non concerné·e")))))
dataN <- function(var, data=e1, miss=T, weights = T, return = "", fr=T, rev=FALSE, rev_legend = FALSE) {
if (is.null(data[['weight']])) weights <- F # TODO? warning
mat <- c()
if (is.character(data[[var]]) | (is.numeric(data[[var]]) & !grepl("item", class(data[[var]]))) | is.logical(data[[var]])) v <- as.factor(data[[var]]) # before: no is.logical
else v <- data[[var]]
if (setequal(levels(v), c(T, F))) levels <- c(T) # before: not this line
else if (is.null(annotation(v))) levels <- levels(v)
else levels <- labels(v)@.Data
levels <- levels[!(levels %in% c("NSP", "PNR", "Non concerné·e"))]
if (rev_legend) levels <- rev(levels) # new (05/20)
if (weights) N <- sum(data[['weight']][!is.missing(v) & (!(v %in% c("NSP", "Non concerné·e")))])
else N <- length(which(!is.missing(v) & (!(v %in% c("NSP", "Non concerné·e")))))
for (val in levels) { # before: no %in% nowhere below
if (weights) mat <- c(mat, sum(data[['weight']][which(v==val)])/N)
else mat <- c(mat, length(which(v==val))/N) }
if (rev) mat <- rev(mat)
if (miss) {
if (is.null(annotation(v))) {
if (weights) mat <- c(mat, sum(data[['weight']][which(is.na(v) | v %in% c("NSP", "Non concerné·e"))])/N)
else mat <- c(mat, length(which(is.na(v) | v %in% c("NSP", "Non concerné·e")))/N)
} else  {
if (weights) mat <- c(mat, sum(data[['weight']][which(is.missing(v) & !is.na(v))])/N) # was defined without " & (!(v %in% c("NSP", "Non concerné·e")))" here and line below
else mat <- c(mat, length(which(is.missing(v) & !is.na(v)))/N) } } # mais ça semble équivalent pck les NSP sont missing dans ces cas-là
if (max(nchar(levels))==3 & 'Oui' %in% levels & 'Non' %in% levels) { if (which(levels=='Non') < which(levels=='Oui')) mat[2:1] <- mat[1:2]; levels[c(which(levels=='Oui'),which(levels=='Non'))] <- c('Non', 'Oui') }
if ((return %in% c("levels", "legend")) & miss & fr) return(c(levels, 'NSP'))
else if ((return %in% c("levels", "legend")) & miss & (!(fr))) return(c(levels, 'PNR'))
else if ((return %in% c("levels", "legend")) & (!(miss))) return(levels)
else if (return == "N") return(N)
else return(matrix(mat, ncol=1))
}
(gilets_jaunes_v1 <- barres(vars = "gilets_jaunes", miss = T, labels="Que pensez-vous des gilets jaunes ?"))
length(which(!is.missing(e1$taxe_approbation) & (!(e1$taxe_approbation %in% c("NSP", "Non concerné·e")))))
(patrimoine_v1 <- barres(vars = "patrimoine", rev = F, rev_color = T, miss = T, labels="Patrimoine net du ménage"))
(redistribution2_v1 <- barres(vars = "redistribution", rev = F, miss = F, labels="Il faudrait prendre aux riches pour donner aux pauvres"))
(pour_sortition_v2 <- barres(vars = "pour_sortition", df=e2, miss = T, rev=F, thin=F, labels="Pour une assemblée constituée de 150 citoyens tirés au sort, \ndotée d'un droit de veto sur les textes votés au Parlement"))
