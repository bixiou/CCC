}
}
else {
if (is.element(hover[length(hover)],c("PNR", "NSP"))) hover <- hover[1:(length(hover)-1)]
if (is.element(legend[length(legend)],c("PNR", "NSP"))) legend <- legend[1:(length(legend)-1)]
for (i in 1:length(hover)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]), '% des réponses exprimées<br>') )
values <- c(values, paste(round(100*data[i, j]), '%', sep=''))
}
}
}
hovers <- matrix(hovers, ncol=length(hover))
values <- matrix(values, ncol=length(hover))
}
if (!(display_values)) values <- replace(values, T, '')
bars <- plot_ly(x = data[1,], y = labels, type = 'bar', orientation = 'h', text = values[,1], textposition = 'auto', # sort=FALSE,
hoverinfo = hovers[,1], name=legend[1], marker = list(color = color[1], line = list(color = 'white'))) %>% # , width = 0
layout(xaxis = list(title = "",
showgrid = show_ticks,
showline = FALSE,
showticklabels = show_ticks,
gridcolor = toRGB("gray70"), # + noir, + proche de 0
gridwidth = 1,
griddash = "dot",
autotick = FALSE,
ticks = "outside",
tick0 = 0,
dtick = 0.1,
ticklen = 5*show_ticks,
tickwidth = 1,
tickcolor = toRGB("gray70"),
zeroline = T,
range = xrange,
domain = c(0.01 + 0.14*(!(" " %in% labels)), 1)
),
yaxis = list(title = "",
showgrid = FALSE,
showline = FALSE,
showticklabels = FALSE,
categoryorder = "trace",
# automargin = T,
zeroline = FALSE),
hovermode = 'closest',
barmode = ifelse(grouped, 'group', 'stack'),
title = list(text = title, font = list(color = 'black')),
# title = title,
# titlefont = list(color='black'),
font = list(color='black', size=legendSize-1),
# paper_bgcolor = 'rgb(248, 248, 255)', plot_bgcolor = 'rgb(248, 248, 255)',
margin = list(l = margin_l, r = margin_r, t = margin_t, b = 24, autoexpand = thin), # 21, autoexpand=FALSE removes useless margin at bottom but creates bug with legend
# margin = list(b = 20, t = margin_t),
legend = list(orientation='h', y=legendY, x=legendX, traceorder='normal', font=list(size=legendSize, color='black')), # family='Balto',  , family=legendFont
# showlegend = (showLegend & !((("Yes" %in% legend) | ("Oui" %in% legend)) & (length(legend)<4)))) %>%
showlegend = (showLegend & !(setequal(legend, c('Yes', 'No', 'PNR')) | setequal(legend, c('Oui', 'Non', 'NSP'))))) %>%
# labeling the y-axis
add_annotations(xref = 'paper', yref = 'y', x = 0.14, y = labels,
xanchor = 'right',
text = labels,
font = list(family = 'Arial', size = 14, color = 'black'),
showarrow = FALSE, align = 'right') # %>%
# Legend in the Yes/No case
if ((setequal(legend, c('Yes', 'No', 'PNR')) | setequal(legend, c('Oui', 'Non', 'NSP')))) {
bars <- bars %>% add_annotations(xref = 'x', yref = 'paper',
x = c(0.1, 0.9, 1.1),
y = 1.5,
text = legend,
font = list(family = 'Arial', size = 16, color = 'black'),
showarrow = FALSE) } # %>%
# print(nrow(data))
# print(hover)
# print(nrow(hovers))
# print(ncol(hovers))
if (nrow(data)>1) { for (i in 2:nrow(data)) { # evaluate=TRUE,
bars <- add_trace(bars, x = data[i,], name=legend[i], text = values[,i], hoverinfo = 'text', hovertext = hovers[,i], marker = list(color = color[i]))
} }
if (online) { api_create(bars, filename=file, sharing="public") }
if (!missing(file) & save) save_plotly(bars, filename = file) # new
return(bars)
}
barres(data=td, showLegend=F, labels=tl, legend=tleg, sort = F)
barres <- function(data, vars, file, title="", labels, color=c(), rev_color = FALSE, hover=legend, nsp=TRUE, sort=TRUE, legend=hover, showLegend=T, margin_r=0, margin_l=NA, online=FALSE,
display_values=T, thin=T, legend_x=NA, show_ticks=T, xrange=NA, save = FALSE, df=e1, miss=T, weights = T, fr=T, rev=T, grouped = F) {
if (missing(vars) & missing(legend) & missing(hover)) warning('hover or legend must be given')
if (!missing(miss)) nsp <- miss
if (missing(data) & !missing(vars)) {
data <- dataKN(vars, data=df, miss=miss, weights = weights, return = "", fr=fr, rev=rev)
if (missing(legend) & missing(hover)) {
if (is.logical(df[[vars[1]]])) hover <- legend <- labels # data1(var = vars[1], data=df, weights = weights)
else hover <- legend <- dataN(var = vars[1], data=df, miss=miss, weights = weights, return = "legend", fr=fr, rev_legend = rev) } }
if (length(color)==0) color <- color(data, nsp, rev_color = rev_color)
margin_t <- 0 + 25*(!(thin))
if (title!="") { margin_t <- 100 }
if (grepl("<br>", title)) { margin_t <- 150 }
legendSize <- 15 # 10, 13
legendY <- 1.1  + 0.3*thin/(ncol(data)-1) # last term may be problematic
legendX <- 0.2
# legendFont <- 'Open Sans'
if (is.na(margin_l)) { margin_l <- 4.7*max(nchar(labels)/(1 + str_count(labels, '<br>'))) }
if (max(nchar(labels)) > 25) { legendSize <- 15 } # 9, 13
# if (max(nchar(labels)) > 50) { legendSize <- 8 }
# if (max(nchar(labels)) > 60) { legendSize <- 7 }
if (max(nchar(labels)) > 50) { # 70
legendSize <- 13 # 11
# legendY = 1.2
legendX= -0.2 # 1
# if (ncol(data)>1) margin_t = 170
}
if (!is.na(legend_x)) legendX <- legend_x
if (!showLegend) { margin_t <- max(0, margin_t - 70) }
if (ncol(data)==1) legendY = 1.5 + 0.3*thin
if (sort) {
order <- order_agree(data = data, miss = miss, rev = rev, n = length(labels))
labels <- labels[order]
data <- matrix(data[, order], nrow=nrow(data))
}
if (nrow(data)==1 & (sort | !showLegend)) {  # new: add !showLegend to manage responsable_CC i.e. comparisons of a multiple answer question
if (sort) hover <- hover[order]
print(order)
print(labels)
print(data)
print(hover)
value <- c()
for (i in 1:length(hover)) {
hover[i] <- paste(hover[i], "<br>Choisi dans ", round(100*data[1, i]), "% des réponses", sep="")
value[i] <- paste(round(100*data[1, i]), '%', sep='') }
hovers <- matrix(hover, nrow=length(hover))
values <- matrix(value, nrow=length(hover))
}
else {
hovers <- values <- c()
if (nsp) {
for (i in 1:(length(hover)-1)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]/(1+data[length(hover), j])), '% des réponses<br>', round(100*data[i, j]), '% des réponses exprimées') )
values <- c(values, paste(round(100*data[i, j]/(1+data[length(hover), j])), '%', sep=''))
}
}
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[length(hover)], '<br>', round(100*data[length(hover), j]/(1+data[length(hover), j])), '% des réponses<br>') )
values <- c(values, paste(round(100*data[length(hover), j]/(1+data[length(hover), j])), '%', sep=''))
}
}
else {
if (is.element(hover[length(hover)],c("PNR", "NSP"))) hover <- hover[1:(length(hover)-1)]
if (is.element(legend[length(legend)],c("PNR", "NSP"))) legend <- legend[1:(length(legend)-1)]
for (i in 1:length(hover)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]), '% des réponses exprimées<br>') )
values <- c(values, paste(round(100*data[i, j]), '%', sep=''))
}
}
}
hovers <- matrix(hovers, ncol=length(hover))
values <- matrix(values, ncol=length(hover))
}
if (!(display_values)) values <- replace(values, T, '')
bars <- plot_ly(x = data[1,], y = labels, type = 'bar', orientation = 'h', text = values[,1], textposition = 'auto', # sort=FALSE,
hoverinfo = hovers[,1], name=legend[1], marker = list(color = color[1], line = list(color = 'white'))) %>% # , width = 0
layout(xaxis = list(title = "",
showgrid = show_ticks,
showline = FALSE,
showticklabels = show_ticks,
gridcolor = toRGB("gray70"), # + noir, + proche de 0
gridwidth = 1,
griddash = "dot",
autotick = FALSE,
ticks = "outside",
tick0 = 0,
dtick = 0.1,
ticklen = 5*show_ticks,
tickwidth = 1,
tickcolor = toRGB("gray70"),
zeroline = T,
range = xrange,
domain = c(0.01 + 0.14*(!(" " %in% labels)), 1)
),
yaxis = list(title = "",
showgrid = FALSE,
showline = FALSE,
showticklabels = FALSE,
categoryorder = "trace",
# automargin = T,
zeroline = FALSE),
hovermode = 'closest',
barmode = ifelse(grouped, 'group', 'stack'),
title = list(text = title, font = list(color = 'black')),
# title = title,
# titlefont = list(color='black'),
font = list(color='black', size=legendSize-1),
# paper_bgcolor = 'rgb(248, 248, 255)', plot_bgcolor = 'rgb(248, 248, 255)',
margin = list(l = margin_l, r = margin_r, t = margin_t, b = 24, autoexpand = thin), # 21, autoexpand=FALSE removes useless margin at bottom but creates bug with legend
# margin = list(b = 20, t = margin_t),
legend = list(orientation='h', y=legendY, x=legendX, traceorder='normal', font=list(size=legendSize, color='black')), # family='Balto',  , family=legendFont
# showlegend = (showLegend & !((("Yes" %in% legend) | ("Oui" %in% legend)) & (length(legend)<4)))) %>%
showlegend = (showLegend & !(setequal(legend, c('Yes', 'No', 'PNR')) | setequal(legend, c('Oui', 'Non', 'NSP'))))) %>%
# labeling the y-axis
add_annotations(xref = 'paper', yref = 'y', x = 0.14, y = labels,
xanchor = 'right',
text = labels,
font = list(family = 'Arial', size = 14, color = 'black'),
showarrow = FALSE, align = 'right') # %>%
# Legend in the Yes/No case
if ((setequal(legend, c('Yes', 'No', 'PNR')) | setequal(legend, c('Oui', 'Non', 'NSP')))) {
bars <- bars %>% add_annotations(xref = 'x', yref = 'paper',
x = c(0.1, 0.9, 1.1),
y = 1.5,
text = legend,
font = list(family = 'Arial', size = 16, color = 'black'),
showarrow = FALSE) } # %>%
# print(nrow(data))
# print(hover)
# print(nrow(hovers))
# print(ncol(hovers))
if (nrow(data)>1) { for (i in 2:nrow(data)) { # evaluate=TRUE,
bars <- add_trace(bars, x = data[i,], name=legend[i], text = values[,i], hoverinfo = 'text', hovertext = hovers[,i], marker = list(color = color[i]))
} }
if (online) { api_create(bars, filename=file, sharing="public") }
if (!missing(file) & save) save_plotly(bars, filename = file) # new
return(bars)
}
barres(data=td, showLegend=F, labels=tl, legend=tleg, sort = T)
barres <- function(data, vars, file, title="", labels, color=c(), rev_color = FALSE, hover=legend, nsp=TRUE, sort=TRUE, legend=hover, showLegend=T, margin_r=0, margin_l=NA, online=FALSE,
display_values=T, thin=T, legend_x=NA, show_ticks=T, xrange=NA, save = FALSE, df=e1, miss=T, weights = T, fr=T, rev=T, grouped = F) {
if (missing(vars) & missing(legend) & missing(hover)) warning('hover or legend must be given')
if (!missing(miss)) nsp <- miss
if (missing(data) & !missing(vars)) {
data <- dataKN(vars, data=df, miss=miss, weights = weights, return = "", fr=fr, rev=rev)
if (missing(legend) & missing(hover)) {
if (is.logical(df[[vars[1]]])) hover <- legend <- labels # data1(var = vars[1], data=df, weights = weights)
else hover <- legend <- dataN(var = vars[1], data=df, miss=miss, weights = weights, return = "legend", fr=fr, rev_legend = rev) } }
if (length(color)==0) color <- color(data, nsp, rev_color = rev_color)
margin_t <- 0 + 25*(!(thin))
if (title!="") { margin_t <- 100 }
if (grepl("<br>", title)) { margin_t <- 150 }
legendSize <- 15 # 10, 13
legendY <- 1.1  + 0.3*thin/(ncol(data)-1) # last term may be problematic
legendX <- 0.2
# legendFont <- 'Open Sans'
if (is.na(margin_l)) { margin_l <- 4.7*max(nchar(labels)/(1 + str_count(labels, '<br>'))) }
if (max(nchar(labels)) > 25) { legendSize <- 15 } # 9, 13
# if (max(nchar(labels)) > 50) { legendSize <- 8 }
# if (max(nchar(labels)) > 60) { legendSize <- 7 }
if (max(nchar(labels)) > 50) { # 70
legendSize <- 13 # 11
# legendY = 1.2
legendX= -0.2 # 1
# if (ncol(data)>1) margin_t = 170
}
if (!is.na(legend_x)) legendX <- legend_x
if (!showLegend) { margin_t <- max(0, margin_t - 70) }
if (ncol(data)==1) legendY = 1.5 + 0.3*thin
if (sort) {
order <- order_agree(data = data, miss = miss, rev = rev, n = length(labels))
labels <- labels[order]
data <- matrix(data[, order], nrow=nrow(data))
}
if (nrow(data)==1 & (sort | !showLegend)) {  # new: add !showLegend to manage responsable_CC i.e. comparisons of a multiple answer question
if (!sort) order <- 1:length(labels)
hover <- hover[order]
value <- c()
for (i in 1:length(hover)) {
hover[i] <- paste(hover[i], "<br>Choisi dans ", round(100*data[1, i]), "% des réponses", sep="")
value[i] <- paste(round(100*data[1, i]), '%', sep='') }
hovers <- matrix(hover, nrow=length(hover))
values <- matrix(value, nrow=length(hover))
}
else {
hovers <- values <- c()
if (nsp) {
for (i in 1:(length(hover)-1)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]/(1+data[length(hover), j])), '% des réponses<br>', round(100*data[i, j]), '% des réponses exprimées') )
values <- c(values, paste(round(100*data[i, j]/(1+data[length(hover), j])), '%', sep=''))
}
}
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[length(hover)], '<br>', round(100*data[length(hover), j]/(1+data[length(hover), j])), '% des réponses<br>') )
values <- c(values, paste(round(100*data[length(hover), j]/(1+data[length(hover), j])), '%', sep=''))
}
}
else {
if (is.element(hover[length(hover)],c("PNR", "NSP"))) hover <- hover[1:(length(hover)-1)]
if (is.element(legend[length(legend)],c("PNR", "NSP"))) legend <- legend[1:(length(legend)-1)]
for (i in 1:length(hover)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]), '% des réponses exprimées<br>') )
values <- c(values, paste(round(100*data[i, j]), '%', sep=''))
}
}
}
hovers <- matrix(hovers, ncol=length(hover))
values <- matrix(values, ncol=length(hover))
}
if (!(display_values)) values <- replace(values, T, '')
bars <- plot_ly(x = data[1,], y = labels, type = 'bar', orientation = 'h', text = values[,1], textposition = 'auto', # sort=FALSE,
hoverinfo = hovers[,1], name=legend[1], marker = list(color = color[1], line = list(color = 'white'))) %>% # , width = 0
layout(xaxis = list(title = "",
showgrid = show_ticks,
showline = FALSE,
showticklabels = show_ticks,
gridcolor = toRGB("gray70"), # + noir, + proche de 0
gridwidth = 1,
griddash = "dot",
autotick = FALSE,
ticks = "outside",
tick0 = 0,
dtick = 0.1,
ticklen = 5*show_ticks,
tickwidth = 1,
tickcolor = toRGB("gray70"),
zeroline = T,
range = xrange,
domain = c(0.01 + 0.14*(!(" " %in% labels)), 1)
),
yaxis = list(title = "",
showgrid = FALSE,
showline = FALSE,
showticklabels = FALSE,
categoryorder = "trace",
# automargin = T,
zeroline = FALSE),
hovermode = 'closest',
barmode = ifelse(grouped, 'group', 'stack'),
title = list(text = title, font = list(color = 'black')),
# title = title,
# titlefont = list(color='black'),
font = list(color='black', size=legendSize-1),
# paper_bgcolor = 'rgb(248, 248, 255)', plot_bgcolor = 'rgb(248, 248, 255)',
margin = list(l = margin_l, r = margin_r, t = margin_t, b = 24, autoexpand = thin), # 21, autoexpand=FALSE removes useless margin at bottom but creates bug with legend
# margin = list(b = 20, t = margin_t),
legend = list(orientation='h', y=legendY, x=legendX, traceorder='normal', font=list(size=legendSize, color='black')), # family='Balto',  , family=legendFont
# showlegend = (showLegend & !((("Yes" %in% legend) | ("Oui" %in% legend)) & (length(legend)<4)))) %>%
showlegend = (showLegend & !(setequal(legend, c('Yes', 'No', 'PNR')) | setequal(legend, c('Oui', 'Non', 'NSP'))))) %>%
# labeling the y-axis
add_annotations(xref = 'paper', yref = 'y', x = 0.14, y = labels,
xanchor = 'right',
text = labels,
font = list(family = 'Arial', size = 14, color = 'black'),
showarrow = FALSE, align = 'right') # %>%
# Legend in the Yes/No case
if ((setequal(legend, c('Yes', 'No', 'PNR')) | setequal(legend, c('Oui', 'Non', 'NSP')))) {
bars <- bars %>% add_annotations(xref = 'x', yref = 'paper',
x = c(0.1, 0.9, 1.1),
y = 1.5,
text = legend,
font = list(family = 'Arial', size = 16, color = 'black'),
showarrow = FALSE) } # %>%
# print(nrow(data))
# print(hover)
# print(nrow(hovers))
# print(ncol(hovers))
if (nrow(data)>1) { for (i in 2:nrow(data)) { # evaluate=TRUE,
bars <- add_trace(bars, x = data[i,], name=legend[i], text = values[,i], hoverinfo = 'text', hovertext = hovers[,i], marker = list(color = color[i]))
} }
if (online) { api_create(bars, filename=file, sharing="public") }
if (!missing(file) & save) save_plotly(bars, filename = file) # new
return(bars)
}
(responsable_CC_v12 <- barres12(vars = variables_responsable_CC, miss = F, showLegend=F, labels=labels_responsable))
save_plotly(responsable_CC_v12)
barres(data=td, showLegend=F, labels=tl, legend=tleg, sort = F, grouped=T)
barres(data=td, showLegend=F, labels=tl, legend=tleg, grouped=T)
barres(data=matrix(td, nrow=2), showLegend=F, labels=tl, legend=tleg, sort = F, grouped=T)
barres(data=matrix(td, nrow=2), showLegend=F, labels=labels_responsable, legend=tleg, sort = F, grouped=T)
barres(data=matrix(td, nrow=2), showLegend=F, labels=labels_responsable, sort = F, grouped=T)
data_inegalite_repandue
matrix(td, nrow=2)
dataN("inegalite_repandue_2e", c[c$inegalite_repandue_2e!="",], miss = F, return='legend')
barres(data=matrix(td, nrow=2), showLegend=F, labels=labels_responsable, legend = c("V1", "V2"), sort = F, grouped=T, rev = F, miss = F)
barres(data=matrix(td, nrow=2), labels=labels_responsable, legend = c("V1", "V2"), sort = F, grouped=T, rev = F, miss = F)
barres(data=rbind(dataN(variables_responsable_CC, e1, miss=F), dataN(variables_responsable_CC, e2, miss=F)), labels=labels_responsable, legend = c("Vague 1", "Vague 2"), sort = F, grouped=T, rev = F, miss = F)
dataN(variables_responsable_CC, e1, miss=F)
dataKN(variables_responsable_CC, e1, miss=F)
barres(data=rbind(dataKN(variables_responsable_CC, e1, miss=F), dataKN(variables_responsable_CC, e2, miss=F)), labels=labels_responsable, legend = c("Vague 1", "Vague 2"), sort = F, grouped=T, rev = F, miss = F)
barres(data=rbind(dataKN(variables_responsable_CC, e1, miss=F), dataKN(variables_responsable_CC, e2, miss=F)), labels=labels_responsable, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = F, miss = F)
(responsable_CC_v12_ <- barres12(vars = variables_responsable_CC, miss = F, showLegend=F, labels=labels_responsable))
save_plotly(responsable_CC_v12_)
(responsable_CC_v12 <- barres(data=rbind(dataKN(variables_responsable_CC, e1, miss=F), dataKN(variables_responsable_CC, e2, miss=F)), labels=labels_responsable, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = F, miss = F))
save_plotly(responsable_CC_v12)
(CCC_avis <- barres12(vars = variables_CCC_avis, rev = F, miss = F, showLegend=F, labels=labels_CCC_avis_long))
(responsable_CC_v12 <- barres12(vars = variables_responsable_CC, miss = F, showLegend=F, labels=labels_responsable))
(responsable_CC <- barres(data=rbind(dataKN(variables_responsable_CC, e1, miss=F), dataKN(variables_responsable_CC, e2, miss=F)), labels=labels_responsable, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = F, miss = F))
save_plotly(responsable_CC)
(CCC_avis <- barres(data=rbind(dataKN(variables_CCC_avis, e1, miss=F), dataKN(variables_CCC_avis, e2, miss=F)), labels=labels_CCC_avis_long, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = F, miss = F))
(CCC_avis <- barres(data=rbind(dataKN(variables_CCC_avis, e1, miss=F), dataKN(variables_CCC_avis, e2, miss=F)), labels=labels_CCC_avis_long, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = F, miss = F))
save_plotly(CCC_avis)
decrit(e$representativite_CCC) # TODO: image representative
(representativite_CCC <- barres12(vars="representativite_CCC", labels="Les membres de la CCC sont représentatifs de l'ensemble des Français", grouped=T, rev = F, miss = F))
(representativite_CCC <- barres12(vars="representativite_CCC", labels="Les membres de la CCC sont représentatifs de l'ensemble des Français", rev = F, miss = F))
(redistribution_v12 <- barres12(vars = "redistribution", rev = F, miss = F, labels="Il faudrait prendre aux riches pour donner aux pauvres"))
(representativite_CCC <- barres(vars="representativite_CCC", df=e2, labels="Les membres de la CCC sont représentatifs de l'ensemble des Français", rev = F, miss = F))
(representativite_CCC <- barres(vars="representativite_CCC", df=e2, labels="La CCC est représentative", rev = F, miss = F))
save_plotly(representativite_CCC)
save_plotly(representativite_CCC)
barres(vars = variables_qualite_enfant, df=e2, rev = F, miss = F, showLegend=F, labels=labels_qualite_enfant)
# data_qualite_enfant <- matrix(NA, ncol = length(variables_qualite_enfant), nrow = 2)
# c$qualite_enfant_foi <- c$qualite_enfant_foi_1e
# for (j in 1:length(variables_qualite_enfant)) data_qualite_enfant[1,j] <- length(which(c[[variables_qualite_enfant[j]]]==T))/length(which(!is.na(c[[variables_qualite_enfant[j]]])))
# for (j in 1:length(variables_qualite_enfant)) data_qualite_enfant[2,j] <- sum(e$weight[e[[variables_qualite_enfant[j]]]==T])/sum(e$weight)
data_qualite_enfant_all <- matrix(NA, ncol = length(variables_qualite_enfant), nrow = 3)
for (j in 1:length(variables_qualite_enfant)) data_qualite_enfant_all[3,j] <- sum(e$weight[e2[[variables_qualite_enfant[j]]]==T])/sum(e2$weight)
data_qualite_enfant_all[1:2,] <- data_qualite_enfant
(qualite_enfant <- barres(data = data_qualite_enfant, grouped = T, rev = F, miss=F, labels=labels_qualite_enfant, legend = c('CCC', 'Population (V1)', "Population (V2)")))
barres(data = data_qualite_enfant, grouped = T, rev = F, miss=F, labels=labels_qualite_enfant_en, legend = c('CCC', 'Population (PSE)'))
data_anthropique_v1 <- (rbind(length(which(e1$part_anthropique <= 45)), length(which(e1$part_anthropique %between% c(46, 55))), length(which(e1$part_anthropique %between% c(56, 65))), length(which(e1$part_anthropique %between% c(66, 75))), length(which(e1$part_anthropique >75)))/nrow(e1))
data_anthropique_v2 <- (rbind(length(which(e2$part_anthropique <= 45)), length(which(e2$part_anthropique %between% c(46, 55))), length(which(e2$part_anthropique %between% c(56, 65))), length(which(e2$part_anthropique %between% c(66, 75))), length(which(e2$part_anthropique >75)))/nrow(e2))
data_anthropique <- cbind(data_anthropique_v1, data_anthropique_v2)
data_anthropique
(part_anthropique <- barres(data = data_anthropique, rev = F, rev_color = T,  miss = F, sort = F, labels = c("Part des Français considérant que \nle changement climatique est anthropique ? (V1)", "Vague 2 (V2)"), legend=c("Moins de 45%", "De 46 à 55%", "De 56 à 65%", "De 66 à 75%", "Plus de 75%")))
data_anthropique_v2
(part_anthropique <- barres(data = data_anthropique, rev = F, rev_color = T,  miss = F, sort = F, labels = c("Vague 2 (V2)", "Part des Français considérant que \nle changement climatique est anthropique ? (V1)"), legend=c("Moins de 45%", "De 46 à 55%", "De 56 à 65%", "De 66 à 75%", "Plus de 75%")))
data_anthropique <- cbind(data_anthropique_v2, data_anthropique_v1)
(part_anthropique <- barres(data = data_anthropique, rev = F, rev_color = T,  miss = F, sort = F, labels = c("Vague 2 (V2)", "Part des Français considérant que \nle changement climatique est anthropique ? (V1)"), legend=c("Moins de 45%", "De 46 à 55%", "De 56 à 65%", "De 66 à 75%", "Plus de 75%")))
save_plotly(part_anthropique)
data_taxe_carbone_v1 <- cbind(dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='pour',]), dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='contre',]), dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='neutre',]))
data_taxe_carbone_v2 <- cbind(dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='pour',]), dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='contre',]), dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='neutre',]))
data_taxe_carbone <- rbind(data_taxe_carbone_v2[1], data_taxe_carbone_v1[1], data_taxe_carbone_v2[2], data_taxe_carbone_v1[2], data_taxe_carbone_v2[3], data_taxe_carbone_v1[3])
(pour_taxe_carbone2 <- barres(data = data_taxe_carbone, rev = F, miss = T, sort = F, labels = labels12(c("Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est pour", "Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est contre", "Favorable à une augmentation de la taxe carbone\nVariante: sans information")), legend=c('Oui ', 'Non ', 'NSP')))
data_taxe_carbone
data_taxe_carbone_v1 <- cbind(dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='pour',]), dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='contre',]), dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='neutre',]))
data_taxe_carbone_v2 <- cbind(dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='pour',]), dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='contre',]), dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='neutre',]))
data_taxe_carbone <- rbind(data_taxe_carbone_v2[1], data_taxe_carbone_v1[1], data_taxe_carbone_v2[2], data_taxe_carbone_v1[2], data_taxe_carbone_v2[3], data_taxe_carbone_v1[3])
(pour_taxe_carbone2 <- barres(data = data_taxe_carbone, rev = F, miss = T, sort = F, labels = labels12(c("Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est pour", "Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est contre", "Favorable à une augmentation de la taxe carbone\nVariante: sans information")), legend=c('Oui ', 'Non ', 'NSP')))
data_taxe_carbone
data_taxe_carbone_v1 <- cbind(dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='pour',]), dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='contre',]), dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='neutre',]))
data_taxe_carbone_v2 <- cbind(dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='pour',]), dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='contre',]), dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='neutre',]))
data_taxe_carbone <- cbind(data_taxe_carbone_v2[1], data_taxe_carbone_v1[1], data_taxe_carbone_v2[2], data_taxe_carbone_v1[2], data_taxe_carbone_v2[3], data_taxe_carbone_v1[3])
data_taxe_carbone
decrit(e2$pour_taxe_carbone_contre, miss=T)
data_taxe_carbone_v1
data_taxe_carbone <- cbind(data_taxe_carbone_v2[,1], data_taxe_carbone_v1[,1], data_taxe_carbone_v2[,2], data_taxe_carbone_v1[,2], data_taxe_carbone_v2[,3], data_taxe_carbone_v1[,3])
(pour_taxe_carbone2 <- barres(data = data_taxe_carbone, rev = F, miss = T, sort = F, labels = labels12(c("Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est pour", "Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est contre", "Favorable à une augmentation de la taxe carbone\nVariante: sans information")), legend=c('Oui ', 'Non ', 'NSP')))
(pour_taxe_carbone2 <- barres(data = data_taxe_carbone, rev = F, miss = T, sort = F, labels = labels12(c("Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est <b>pour</b>", "Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est <b>contre</b>", "Favorable à une augmentation de la taxe carbone\nVariante: sans information")), legend=c('Oui ', 'Non ', 'NSP')))
save_plotly(pour_taxe_carbone2)
(pour_taxe_carbone <- barres(data = data_taxe_carbone, rev = F, miss = T, sort = F, labels = labels12(c("Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est <b>pour</b>", "Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est <b>contre</b>", "Favorable à une augmentation de la taxe carbone\nVariante: sans information")), legend=c('Oui ', 'Non ', 'NSP')))
save_plotly(pour_taxe_carbone)
(pour_taxe_carbone_neutre <- barres12(vars = "pour_taxe_carbone", df = list(e1[e1$variante_taxe_carbone=='neutre',], e2[e2$variante_taxe_carbone=='neutre',]), rev = F, thin = F, miss = T, sort = F, labels = c("Favorable à une augmentation de la taxe carbone\nVariante: sans information")))
(pour_taxe_carbone_neutre <- barres12(vars = "pour_taxe_carbone", df = list(e1[e1$variante_taxe_carbone=='neutre',], e2[e2$variante_taxe_carbone=='neutre',]), legend=c("Oui ", "Non ", "NSP") rev = F, thin = F, miss = T, sort = F, labels = c("Favorable à une augmentation de la taxe carbone\nVariante: sans information")))
(pour_taxe_carbone_neutre <- barres12(vars = "pour_taxe_carbone", df = list(e1[e1$variante_taxe_carbone=='neutre',], e2[e2$variante_taxe_carbone=='neutre',]), legend=c("Oui ", "Non ", "NSP"), rev = F, thin = F, miss = T, sort = F, labels = c("Favorable à une augmentation de la taxe carbone\nVariante: sans information")))
(pour_taxe_carbone_neutre <- barres12(vars = "pour_taxe_carbone", df = list(e1[e1$variante_taxe_carbone=='neutre',], e2[e2$variante_taxe_carbone=='neutre',]), legend=c("Oui ", "Non ", "NSP"), rev = F, miss = T, sort = F, labels = c("Favorable à une augmentation de la taxe carbone\nVariante: sans information")))
save_plotly(pour_taxe_carbone_neutre)
(solution_CC_v12 <- barres12(vars = variables_solution, rev = F, miss = F, showLegend=F, labels=labels_solution))
(solution_CC_v12 <- barres(data=rbind(dataKN(variables_solution, e1, miss=F), dataKN(variables_solution, e2, miss=F)), labels=labels_solution, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = F, miss = F))save_plotly(solution_CC_v12)
(solution_CC_v12 <- barres(data=rbind(dataKN(variables_solution, e1, miss=F), dataKN(variables_solution, e2, miss=F)), labels=labels_solution, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = F, miss = F))
save_plotly(solution_CC_v12)
data_solution_all <- matrix(NA, ncol = length(variables_solution), nrow = 3)
data_solution_all[1:2,] <- data_solution_good
for (j in 1:length(variables_solution)) data_solution[3,j] <- sum(e2$weight[e2[[variables_solution[j]]]==T])/sum(e2$weight)
variables_solution
for (j in 1:length(variables_solution)) { print("a"); data_solution[3,j] <- sum(e2$weight[e2[[variables_solution[j]]]==T])/sum(e2$weight)}
for (j in 1:length(variables_solution)) data_solution_all[3,j] <- sum(e2$weight[e2[[variables_solution[j]]]==T])/sum(e2$weight)
# call$solution_CC_rien <- grepl('rien a fraire', call$s1_e_q19)
# call$solution_CC_progres <- grepl('technique permettra de trouver des solutions', call$s1_e_q19)
# call$solution_CC_traite <- grepl('est aux etats de reglementer au niveau mond', call$s1_e_q19)
# call$solution_CC_changer[call$s1_e_q19==''] <- NA
# call$solution_CC_progres[call$s1_e_q19==''] <- NA
# call$solution_CC_traite[call$s1_e_q19==''] <- NA
# call$s1_e_q19[call$s1_e_q19==''] <- NA
# data_solution_good <- data_solution
# for (j in 1:length(variables_solution)) data_solution_good[1,j] <- length(which(call[[variables_solution[j]]]==T))/length(which(!is.na(call[[variables_solution[j]]])))
#
data_solution_all <- matrix(NA, ncol = length(variables_solution), nrow = 4)
data_solution_all[c(1:2,4),] <- rbind(data_solution_good, c(11, 52, 19, 17)/99)
for (j in 1:length(variables_solution)) data_solution_all[3,j] <- sum(e2$weight[e2[[variables_solution[j]]]==T])/sum(e2$weight)
(solution_CC <- barres(data = data_solution_all, color = color(4), grouped = T, rev = F, miss=F, labels=labels_solution, legend = c('CCC', 'Population (V1)', 'Population (V2)', 'Population (ADEME)')))
(solution_CC <- barres(data = data_solution_all, color = color(7)[c(1,5:7)], grouped = T, rev = F, miss=F, labels=labels_solution, legend = c('CCC', 'Population (V1)', 'Population (V2)', 'Population (ADEME)')))
save_plotly(solution_CC) # ADEME octobre 2019 toplot!
(solution_CC_en <- barres(data = data_solution_all, color = color(7)[c(1,5:7)], grouped = T, rev = F, miss=F, labels=labels_solution_en, legend = c('CCC', 'Population (W)', 'Population (W2)', 'Population (ADEME)')))
save_plotly(solution_CC_en) # TODO: use color(7)[c(5:6)] for all V1, V2
# data_obstacles_both <- matrix(NA, ncol = length(variables_obstacles), nrow = 2)
# for (j in 1:length(variables_obstacles)) data_obstacles_both[1,j] <- length(which(c[[variables_obstacles[j]]]<=2))/length(which(!is.na(c[[variables_obstacles[j]]])))
# for (j in 1:length(variables_obstacles)) data_obstacles_both[2,j] <- sum(e$weight[e[[variables_obstacles[j]]]<=2],na.rm=T)/sum(e$weight)
data_obstacles <- matrix(NA, ncol = length(variables_obstacles), nrow = 3)
data_obstacles[1:2,] <- data_obstacles_both
for (j in 1:length(variables_obstacles)) data_obstacles_both[3,j] <- sum(e2$weight[e2[[variables_obstacles[j]]]<=2],na.rm=T)/sum(e2$weight)
for (j in 1:length(variables_obstacles)) data_obstacles[3,j] <- sum(e2$weight[e2[[variables_obstacles[j]]]<=2],na.rm=T)/sum(e2$weight)
(obstacles_both <- barres(data = data_obstacles, grouped = T, rev = F, miss=F, labels=labels_obstacles[1:7], legend = c('CCC', 'Population (V1)', 'Population (V2)')))
(obstacles_both <- barres(data = data_obstacles, color = color(4)[c(1,3,4)] grouped = T, rev = F, miss=F, labels=labels_obstacles[1:7], legend = c('CCC', 'Population (V1)', 'Population (V2)')))
(obstacles_both <- barres(data = data_obstacles, colors = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=labels_obstacles[1:7], legend = c('CCC', 'Population (V1)', 'Population (V2)')))
(obstacles_both <- barres(data = data_obstacles, color = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=labels_obstacles[1:7], legend = c('CCC', 'Population (V1)', 'Population (V2)')))
save_plotly(obstacles_both)
(obstacles_both_en <- barres(data = data_obstacles, color = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=labels_obstacles_en[1:7], legend = c('CCC', 'Population (W1)', 'Population (W2)')))
(obstacles_both_en <- barres(data = data_obstacles, color = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=c("Lobbies", "Lack of political will", "Lack of cooperation between countries", "Inequalities", "Uncertainties of scientific community", "Demography", "Lack of alternative technologies"), legend = c('CCC', 'Population (W1)', 'Population (W2)')))
save_plotly(obstacles_both_en)
data_nb_politiques_env_v1 <- (rbind(length(which(e1$nb_politiques_env <= 6)), length(which(e1$nb_politiques_env %between% c(7, 8))), length(which(e1$nb_politiques_env == 9)), length(which(e1$nb_politiques_env == 10)), length(which(e1$nb_politiques_env >10)))/nrow(e1))
data_nb_politiques_env_v2 <- (rbind(length(which(e2$nb_politiques_env <= 6)), length(which(e2$nb_politiques_env %between% c(7, 8))), length(which(e2$nb_politiques_env == 9)), length(which(e2$nb_politiques_env == 10)), length(which(e2$nb_politiques_env >10)))/nrow(e2))
(nb_politiques_env <- barres(data = data_nb_politiques_env, rev = F, rev_color = T,  miss = F, sort = F, labels = label12("Nombre de politiques climatiques soutenues"), legend=c("De 0 à 6", "7 ou 8", "9", "10", "11 ou 12")))
(nb_politiques_env <- barres(data = data_nb_politiques_env, rev = F, rev_color = T,  miss = F, sort = F, labels = labels12("Nombre de politiques climatiques soutenues"), legend=c("De 0 à 6", "7 ou 8", "9", "10", "11 ou 12")))
data_nb_politiques_env
data_nb_politiques_env_v1
data_nb_politiques_env_v2
data_nb_politiques_env
data_nb_politiques_env <- cbind(data_nb_politiques_env_v2, data_nb_politiques_env_v1)
(nb_politiques_env <- barres(data = data_nb_politiques_env, rev = F, rev_color = T,  miss = F, sort = F, labels = labels12("Nombre de politiques climatiques soutenues"), legend=c("De 0 à 6", "7 ou 8", "9", "10", "11 ou 12")))
save_plotly(nb_politiques_env)
data_qualite_enfant
data_qualite_enfant_all
(qualite_enfant <- barres(data = data_qualite_enfant_all, grouped = T, rev = F, miss=F, labels=labels_qualite_enfant, legend = c('CCC', 'Population (V1)', "Population (V2)")))
(qualite_enfant <- barres(data = data_qualite_enfant_all, color = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=labels_qualite_enfant, legend = c('CCC', 'Population (V1)', "Population (V2)")))
save_plotly(qualite_enfant)
(qualite_enfant_en <- barres(data = data_qualite_enfant_all, grouped = T, rev = F, miss=F, labels=labels_qualite_enfant_en, legend = c('CCC', 'Population (W1)', "Population (W2)")))
(qualite_enfant_en <- barres(data = data_qualite_enfant_all, color = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=labels_qualite_enfant_en, legend = c('CCC', 'Population (W1)', "Population (W2)")))
save_plotly(qualite_enfant_en)
# labels_variables_referendum_v2 <- c(labels_variables_referendum, new_labels_variables_referendum)
(referendum_v12 <- barres(data = cbind(dataKN(vars = new_variables_referendum, data=e2, rev = T), barres12(variables_referendum, return="data")), sort=F, miss=T, labels=c(new_labels_variables_referendum, barres12(variables_referendum, labels=labels_variables_referendum, return="labels")), legend=barres12(variables_referendum, return="legend")))
(gauche_droite_nsp_v2 <- barres(vars = "gauche_droite_nsp", df=e2, miss = T, labels="Comment vous définiriez-vous ?", rev=F, rev_color = T))
barres(data = variables_politiques_1, grouped = T, rev = F, miss=F, labels=labels_variables_politiques_1, legend = c('CCC', 'Population'))
barres(data = barres12(variables_politiques_1, miss=F, return="data"), grouped = T, rev = F, miss=F, labels=labels_variables_politiques_1, legend = c('CCC', 'Population'))
barres12(variables_politiques_1, miss=F, return="data")
data_solution_ademe
barres(data = data_solution_ademe, grouped = T, rev = F, miss=F, labels=labels_solution, legend = c('CCC', 'Population'))
