if (!(display_values)) values <- replace(values, T, '')
bars <- plot_ly(x = data[1,], y = labels, type = 'bar', orientation = 'h', text = values[,1], textposition = 'auto', # sort=FALSE,
hoverinfo = hovers[,1], name=legend[1], marker = list(color = color[1], line = list(color = 'white'))) %>% # , width = 0
layout(xaxis = list(title = "",
showgrid = show_ticks,
showline = FALSE,
showticklabels = show_ticks,
gridcolor = toRGB("gray70"), # + noir, + proche de 0
gridwidth = 1,
griddash = "dot",
autotick = FALSE,
ticks = "outside",
tick0 = 0,
dtick = 0.1,
ticklen = 5*show_ticks,
tickwidth = 1,
tickcolor = toRGB("gray70"),
zeroline = T,
range = xrange,
domain = c(0.01 + 0.14*(!(" " %in% labels)), 1)
),
yaxis = list(title = "",
showgrid = FALSE,
showline = FALSE,
showticklabels = FALSE,
categoryorder = "trace",
# automargin = T,
zeroline = FALSE),
hovermode = 'closest',
barmode = ifelse(grouped, 'group', 'stack'),
title = list(text = title, font = list(color = 'black')),
# title = title,
# titlefont = list(color='black'),
font = list(color='black', size=legendSize-1),
# paper_bgcolor = 'rgb(248, 248, 255)', plot_bgcolor = 'rgb(248, 248, 255)',
margin = list(l = margin_l, r = margin_r, t = margin_t, b = 24, autoexpand = thin), # 21, autoexpand=FALSE removes useless margin at bottom but creates bug with legend
# margin = list(b = 20, t = margin_t),
legend = list(orientation='h', y=legendY, x=legendX, traceorder='normal', font=list(size=legendSize, color='black')), # family='Balto',  , family=legendFont
# showlegend = (showLegend & !((("Yes" %in% legend) | ("Oui" %in% legend)) & (length(legend)<4)))) %>%
showlegend = (showLegend & !(setequal(legend, c('Yes', 'No', 'PNR')) | setequal(legend, c('Oui', 'Non', 'NSP'))))) %>%
# labeling the y-axis
add_annotations(xref = 'paper', yref = 'y', x = 0.14, y = labels,
xanchor = 'right',
text = labels,
font = list(family = 'Arial', size = 14, color = 'black'),
showarrow = FALSE, align = 'right') # %>%
# Legend in the Yes/No case
if ((setequal(legend, c('Yes', 'No', 'PNR')) | setequal(legend, c('Oui', 'Non', 'NSP')))) {
bars <- bars %>% add_annotations(xref = 'x', yref = 'paper',
x = c(0.1, 0.9, 1.1),
y = 1.5,
text = legend,
font = list(family = 'Arial', size = 16, color = 'black'),
showarrow = FALSE) } # %>%
# print(nrow(data))
# print(hover)
# print(nrow(hovers))
# print(ncol(hovers))
if (nrow(data)>1) { for (i in 2:nrow(data)) { # evaluate=TRUE,
bars <- add_trace(bars, x = data[i,], name=legend[i], text = values[,i], hoverinfo = 'text', hovertext = hovers[,i], marker = list(color = color[i]))
} }
if (online) { api_create(bars, filename=file, sharing="public") }
if (!missing(file) & save) save_plotly(bars, filename = file) # new
return(bars)
}
(responsable_CC_v12 <- barres12(vars = variables_responsable_CC, miss = F, showLegend=F, labels=labels_responsable))
save_plotly(responsable_CC_v12)
barres(data=td, showLegend=F, labels=tl, legend=tleg, sort = F, grouped=T)
barres(data=td, showLegend=F, labels=tl, legend=tleg, grouped=T)
barres(data=matrix(td, nrow=2), showLegend=F, labels=tl, legend=tleg, sort = F, grouped=T)
barres(data=matrix(td, nrow=2), showLegend=F, labels=labels_responsable, legend=tleg, sort = F, grouped=T)
barres(data=matrix(td, nrow=2), showLegend=F, labels=labels_responsable, sort = F, grouped=T)
data_inegalite_repandue
matrix(td, nrow=2)
dataN("inegalite_repandue_2e", c[c$inegalite_repandue_2e!="",], miss = F, return='legend')
barres(data=matrix(td, nrow=2), showLegend=F, labels=labels_responsable, legend = c("V1", "V2"), sort = F, grouped=T, rev = F, miss = F)
barres(data=matrix(td, nrow=2), labels=labels_responsable, legend = c("V1", "V2"), sort = F, grouped=T, rev = F, miss = F)
barres(data=rbind(dataN(variables_responsable_CC, e1, miss=F), dataN(variables_responsable_CC, e2, miss=F)), labels=labels_responsable, legend = c("Vague 1", "Vague 2"), sort = F, grouped=T, rev = F, miss = F)
dataN(variables_responsable_CC, e1, miss=F)
dataKN(variables_responsable_CC, e1, miss=F)
barres(data=rbind(dataKN(variables_responsable_CC, e1, miss=F), dataKN(variables_responsable_CC, e2, miss=F)), labels=labels_responsable, legend = c("Vague 1", "Vague 2"), sort = F, grouped=T, rev = F, miss = F)
barres(data=rbind(dataKN(variables_responsable_CC, e1, miss=F), dataKN(variables_responsable_CC, e2, miss=F)), labels=labels_responsable, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = F, miss = F)
(responsable_CC_v12_ <- barres12(vars = variables_responsable_CC, miss = F, showLegend=F, labels=labels_responsable))
save_plotly(responsable_CC_v12_)
(responsable_CC_v12 <- barres(data=rbind(dataKN(variables_responsable_CC, e1, miss=F), dataKN(variables_responsable_CC, e2, miss=F)), labels=labels_responsable, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = F, miss = F))
save_plotly(responsable_CC_v12)
(CCC_avis <- barres12(vars = variables_CCC_avis, rev = F, miss = F, showLegend=F, labels=labels_CCC_avis_long))
(responsable_CC_v12 <- barres12(vars = variables_responsable_CC, miss = F, showLegend=F, labels=labels_responsable))
(responsable_CC <- barres(data=rbind(dataKN(variables_responsable_CC, e1, miss=F), dataKN(variables_responsable_CC, e2, miss=F)), labels=labels_responsable, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = F, miss = F))
save_plotly(responsable_CC)
(CCC_avis <- barres(data=rbind(dataKN(variables_CCC_avis, e1, miss=F), dataKN(variables_CCC_avis, e2, miss=F)), labels=labels_CCC_avis_long, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = F, miss = F))
(CCC_avis <- barres(data=rbind(dataKN(variables_CCC_avis, e1, miss=F), dataKN(variables_CCC_avis, e2, miss=F)), labels=labels_CCC_avis_long, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = F, miss = F))
save_plotly(CCC_avis)
decrit(e$representativite_CCC) # TODO: image representative
(representativite_CCC <- barres12(vars="representativite_CCC", labels="Les membres de la CCC sont représentatifs de l'ensemble des Français", grouped=T, rev = F, miss = F))
(representativite_CCC <- barres12(vars="representativite_CCC", labels="Les membres de la CCC sont représentatifs de l'ensemble des Français", rev = F, miss = F))
(redistribution_v12 <- barres12(vars = "redistribution", rev = F, miss = F, labels="Il faudrait prendre aux riches pour donner aux pauvres"))
(representativite_CCC <- barres(vars="representativite_CCC", df=e2, labels="Les membres de la CCC sont représentatifs de l'ensemble des Français", rev = F, miss = F))
(representativite_CCC <- barres(vars="representativite_CCC", df=e2, labels="La CCC est représentative", rev = F, miss = F))
save_plotly(representativite_CCC)
save_plotly(representativite_CCC)
barres(vars = variables_qualite_enfant, df=e2, rev = F, miss = F, showLegend=F, labels=labels_qualite_enfant)
# data_qualite_enfant <- matrix(NA, ncol = length(variables_qualite_enfant), nrow = 2)
# c$qualite_enfant_foi <- c$qualite_enfant_foi_1e
# for (j in 1:length(variables_qualite_enfant)) data_qualite_enfant[1,j] <- length(which(c[[variables_qualite_enfant[j]]]==T))/length(which(!is.na(c[[variables_qualite_enfant[j]]])))
# for (j in 1:length(variables_qualite_enfant)) data_qualite_enfant[2,j] <- sum(e$weight[e[[variables_qualite_enfant[j]]]==T])/sum(e$weight)
data_qualite_enfant_all <- matrix(NA, ncol = length(variables_qualite_enfant), nrow = 3)
for (j in 1:length(variables_qualite_enfant)) data_qualite_enfant_all[3,j] <- sum(e$weight[e2[[variables_qualite_enfant[j]]]==T])/sum(e2$weight)
data_qualite_enfant_all[1:2,] <- data_qualite_enfant
(qualite_enfant <- barres(data = data_qualite_enfant, grouped = T, rev = F, miss=F, labels=labels_qualite_enfant, legend = c('CCC', 'Population (V1)', "Population (V2)")))
barres(data = data_qualite_enfant, grouped = T, rev = F, miss=F, labels=labels_qualite_enfant_en, legend = c('CCC', 'Population (PSE)'))
data_anthropique_v1 <- (rbind(length(which(e1$part_anthropique <= 45)), length(which(e1$part_anthropique %between% c(46, 55))), length(which(e1$part_anthropique %between% c(56, 65))), length(which(e1$part_anthropique %between% c(66, 75))), length(which(e1$part_anthropique >75)))/nrow(e1))
data_anthropique_v2 <- (rbind(length(which(e2$part_anthropique <= 45)), length(which(e2$part_anthropique %between% c(46, 55))), length(which(e2$part_anthropique %between% c(56, 65))), length(which(e2$part_anthropique %between% c(66, 75))), length(which(e2$part_anthropique >75)))/nrow(e2))
data_anthropique <- cbind(data_anthropique_v1, data_anthropique_v2)
data_anthropique
(part_anthropique <- barres(data = data_anthropique, rev = F, rev_color = T,  miss = F, sort = F, labels = c("Part des Français considérant que \nle changement climatique est anthropique ? (V1)", "Vague 2 (V2)"), legend=c("Moins de 45%", "De 46 à 55%", "De 56 à 65%", "De 66 à 75%", "Plus de 75%")))
data_anthropique_v2
(part_anthropique <- barres(data = data_anthropique, rev = F, rev_color = T,  miss = F, sort = F, labels = c("Vague 2 (V2)", "Part des Français considérant que \nle changement climatique est anthropique ? (V1)"), legend=c("Moins de 45%", "De 46 à 55%", "De 56 à 65%", "De 66 à 75%", "Plus de 75%")))
data_anthropique <- cbind(data_anthropique_v2, data_anthropique_v1)
(part_anthropique <- barres(data = data_anthropique, rev = F, rev_color = T,  miss = F, sort = F, labels = c("Vague 2 (V2)", "Part des Français considérant que \nle changement climatique est anthropique ? (V1)"), legend=c("Moins de 45%", "De 46 à 55%", "De 56 à 65%", "De 66 à 75%", "Plus de 75%")))
save_plotly(part_anthropique)
data_taxe_carbone_v1 <- cbind(dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='pour',]), dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='contre',]), dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='neutre',]))
data_taxe_carbone_v2 <- cbind(dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='pour',]), dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='contre',]), dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='neutre',]))
data_taxe_carbone <- rbind(data_taxe_carbone_v2[1], data_taxe_carbone_v1[1], data_taxe_carbone_v2[2], data_taxe_carbone_v1[2], data_taxe_carbone_v2[3], data_taxe_carbone_v1[3])
(pour_taxe_carbone2 <- barres(data = data_taxe_carbone, rev = F, miss = T, sort = F, labels = labels12(c("Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est pour", "Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est contre", "Favorable à une augmentation de la taxe carbone\nVariante: sans information")), legend=c('Oui ', 'Non ', 'NSP')))
data_taxe_carbone
data_taxe_carbone_v1 <- cbind(dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='pour',]), dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='contre',]), dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='neutre',]))
data_taxe_carbone_v2 <- cbind(dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='pour',]), dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='contre',]), dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='neutre',]))
data_taxe_carbone <- rbind(data_taxe_carbone_v2[1], data_taxe_carbone_v1[1], data_taxe_carbone_v2[2], data_taxe_carbone_v1[2], data_taxe_carbone_v2[3], data_taxe_carbone_v1[3])
(pour_taxe_carbone2 <- barres(data = data_taxe_carbone, rev = F, miss = T, sort = F, labels = labels12(c("Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est pour", "Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est contre", "Favorable à une augmentation de la taxe carbone\nVariante: sans information")), legend=c('Oui ', 'Non ', 'NSP')))
data_taxe_carbone
data_taxe_carbone_v1 <- cbind(dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='pour',]), dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='contre',]), dataN("pour_taxe_carbone", data = e1[e1$variante_taxe_carbone=='neutre',]))
data_taxe_carbone_v2 <- cbind(dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='pour',]), dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='contre',]), dataN("pour_taxe_carbone", data = e2[e2$variante_taxe_carbone=='neutre',]))
data_taxe_carbone <- cbind(data_taxe_carbone_v2[1], data_taxe_carbone_v1[1], data_taxe_carbone_v2[2], data_taxe_carbone_v1[2], data_taxe_carbone_v2[3], data_taxe_carbone_v1[3])
data_taxe_carbone
decrit(e2$pour_taxe_carbone_contre, miss=T)
data_taxe_carbone_v1
data_taxe_carbone <- cbind(data_taxe_carbone_v2[,1], data_taxe_carbone_v1[,1], data_taxe_carbone_v2[,2], data_taxe_carbone_v1[,2], data_taxe_carbone_v2[,3], data_taxe_carbone_v1[,3])
(pour_taxe_carbone2 <- barres(data = data_taxe_carbone, rev = F, miss = T, sort = F, labels = labels12(c("Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est pour", "Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est contre", "Favorable à une augmentation de la taxe carbone\nVariante: sans information")), legend=c('Oui ', 'Non ', 'NSP')))
(pour_taxe_carbone2 <- barres(data = data_taxe_carbone, rev = F, miss = T, sort = F, labels = labels12(c("Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est <b>pour</b>", "Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est <b>contre</b>", "Favorable à une augmentation de la taxe carbone\nVariante: sans information")), legend=c('Oui ', 'Non ', 'NSP')))
save_plotly(pour_taxe_carbone2)
(pour_taxe_carbone <- barres(data = data_taxe_carbone, rev = F, miss = T, sort = F, labels = labels12(c("Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est <b>pour</b>", "Favorable à une augmentation de la taxe carbone\nVariante: sachant qu'une majorité de Français est <b>contre</b>", "Favorable à une augmentation de la taxe carbone\nVariante: sans information")), legend=c('Oui ', 'Non ', 'NSP')))
save_plotly(pour_taxe_carbone)
(pour_taxe_carbone_neutre <- barres12(vars = "pour_taxe_carbone", df = list(e1[e1$variante_taxe_carbone=='neutre',], e2[e2$variante_taxe_carbone=='neutre',]), rev = F, thin = F, miss = T, sort = F, labels = c("Favorable à une augmentation de la taxe carbone\nVariante: sans information")))
(pour_taxe_carbone_neutre <- barres12(vars = "pour_taxe_carbone", df = list(e1[e1$variante_taxe_carbone=='neutre',], e2[e2$variante_taxe_carbone=='neutre',]), legend=c("Oui ", "Non ", "NSP") rev = F, thin = F, miss = T, sort = F, labels = c("Favorable à une augmentation de la taxe carbone\nVariante: sans information")))
(pour_taxe_carbone_neutre <- barres12(vars = "pour_taxe_carbone", df = list(e1[e1$variante_taxe_carbone=='neutre',], e2[e2$variante_taxe_carbone=='neutre',]), legend=c("Oui ", "Non ", "NSP"), rev = F, thin = F, miss = T, sort = F, labels = c("Favorable à une augmentation de la taxe carbone\nVariante: sans information")))
(pour_taxe_carbone_neutre <- barres12(vars = "pour_taxe_carbone", df = list(e1[e1$variante_taxe_carbone=='neutre',], e2[e2$variante_taxe_carbone=='neutre',]), legend=c("Oui ", "Non ", "NSP"), rev = F, miss = T, sort = F, labels = c("Favorable à une augmentation de la taxe carbone\nVariante: sans information")))
save_plotly(pour_taxe_carbone_neutre)
(solution_CC_v12 <- barres12(vars = variables_solution, rev = F, miss = F, showLegend=F, labels=labels_solution))
(solution_CC_v12 <- barres(data=rbind(dataKN(variables_solution, e1, miss=F), dataKN(variables_solution, e2, miss=F)), labels=labels_solution, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = F, miss = F))save_plotly(solution_CC_v12)
(solution_CC_v12 <- barres(data=rbind(dataKN(variables_solution, e1, miss=F), dataKN(variables_solution, e2, miss=F)), labels=labels_solution, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = F, miss = F))
save_plotly(solution_CC_v12)
data_solution_all <- matrix(NA, ncol = length(variables_solution), nrow = 3)
data_solution_all[1:2,] <- data_solution_good
for (j in 1:length(variables_solution)) data_solution[3,j] <- sum(e2$weight[e2[[variables_solution[j]]]==T])/sum(e2$weight)
variables_solution
for (j in 1:length(variables_solution)) { print("a"); data_solution[3,j] <- sum(e2$weight[e2[[variables_solution[j]]]==T])/sum(e2$weight)}
for (j in 1:length(variables_solution)) data_solution_all[3,j] <- sum(e2$weight[e2[[variables_solution[j]]]==T])/sum(e2$weight)
# call$solution_CC_rien <- grepl('rien a fraire', call$s1_e_q19)
# call$solution_CC_progres <- grepl('technique permettra de trouver des solutions', call$s1_e_q19)
# call$solution_CC_traite <- grepl('est aux etats de reglementer au niveau mond', call$s1_e_q19)
# call$solution_CC_changer[call$s1_e_q19==''] <- NA
# call$solution_CC_progres[call$s1_e_q19==''] <- NA
# call$solution_CC_traite[call$s1_e_q19==''] <- NA
# call$s1_e_q19[call$s1_e_q19==''] <- NA
# data_solution_good <- data_solution
# for (j in 1:length(variables_solution)) data_solution_good[1,j] <- length(which(call[[variables_solution[j]]]==T))/length(which(!is.na(call[[variables_solution[j]]])))
#
data_solution_all <- matrix(NA, ncol = length(variables_solution), nrow = 4)
data_solution_all[c(1:2,4),] <- rbind(data_solution_good, c(11, 52, 19, 17)/99)
for (j in 1:length(variables_solution)) data_solution_all[3,j] <- sum(e2$weight[e2[[variables_solution[j]]]==T])/sum(e2$weight)
(solution_CC <- barres(data = data_solution_all, color = color(4), grouped = T, rev = F, miss=F, labels=labels_solution, legend = c('CCC', 'Population (V1)', 'Population (V2)', 'Population (ADEME)')))
(solution_CC <- barres(data = data_solution_all, color = color(7)[c(1,5:7)], grouped = T, rev = F, miss=F, labels=labels_solution, legend = c('CCC', 'Population (V1)', 'Population (V2)', 'Population (ADEME)')))
save_plotly(solution_CC) # ADEME octobre 2019 toplot!
(solution_CC_en <- barres(data = data_solution_all, color = color(7)[c(1,5:7)], grouped = T, rev = F, miss=F, labels=labels_solution_en, legend = c('CCC', 'Population (W)', 'Population (W2)', 'Population (ADEME)')))
save_plotly(solution_CC_en) # TODO: use color(7)[c(5:6)] for all V1, V2
# data_obstacles_both <- matrix(NA, ncol = length(variables_obstacles), nrow = 2)
# for (j in 1:length(variables_obstacles)) data_obstacles_both[1,j] <- length(which(c[[variables_obstacles[j]]]<=2))/length(which(!is.na(c[[variables_obstacles[j]]])))
# for (j in 1:length(variables_obstacles)) data_obstacles_both[2,j] <- sum(e$weight[e[[variables_obstacles[j]]]<=2],na.rm=T)/sum(e$weight)
data_obstacles <- matrix(NA, ncol = length(variables_obstacles), nrow = 3)
data_obstacles[1:2,] <- data_obstacles_both
for (j in 1:length(variables_obstacles)) data_obstacles_both[3,j] <- sum(e2$weight[e2[[variables_obstacles[j]]]<=2],na.rm=T)/sum(e2$weight)
for (j in 1:length(variables_obstacles)) data_obstacles[3,j] <- sum(e2$weight[e2[[variables_obstacles[j]]]<=2],na.rm=T)/sum(e2$weight)
(obstacles_both <- barres(data = data_obstacles, grouped = T, rev = F, miss=F, labels=labels_obstacles[1:7], legend = c('CCC', 'Population (V1)', 'Population (V2)')))
(obstacles_both <- barres(data = data_obstacles, color = color(4)[c(1,3,4)] grouped = T, rev = F, miss=F, labels=labels_obstacles[1:7], legend = c('CCC', 'Population (V1)', 'Population (V2)')))
(obstacles_both <- barres(data = data_obstacles, colors = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=labels_obstacles[1:7], legend = c('CCC', 'Population (V1)', 'Population (V2)')))
(obstacles_both <- barres(data = data_obstacles, color = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=labels_obstacles[1:7], legend = c('CCC', 'Population (V1)', 'Population (V2)')))
save_plotly(obstacles_both)
(obstacles_both_en <- barres(data = data_obstacles, color = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=labels_obstacles_en[1:7], legend = c('CCC', 'Population (W1)', 'Population (W2)')))
(obstacles_both_en <- barres(data = data_obstacles, color = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=c("Lobbies", "Lack of political will", "Lack of cooperation between countries", "Inequalities", "Uncertainties of scientific community", "Demography", "Lack of alternative technologies"), legend = c('CCC', 'Population (W1)', 'Population (W2)')))
save_plotly(obstacles_both_en)
data_nb_politiques_env_v1 <- (rbind(length(which(e1$nb_politiques_env <= 6)), length(which(e1$nb_politiques_env %between% c(7, 8))), length(which(e1$nb_politiques_env == 9)), length(which(e1$nb_politiques_env == 10)), length(which(e1$nb_politiques_env >10)))/nrow(e1))
data_nb_politiques_env_v2 <- (rbind(length(which(e2$nb_politiques_env <= 6)), length(which(e2$nb_politiques_env %between% c(7, 8))), length(which(e2$nb_politiques_env == 9)), length(which(e2$nb_politiques_env == 10)), length(which(e2$nb_politiques_env >10)))/nrow(e2))
(nb_politiques_env <- barres(data = data_nb_politiques_env, rev = F, rev_color = T,  miss = F, sort = F, labels = label12("Nombre de politiques climatiques soutenues"), legend=c("De 0 à 6", "7 ou 8", "9", "10", "11 ou 12")))
(nb_politiques_env <- barres(data = data_nb_politiques_env, rev = F, rev_color = T,  miss = F, sort = F, labels = labels12("Nombre de politiques climatiques soutenues"), legend=c("De 0 à 6", "7 ou 8", "9", "10", "11 ou 12")))
data_nb_politiques_env
data_nb_politiques_env_v1
data_nb_politiques_env_v2
data_nb_politiques_env
data_nb_politiques_env <- cbind(data_nb_politiques_env_v2, data_nb_politiques_env_v1)
(nb_politiques_env <- barres(data = data_nb_politiques_env, rev = F, rev_color = T,  miss = F, sort = F, labels = labels12("Nombre de politiques climatiques soutenues"), legend=c("De 0 à 6", "7 ou 8", "9", "10", "11 ou 12")))
save_plotly(nb_politiques_env)
data_qualite_enfant
data_qualite_enfant_all
(qualite_enfant <- barres(data = data_qualite_enfant_all, grouped = T, rev = F, miss=F, labels=labels_qualite_enfant, legend = c('CCC', 'Population (V1)', "Population (V2)")))
(qualite_enfant <- barres(data = data_qualite_enfant_all, color = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=labels_qualite_enfant, legend = c('CCC', 'Population (V1)', "Population (V2)")))
save_plotly(qualite_enfant)
(qualite_enfant_en <- barres(data = data_qualite_enfant_all, grouped = T, rev = F, miss=F, labels=labels_qualite_enfant_en, legend = c('CCC', 'Population (W1)', "Population (W2)")))
(qualite_enfant_en <- barres(data = data_qualite_enfant_all, color = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=labels_qualite_enfant_en, legend = c('CCC', 'Population (W1)', "Population (W2)")))
save_plotly(qualite_enfant_en)
# labels_variables_referendum_v2 <- c(labels_variables_referendum, new_labels_variables_referendum)
(referendum_v12 <- barres(data = cbind(dataKN(vars = new_variables_referendum, data=e2, rev = T), barres12(variables_referendum, return="data")), sort=F, miss=T, labels=c(new_labels_variables_referendum, barres12(variables_referendum, labels=labels_variables_referendum, return="labels")), legend=barres12(variables_referendum, return="legend")))
(gauche_droite_nsp_v2 <- barres(vars = "gauche_droite_nsp", df=e2, miss = T, labels="Comment vous définiriez-vous ?", rev=F, rev_color = T))
barres(data = variables_politiques_1, grouped = T, rev = F, miss=F, labels=labels_variables_politiques_1, legend = c('CCC', 'Population'))
barres(data = barres12(variables_politiques_1, miss=F, return="data"), grouped = T, rev = F, miss=F, labels=labels_variables_politiques_1, legend = c('CCC', 'Population'))
barres12(variables_politiques_1, miss=F, return="data")
data_solution_ademe
barres(data = data_solution_ademe, grouped = T, rev = F, miss=F, labels=labels_solution, legend = c('CCC', 'Population'))
decrit(e1$date)
decrit(e2$date)
nrow(c)
(importance_v12 <- barres(data=cbind(dataN3("redistribution", miss = F), dataN3("redistribution", miss = F), dataN3("redistribution", miss = F)), rev = F, rev_color = T, miss = F, labels=c("L'action sociale et associative", "La protection de l'environnement", "L'amélioration de mon niveau de vie et de confort")))
(redistribution <- barres(data=dataN3("redistribution", miss = F), rev = F,  miss = F, sort = F, labels = c('Population (V2)', 'Population (V1)', 'CCC'), legend=dataN2("redistribution", miss = F, return = 'legend')))
(importance_v12 <- barres(data=cbind(dataN3("redistribution", miss = F), dataN3("redistribution", miss = F), dataN3("redistribution", miss = F)), rev = F, rev_color = T, miss = F, labels=c("L'action sociale et associative", "La protection de l'environnement", "L'amélioration de mon niveau de vie et de confort")))
(importance_v12 <- barres(data=cbind(dataN3("importance_associatif", miss = F), dataN3("importance_environnement", miss = F), dataN3("importance_confort", miss = F)), rev = F, rev_color = T, miss = F, labels=c("L'action sociale et associative", "La protection de l'environnement", "L'amélioration de mon niveau de vie et de confort")))
(importance_associatif <- barres(data=cbind(dataN("importance_associatif", data = e2, miss = F), dataN("importance_associatif", data = e1, miss = F), data_importance_CCC[,1]), rev = F, rev_color = T,  miss = F, sort = F, labels = c('Population (V2)', 'Population (V1)', 'CCC'), legend=0:10))
save_plotly(importance_associatif)
(importance_associatif <- barres(data=cbind(dataN("importance_environnement", data = e2, miss = F), dataN("importance_environnement", data = e1, miss = F), data_importance_CCC[,2]), rev = F, rev_color = T,  miss = F, sort = F, labels = c('Population (V2)', 'Population (V1)', 'CCC'), legend=0:10))
save_plotly(importance_environnement)
(importance_environnement <- barres(data=cbind(dataN("importance_environnement", data = e2, miss = F), dataN("importance_environnement", data = e1, miss = F), data_importance_CCC[,2]), rev = F, rev_color = T,  miss = F, sort = F, labels = c('Population (V2)', 'Population (V1)', 'CCC'), legend=0:10))
save_plotly(importance_environnement)
(importance_confort <- barres(data=cbind(dataN("importance_confort", data = e2, miss = F), dataN("importance_confort", data = e1, miss = F), data_importance_CCC[,3]), rev = F, rev_color = T,  miss = F, sort = F, labels = c('Population (V2)', 'Population (V1)', 'CCC'), legend=0:10))
save_plotly(importance_confort)
(obstacles <- barres(data = data_obstacles_e[,c(5,7,6,4,2,3,1)], df=e2, rev = F, miss = F, sort = F, showLegend=T, legend = 1:7, labels=labels_obstacles[c(5,7,6,4,2,3,1)])) # rev(1:7): ordre d'apparition dans questionnaire
(obstacles_both <- barres(data = data_obstacles, color = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=labels_obstacles[1:7], legend = c('CCC', 'Population (V1)', 'Population (V2)')))
decrit(e$connait_CCC)
decrit(e$sait_CCC_devoilee)
decrit(e$representativite_CCC)
decrit(e2$CCC_controlee_govt)
variables_politiques_c
barres12 <- function(vars, df=list(e1, e2), labels, legend=hover, comp = "V2", miss=T, weights = T, fr=T, rev=T, color=c(), rev_color = FALSE, hover=legend, sort=TRUE, thin=T, return="", showLegend=T) {
if (missing(vars) & missing(legend) & missing(hover)) warning('hover or legend must be given')
if (!missing(miss)) nsp <- miss
data1 <- dataKN(vars, data=df[[1]], miss=miss, weights = weights, return = "", fr=fr, rev=rev)
if (missing(legend) & missing(hover)) {
if (is.logical(df[[1]][[vars[1]]])) hover <- legend <- labels # data1(var = vars[1], data=df, weights = weights) # before: uncommented and "else" next line
else hover <- legend <- dataN(var = vars[1], data=df[[1]], miss=miss, weights = weights, return = "legend", fr=fr, rev_legend = rev) }
agree <- order_agree(data = data1, miss = miss)
if (is.logical(df[[1]][[vars[1]]])) agree <- rev(agree)
if (return=="data") return(data12(vars[agree], df = df, miss=miss, weights = weights, fr=fr, rev=rev, return = ""))
else if (return=="labels") return(labels12(labels[agree]))
else if (return=="legend") return(legend)
else return(barres(data = data12(vars[agree], df = df, miss=miss, weights = weights, fr=fr, rev=rev, return = ""),
labels=labels12(labels[agree], comp = comp), legend=legend,
miss=miss, weights = weights, fr=fr, rev=rev, color=c(), rev_color = rev_color, hover=hover, sort=F, thin=thin, showLegend=showLegend))
}
labels12 <- function(labels, en=F, comp = "V2") {
new_labels <- c()
lab2 <- ifelse(comp=="V2", ifelse(en, "Wave 2 (W2)", "Vague 2 (V2)"), comp)
lab1 <- ifelse(en, "(W1)", "(V1)")
for (l in labels) {
new_labels <- c(new_labels, lab2, paste(l, lab1))
lab2 <- paste("", lab2) }
return(new_labels)
}
(politiques_1_v1c <- barres12(variables_politiques_1, df=list(e1, c), labels = labels_variables_politiques_1, miss=F, comp = "CCC"))
save_plotly(politiques_1_v1c)
(politiques_1_v1c <- barres12(variables_politiques_1, df=list(e1, c), labels = labels_variables_politiques_1, miss=F, comp = "(CCC)"))
save_plotly(politiques_1_v1c)
decrit(e2$pour_28h)
decrit(e2$pour_28h[e2$gauche_droite=="Gauche"])
decrit(e2$parti)
summary(lm(taxe_approbation!='Non' ~ origine_taxe, data=e2, weights = e2$weight))
summary(lm(taxe_approbation!='Non' ~ origine_taxe, data=e, weights = e$weight))
summary(lm(taxe_approbation!='Non' ~ origine_taxe * dividende, data=e, weights = e$weight))
summary(lm(taxe_approbation!='Non' ~ origine_taxe * as.factor(dividende), data=e, weights = e$weight))
decrit(e$pour_sortition)
decrit(e$gilets_jaunes)
decrit(e1$ecologiste)
decrit(e2$ecologiste)
e2$CCC_non_representative_autre[e2$CCC_non_representative_autre!=""]
e2$CCC_non_representative_autre[e2$CCC_non_representative_autre!="" & !is.na(e2$CCC_non_representative_autre)]
which(e2$CCC_non_representative_autre=="Ils font partie d'aucune classe en dessous de la classe social aisé. Aucune personnes fait partie de la classe social de la pauvreté.")
# 57: grandes villes: 2 / certaines classes sociales (ex: pauvre): 6 / positions passées: 2 / loin du terrain: 2 / incompétent: 4 / plus intelligents: 1 / ne sais pas: 11
# "s'ils sont pris au hasard, ça craint" "ils ne representent qu'eux memes ce qui est peu" "Différent de la composition démographique de la France"
# "Ils se pensent dans un monde de bisounours" "ils sont cons" "Le hasard n est pas scientifique" "ils sont volontaires c'est tout"
variables_CCC_non_representative <- paste("CCC_non_representative", c("gauche", "droite", "ecolo", "anti_ecolo", "pro_gouv", "anti_gouv", "autre"), sep="_")
decrit(e2$CCC_non_representative_gauche)
labels_CCC_non_representative <- c("Plus à gauche", "Plus à droite", "Plus écologistes", "Moins écologistes", "Plus pro-gouvernement", "Moins pro-gouvernement", "Autre")
(CCC_non_representative <- barres(data = variables_CCC_non_representative, miss = F, sort = T, labels = labels_CCC_non_representative))
(CCC_non_representative <- barres(data = variables_CCC_non_representative, df=e2, miss = F, sort = T, labels = labels_CCC_non_representative))
(CCC_non_representative <- barres(vars = variables_CCC_non_representative, df=e2, miss = F, sort = T, labels = labels_CCC_non_representative))
(CCC_non_representative <- barres(vars = variables_CCC_non_representative, df=e2, rev=F, miss = F, sort = T, labels = labels_CCC_non_representative))
variables_CCC_non_representative
labels_CCC_non_representative
# 57: grandes villes: 2 / certaines classes sociales (ex: pauvre): 6 / positions passées: 2 / loin du terrain: 2 / incompétent: 4 / plus intelligents: 1 / ne sais pas: 11
# "s'ils sont pris au hasard, ça craint" "ils ne representent qu'eux memes ce qui est peu" "Différent de la composition démographique de la France"
# "Ils se pensent dans un monde de bisounours" "ils sont cons" "Le hasard n est pas scientifique" "ils sont volontaires c'est tout"
variables_CCC_non_representative <- paste("CCC_non_representative", c("gauche", "droite", "ecolo", "anti_ecolo", "pro_gouv", "anti_gouv", "autre_choix"), sep="_")
labels_CCC_non_representative <- c("Plus à gauche", "Plus à droite", "Plus écologistes", "Moins écologistes", "Plus pro-gouvernement", "Moins pro-gouvernement", "Autre")
(CCC_non_representative <- barres(vars = variables_CCC_non_representative, df=e2, rev=F, miss = F, sort = T, labels = labels_CCC_non_representative))
(CCC_non_representative <- barres(vars = variables_CCC_non_representative, df=e2, showLegend=F, rev=F, miss = F, sort = T, labels = labels_CCC_non_representative))
save_plotly(CCC_non_representative)
save_plotly(CCC_non_representative)
for (i in variables_CCC_non_representative) e2$nombre_non_representative <- e2$nombre_non_representative + 1*e2[[i]]
##### Représentativité CCC #####
e2$nombre_non_representative <- 0
for (i in variables_CCC_non_representative) e2$nombre_non_representative <- e2$nombre_non_representative + 1*e2[[i]]
decrit("nombre_non_representative", data = e2, which = e2$CCC_non_representative=="Non")
decrit("nombre_non_representative", data = e2)
decrit(e2$CCC_non_representative)
decrit("nombre_non_representative", data = e2, which = e2$CCC_non_representative=="Non")
decrit(e2$CCC_representative)
representativite_CCC
decrit(e2$representativite_CCC)
decrit("nombre_non_representative", data = e2, which = e2$representativite_CCC=="Non")
e2a <- prepare_e2(only_finished = F)
e1a <- prepare_e(only_finished = F)
rm(e1a, e2a)
decrit(e2$diplome4)
decrit(e2$diplome4, weight=F)
decrit(e2$sexe, weight=F)
decrit(e2$confiance_gens, weight = F)
decrit(e2$confiance_gens, weights = e2$weight)
decrit(e1$confiance_gens, weights = e1$weight)
decrit(e1$confiance_gens, weight = F)
##### Confiance #####
cor(eb$confiance, eb$diplome4)
##### Confiance #####
table(eb$confiance, eb$diplome4)
##### Confiance #####
CrossTable(eb$confiance_gens, eb$diplome4, prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE)
##### Confiance #####
CrossTable(as.factor(eb$confiance_gens), as.factor(eb$diplome4), prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE)
##### Confiance #####
CrossTable(as.character(eb$confiance_gens), as.character(eb$diplome4), prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE)
##### Confiance #####
CrossTable(as.character(eb$diplome4), as.character(eb$confiance_gens), prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE)
decrit(c$issue_CC)
(issue_CC <- barres(data=cbind(rev(c(13, 50, 31, 5))/99, dataN3("issue_CC", miss = F, rev = T)), miss = F, sort = F, labels = c('Population (ADEME)', 'Population (V2)', 'Population (V1)','CCC'), legend=rev(dataN2("issue_CC", miss = F, return = 'legend'))))
save_plotly(issue_CC) # ADEME octobre 2019 toplot!
e$connaissance_CCC[c(607,)]
e$connaissance_CCC[c(607)]
e1$connaissance_CCC[c(607)]
e$connaissance_CCC[c(8,15,18,20,26,27,28,43,65,75,84,85,89,101,123,132,135,140,142,144,145,147,165,168,172,176,207,220,222,240,247,275,288,303,308,341,347,348,351,356,364,377,473,493)]
e$connaissance_CCC[c(401,404,423,427,505,506,507,530,531,618,670,672,693,695,696,728,729,732,740,751,758,776,786,796,800,802,831,832,857,875,877,906,914,920,937,938,972,982,987,988)]
e$connaissance_CCC[c(7,24,62,67,71,84,91,106,117,127,130,131,134,150,154,158,173,175,186,202,209,226,246,247,253,262,284,302,307,334,337,380,386,391,400,407,418,420,428,440,448,449,470,481)]
e1$connaissance_CCC[c(401,404,423,427,505,506,507,530,531,618,670,672,693,695,696,728,729,732,740,751,758,776,786,796,800,802,831,832,857,875,877,906,914,920,937,938,972,982,987,988)]
e1$connaissance_CCC[c(7,24,62,67,71,84,91,106,117,127,130,131,134,150,154,158,173,175,186,202,209,226,246,247,253,262,284,302,307,334,337,380,386,391,400,407,418,420,428,440,448,449,470,481)]
e1$connaissance_CCC[c(581,614,623,624,628,642,643,645,655,663,671,687,703,704,705,724,746,754,773,780,792,818,886,888,900,901,902,912,934,954)]
e1$connaissance_CCC_150[470]
e1$connaissance_CCC[470]
e2$connaissance_CCC
e2$connaissance_CCC[c(1001:1003)]
e2$connaissance_CCC[c(1:69)]
e2$connaissance_CCC[70]
temp <- e2$connaissance_CCC[c(1001:1003)]
e2$connaissance_CCC[70] <- ""
e2$connaissance_CCC
e2$connaissance_CCC[c(1002,4,9,18,21,22,26,29,32,33,34)]
e <- e2
e$Connaissance_CCC <- NA
e$connaissance_CCC_bon_francais <- e$connaissance_CCC_sortition <- e$connaissance_CCC_mesures <- e$connaissance_CCC_temporalite <- e$connaissance_CCC_internet <- e$connaissance_CCC == "FALSE"
e$connaissance_CCC_150 <- e$connaissance_CCC == "FALSE"
e$Connaissance_CCC[c(2,1001,8,14,15,16,17,19,23,24,28,41,44,58,59,64,67,69,76,83,84,90,94,96,98,100,104,105,106,107,112,130,132,133,134,143,145,150,156,157,158,163,164,167,168,171,173,186,187)] <- "aucune"
e$Connaissance_CCC[c(191,193,199,206,208,210,214,227,242,248,249,251,255,264,272,274,280,294,309,312,314,316,320,321,323,324,329,331,333,338,340,341,347,349,355,357,364,367,374,376,379,386,387,391,393,394,395,397)] <- "aucune"
e$Connaissance_CCC[c(6,25,26,27,30,35,36,42,49,73,85,87,116,122,123,127,135,147,152,159,166,172,175,180,189,196,203,204,205,222,256,266,277,283,285,291,304,311,319,330,334,337,343,365,369,377)] <- "trop vague" # Réponse aurait pu être déduit simplement à partir du nom "CCC". Impossible de savoir ce que le répondant sait réellement, ou bien le répondant sait des choses à moitié, commet des erreurs.
e$Connaissance_CCC[c(1002,4,7,12,21,22,32,37,39,40,45,46,47,51,52,56,66,75,78,79,88,103,113,115,117,118,121,138,140,141,148,151,153,154,165,182,195,204,218,226,228,232,243,246,252,254,258,259,260,262)] <- "approximatif" # Contient un voire quelques éléments (mesures, sortition) mais mal formulés ou peu clair, ou avec une imprécision. Laisse penser que le répondant connaît mais ne dit pas tout ce qu'il sait. ex; 32
e$Connaissance_CCC[c(275,284,290,293,300,303,306,322,325,326,327,344,346,356,359,363,367,390,396,403,405,406,407,410,416,421,422,428,431,433,435,440,447,455,453,458,459,463,464,469,480,481,487,490,497)] <- "approximatif"
e$Connaissance_CCC[c(9,18,29,33,34,50,55,57,60,61,65,70,77,109,119,129,136,139,142,145,155,162,178,185,190,197,200,202,209,213,215,217,221,225,229,233,235,237,253,257,265,271,281,288,296,298,302,305)] <- "bonne" # Contient généralement plusieurs éléments (mesures, sortition, 150 ou date) bien articulés permettant de s'assurer que le répondant connaît la CCC. ex: 155
e$connaissance_CCC_mesures[c(1002,4,9,18,21,22,26,29,32,33,34,35,36,40,49,52,55,57,61,70,73,75,77,78,79,82,103,109,115,117,129,136,139,145,148,153,155,182,185,190,197,200,205,209,213,215,217,219)] <- "mesures" # mentionne que des propositions doivent être formulées / ont été formulées # TODO: check les 10 premières voir s'il y a des mesures spécifiques
e$connaissance_CCC_mesures[c(222,228,233,235,236,237,243,246,252,253,254,257,258,260,275,281,288,290,291,293,296,298,302,303,305,317,322,325,326,344,346,350,353,356,358,359,363,366,367,370,371)] <- "mesures"
e$connaissance_CCC_sortition[c(18,32,34,50,55,56,57,60,61,65,70,77,118,121,138,139,142,145,155,162,178,197,200,225,229,233,235,236,237,253,257,259,265,281,288,296,300,302,305,306,317,350,353,356,366)] <- "sortition"
e$connaissance_CCC_bon_francais[c(1002,7,9,12,26,27,29,33,45,50,52,55,60,65,66,70,78,82,88,109,119,121,123,124,129,140,141,142,144,145,148,151,152,155,162,167,169,194,196,202,221,236,238,246,253,254,256)] <- "bon français" # pas de faute d'orthographe, grammaire correcte, phrase élaborée (i.e. pas juste "je ne sais pas")
e$Connaissance_CCC[c(1003,1,5,31,48,114,124,144,198,238,241,278,279,297,328,351,352,354,466,471,493)] <- "hors sujet"
e$Connaissance_CCC[c(38,108,169,188,194,220,271,292,318,348,408,443)] <- "faux"
e$Connaissance_CCC[c(397,399,402,413,415,423,436,437,441,442,444,445,451,452,457,460,472,474,476,479,484,488,489,498)] <- "aucune"
e$Connaissance_CCC[c(380,384,392,398,411,420,425,428,446,450,468,470,475,477,483,491)] <- "trop vague"
e$Connaissance_CCC[c()] <- "approximatif"
e$Connaissance_CCC[c(317,350,353,358,366,370,371,373,375,378,385,389,400,401,409,417,424,430,438,448,453,462,465,478,485,492,495)] <- "bonne"
e$connaissance_CCC_bon_francais[c(257,259,266,277,281,283,284,288,296,302,304,317,334,346,353,356,358,363,365,366,367,370,378,385,390,396,398,405,408,410,417,430,435,443,446,464,465,481)] <- "bon français"
e$connaissance_CCC_sortition[c(371,377,378,385,389,400,401,403,407,409,417,424,438,448,455,465,478,485,492)] <- "sortition"
e$connaissance_CCC_mesures[c(375,373,378,385,389,398,400,401,406,409,416,417,421,424,428,430,433,435,438,448,458,463,465,469,470,477,478,480,483,487,490,492,495,497)] <- "mesures"
e$connaissance_CCC_choix[c(213,215,217,440,447,481)] <- "mesures spécifiques" # (mentionne des mesures spécifiques proposées par la CCC)
e$connaissance_CCC_internet[c(453,462)] <- "internet"
e$connaissance_CCC_temporalite[c(29,34,47,82,139,265,431,438,453)] <- "temporalité" # Évoque la durée ou les dates de la CCC
e$connaissance_CCC_150[which(c(grepl('150', e$connaissance_CCC)),34)] <- "150" # not 75, 127, 139, 182, 190, 233, 359, 458, 487
e$connaissance_CCC_opinion[c(1,5,38,39,42,45,52,66,70,75,108,122,135,138,140,142,151,162,188,195,215,241,243,259,271,279,285,352,359,384,390,428,468,475,477,485)] <- "opinion" # Exprime une opinion à propos de la CCC. ex: 1 "les vrais problemes non pas été traités". ex: 38, 42, 108
e$connaissance_CCC_opinion[c(9,39,40,55,77,82,129,154,165,237,253,298,366,396,400,492)] <- "postérité" # Évoque la postérité réservée aux mesures proposées.
e$connaissance_CCC_opinion <- e$connaissance_CCC_choix <- e$connaissance_CCC == "FALSE"
e$connaissance_CCC_choix[c(213,215,217,440,447,481)] <- "mesures spécifiques" # (mentionne des mesures spécifiques proposées par la CCC)
e$connaissance_CCC_posterite <- e$connaissance_CCC == "FALSE"
e$connaissance_CCC_opinion[c(1,5,38,39,42,45,52,66,70,75,108,122,135,138,140,142,151,162,188,195,215,241,243,259,271,279,285,352,359,384,390,428,468,475,477,485)] <- "opinion" # Exprime une opinion à propos de la CCC. ex: 1 "les vrais problemes non pas été traités". ex: 38, 42, 108
e$connaissance_CCC_posterite[c(9,39,40,55,77,82,129,154,165,237,253,298,366,396,400,492)] <- "postérité" # Évoque la postérité réservée aux mesures proposées.
e2 <- e
(Connaissance_CCC_v2 <- barres(vars = "Connaissance_CCC", df=e2, miss = F, labels="Connaissance de la Convention Citoyenne pour le Climat\n (évaluation du champ libre demandant de la décrire)"))
e <- e1
e$Connaissance_CCC <- NA
e$connaissance_CCC_bon_francais <- e$connaissance_CCC_sortition <- e$connaissance_CCC_mesures <- e$connaissance_CCC_temporalite <- e$connaissance_CCC_internet <- e$connaissance_CCC == "FALSE"
e$connaissance_CCC_150 <- e$connaissance_CCC == "FALSE"
e$Connaissance_CCC[c(1,3,10,13,17,19,29,30,34,45,49,51,54,57,64,68,74,77,78,86,93,97,103,121,129,136,139,151,153,155,156,159,162,163,164,174,179,181,182,183,184,187,191,194,196,197,201)] <- "aucune" #
e$Connaissance_CCC[c(208,210,217,218,223,232,236,242,250,255,259,260,266,268,271,272,278,282,285,289,291,297,298,301,310,312,313,324,327,328,349,352,355,357,361,372)] <- "aucune" #
e$Connaissance_CCC[c(383,385,389,390,394,402,410,411,415,416,417,419,421,422,424,425,429,431,442,444,446,450,451,457,458,461,463,465,466,468,469,472,476,485,487,488,492)] <- "aucune" # ex: "nsp" 19, 402, # doublons 450-451, 421-422, 468-469, 515-516?
e$Connaissance_CCC[c(496,502,515,516,520,526,532,533,534,535,537,540,541,546,548,550,551,552,553,555,557,560,561,562,564,567,568,572,578,582,584,586,587,588,589,597,598,602,603,604)] <- "aucune" # ex: 598
e$Connaissance_CCC[c(610,619,621,622,625,626,629,630,631,634,636,638,639,650,654,656,657,659,660,665,666,667,669,674,677,678,681,686,688,690,694,698,699,702,707,709,712,713,720,721,725,727)] <- "aucune" # ex: 598
e$Connaissance_CCC[c(731,733,738,747,748,752,753,757,760,762,763,765,766,768,771,772,775,781,782,783,785,787,790,793,798,823,826,830,844,845,846,847,848,859,860,862,865,868,872,873)] <- "aucune" # ex: 598
e$Connaissance_CCC[c(876,891,883,887,893,897,899,908,909,911,913,915,916,917,926,930,939,940,943,944,946,955,956,957,960,962,965,966,967,973,977,978,986,992,995,998,1000,1001,1002,1003)] <- "aucune" # ex: 598, 915
e$Connaissance_CCC[c(73,118,143,239,248,270,280,283,326,381,388,471,489,491,504,590,592,632,743,866,871,929,951,952,993)] <- "faux" # ex: 239, 326
e$Connaissance_CCC[c(6,22,25,66,72,80,90,100,107,110,111,152,166,170,177,188,214,227,238,276,281,316,319,320,323,339,360,387,393,396,399,408,432,452,454,474,498,503)] <- "hors sujet" # ex: 25, 71, 90, 107 # 25-110-432 doublon ?
e$Connaissance_CCC[c(510,570,573,575,591,664,682,715,716,736,737,739,741,744,767,795,839,840,842,849,854,861,892,895,921,927,928,936,945,953,959,964,984,999)] <- "hors sujet" # ex: 25, 71, 90, 107, 570, 767, 839, 840, 861 # 25-110-432 570-573 1001-1003 doublon ? TODO
e$Connaissance_CCC[c(9,31,33,35,37,38,55,59,81,101,120,193,202,233,235,237,249,252,273,293,294,311,358,359,363,367,374,414,434,455,457,460,479,482,484,490,508,519,522,524,538)] <- "trop vague" # ex: 374, 457, 490 [490 = 2.0?]
e$Connaissance_CCC[c(581,614,623,624,628,642,643,645,655,663,671,687,703,704,705,724,746,754,773,780,792,818,886,888,900,901,902,912,934,954)] <- "trop vague" # ex: 374, 457, 490
e$Connaissance_CCC[c(8,15,18,20,26,27,28,43,65,75,84,85,89,101,123,132,135,140,142,144,145,147,165,168,172,176,207,220,222,240,247,275,288,303,308,341,347,348,351,356,364,377,473,493)] <- "approximatif" # ex: 607
e$Connaissance_CCC[c(401,404,423,427,505,506,507,530,531,618,670,672,693,695,696,728,729,732,740,751,758,776,786,796,800,802,831,832,857,875,877,906,914,920,937,938,972,982,987,988)] <- "approximatif"
e$Connaissance_CCC[c(7,24,62,67,71,84,91,106,117,127,130,131,134,150,154,158,173,175,186,202,209,226,246,247,253,262,284,302,307,334,337,380,386,391,400,407,418,420,428,440,448,449,470,481)] <- "bonne" # ex: 24, 117, 334 ; contient généralement mesures, sortition, 150 ou date
e$Connaissance_CCC[c(494,501,514,542,547,558,563,566,607,609,611,613,646,665,684,689,691,700,718,722,770,779,797,811,815,863,898,910,923,935,941,950,991)] <- "bonne" # ex: 24, 117, 334 ; contient généralement mesures, sortition, 150 ou date
e$connaissance_CCC_bon_francais[c(6,15,18,20,24,27,62,84,85,91,130,134,140,145,154,158,165,170,175,193,202,207,220,226,242,247,248,253,262,288,347,348,351,356,360,364,377,380,386,387,391)] <- "bon français" # ex: ; pas de faute d'orthographe, grammaire correcte, phrase élaborée (i.e. pas juste "je ne sais pas")
e$connaissance_CCC_bon_francais[c(399,404,418,419,423,425,434,448,449,454,457,460,470,471,473,481,488,493,501,507,508,522,542,562,581,598,609,611,613,665,691,700,728,729,732,741,752)] <- "bon français" # ex: ; pas de faute d'orthographe, grammaire correcte, phrase élaborée (i.e. pas juste "je ne sais pas")
e$connaissance_CCC_bon_francais[c(770,776,779,796,797,875,877,895,898,935,937,988,991,993)] <- "bon français" # ex: ; pas de faute d'orthographe, grammaire correcte, phrase élaborée (i.e. pas juste "je ne sais pas")
e$connaissance_CCC_sortition[c(7,62,67,71,91,106,127,130,131,134,150,154,158,165,173,175,186,202,207,209,239,246,247,253,262,284,302,308,334,348,380,407,420,428,440,448,449,470,481)] <- "sortition"
e$connaissance_CCC_sortition[c(494,501,514,530,542,547,558,566,607,609,611,613,646,672,684,689,691,693,700,722,751,779,797,811,815,831,832,857,863,898,906,910,914,923,929,941,972,991)] <- "sortition"
e$connaissance_CCC_mesures[c(7,62,67,71,130,135,142,154,175,186,202,226,246,262,302,307,337,356,386,400,404,407,428,448,449,481,494,505,531,558,563,566,607,609,611,613,646,670,689)] <- "mesures"
e$connaissance_CCC_mesures[c(700,718,722,770,779,786,802,811,815,819,863,898,920,938,941,950,982,991,993)] <- "mesures"
e$connaissance_CCC_internet[c(44,70,239,279,512,606,701)] <- "internet"
e$connaissance_CCC_temporalite[c(84,117,131,150,172,235,249,293,302,427,501)] <- "temporalité"
e$connaissance_CCC_150[which(c(grepl('150', e$connaissance_CCC)),470)] <- "150"
e1 <- e
variables_connaissance_CCC <<- c("bon_francais", "sortition", "mesures", "temporalite", "internet", "150")
for (v in variables_connaissance_CCC) e[[paste("connaissance_CCC", v, sep="_")]] <- e[[paste("connaissance_CCC", v, sep="_")]]!="FALSE"
temp <- -2*(e$Connaissance_CCC=="hors sujet") -1*(e$Connaissance_CCC=="faux") + 1*(e$Connaissance_CCC=="trop vague") + 2*(e$Connaissance_CCC=="approximatif") + 3*(e$Connaissance_CCC=="bonne")
temp[e$connaissance_CCC_internet==T] <- 2
e$Connaissance_CCC <- as.item(temp, labels = structure(c(-2:3), names=c("hors sujet", "faux", "aucune", "trop vague", "approximatif", "bonne")),
annotation="Connaissance_CCC: connaissance_CCC recodé en hors sujet/faux/aucune/approximatif/bonne (incl. internet) - Décrivez ce que vous savez de la Convention Citoyenne pour le Climat. (champ libre)")
label(e$connaissance_CCC_bon_francais) <- "connaissance_CCC_bon_francais: Indicatrice que la réponse à connaissance_CCC est constituée d'une phrase grammaticalement correcte et sans faute d'orthographe (à l'exception des phrases très courtes type 'Je ne sais pas')"
label(e$connaissance_CCC_sortition) <- "connaissance_CCC_sortition: Indicatrice que la réponse à connaissance_CCC mentionne le tirage au sort, ou du moins le caractère 'lambda' ou hétérogène des citoyens de la CCC"
label(e$connaissance_CCC_mesures) <- "connaissance_CCC_mesures: Indicatrice que la réponse à connaissance_CCC mentionne le fait que la CCC rend des propositions de mesures"
label(e$connaissance_CCC_temporalite) <- "connaissance_CCC_temporalite: Indicatrice que la réponse à connaissance_CCC mentionne un élément de la temporalité de la CCC (date de début ou de fin, ou fréquence de ses réunions)"
label(e$connaissance_CCC_internet) <- "connaissance_CCC_internet: Indicatrice que la réponse à connaissance_CCC a été copiée à partir des résultats d'une requête internet"
label(e$connaissance_CCC_150) <- "connaissance_CCC_150: Indicatrice que la réponse à connaissance_CCC mentionne le nombre de membres de la CCC (150)" # autre indicatrice qui aurait pu être intéressante : si ça mentionne que la CCC est française ou, au contraire, se méprend en parlant d'une initiative internationale
e1 <- e
e <- e2
variables_connaissance_CCC <<- c("bon_francais", "sortition", "mesures", "temporalite", "internet", "150")
for (v in variables_connaissance_CCC) e[[paste("connaissance_CCC", v, sep="_")]] <- e[[paste("connaissance_CCC", v, sep="_")]]!="FALSE"
temp <- -2*(e$Connaissance_CCC=="hors sujet") -1*(e$Connaissance_CCC=="faux") + 1*(e$Connaissance_CCC=="trop vague") + 2*(e$Connaissance_CCC=="approximatif") + 3*(e$Connaissance_CCC=="bonne")
temp[e$connaissance_CCC_internet==T] <- 2
e$Connaissance_CCC <- as.item(temp, labels = structure(c(-2:3), names=c("hors sujet", "faux", "aucune", "trop vague", "approximatif", "bonne")),
annotation="Connaissance_CCC: connaissance_CCC recodé en hors sujet/faux/aucune/approximatif/bonne (incl. internet) - Décrivez ce que vous savez de la Convention Citoyenne pour le Climat. (champ libre)")
label(e$connaissance_CCC_bon_francais) <- "connaissance_CCC_bon_francais: Indicatrice que la réponse à connaissance_CCC est constituée d'une phrase grammaticalement correcte et sans faute d'orthographe (à l'exception des phrases très courtes type 'Je ne sais pas')"
label(e$connaissance_CCC_sortition) <- "connaissance_CCC_sortition: Indicatrice que la réponse à connaissance_CCC mentionne le tirage au sort, ou du moins le caractère 'lambda' ou hétérogène des citoyens de la CCC"
label(e$connaissance_CCC_mesures) <- "connaissance_CCC_mesures: Indicatrice que la réponse à connaissance_CCC mentionne le fait que la CCC rend des propositions de mesures"
label(e$connaissance_CCC_temporalite) <- "connaissance_CCC_temporalite: Indicatrice que la réponse à connaissance_CCC mentionne un élément de la temporalité de la CCC (date de début ou de fin, ou fréquence de ses réunions)"
label(e$connaissance_CCC_internet) <- "connaissance_CCC_internet: Indicatrice que la réponse à connaissance_CCC a été copiée à partir des résultats d'une requête internet"
label(e$connaissance_CCC_150) <- "connaissance_CCC_150: Indicatrice que la réponse à connaissance_CCC mentionne le nombre de membres de la CCC (150)" # autre indicatrice qui aurait pu être intéressante : si ça mentionne que la CCC est française ou, au contraire, se méprend en parlant d'une initiative internationale
e2 <- e
(Connaissance_CCC_v2 <- barres(vars = "Connaissance_CCC", df=e2, miss = F, labels="Connaissance de la Convention Citoyenne pour le Climat\n (évaluation du champ libre demandant de la décrire)"))
save_plotly(Connaissance_CCC_v2)
(Connaissance_CCC_v12 <- barres12(vars = "Connaissance_CCC", color = color(7)[c(1,2,3:7)] miss = F, labels="Connaissance de la Convention Citoyenne pour le Climat\n (évaluation du champ libre demandant de la décrire)"))
(Connaissance_CCC_v12 <- barres12(vars = "Connaissance_CCC", color = color(7)[c(1,2,3:7)], miss = F, labels="Connaissance de la Convention Citoyenne pour le Climat\n (évaluation du champ libre demandant de la décrire)"))
color(7)[c(1,2,3:7)]
(Connaissance_CCC_v12 <- barres12(vars = "Connaissance_CCC", color = color(7)[c(1,2,4:7)], miss = F, labels="Connaissance de la Convention Citoyenne pour le Climat\n (évaluation du champ libre demandant de la décrire)"))
barres12 <- function(vars, df=list(e1, e2), labels, legend=hover, comp = "V2", miss=T, weights = T, fr=T, rev=T, color=c(), rev_color = FALSE, hover=legend, sort=TRUE, thin=T, return="", showLegend=T) {
if (missing(vars) & missing(legend) & missing(hover)) warning('hover or legend must be given')
if (!missing(miss)) nsp <- miss
data1 <- dataKN(vars, data=df[[1]], miss=miss, weights = weights, return = "", fr=fr, rev=rev)
if (missing(legend) & missing(hover)) {
if (is.logical(df[[1]][[vars[1]]])) hover <- legend <- labels # data1(var = vars[1], data=df, weights = weights) # before: uncommented and "else" next line
else hover <- legend <- dataN(var = vars[1], data=df[[1]], miss=miss, weights = weights, return = "legend", fr=fr, rev_legend = rev) }
agree <- order_agree(data = data1, miss = miss)
if (is.logical(df[[1]][[vars[1]]])) agree <- rev(agree)
if (return=="data") return(data12(vars[agree], df = df, miss=miss, weights = weights, fr=fr, rev=rev, return = ""))
else if (return=="labels") return(labels12(labels[agree]))
else if (return=="legend") return(legend)
else return(barres(data = data12(vars[agree], df = df, miss=miss, weights = weights, fr=fr, rev=rev, return = ""),
labels=labels12(labels[agree], comp = comp), legend=legend,
miss=miss, weights = weights, fr=fr, rev=rev, color=color, rev_color = rev_color, hover=hover, sort=F, thin=thin, showLegend=showLegend))
}
(Connaissance_CCC_v12 <- barres12(vars = "Connaissance_CCC", color = color(7)[c(1,2,4:7)], miss = F, labels="Connaissance de la Convention Citoyenne pour le Climat\n (évaluation du champ libre demandant de la décrire)"))
save_plotly(Connaissance_CCC_v12)
(Connaissance_CCC_v12_NA <- barres12(vars = "Connaissance_CCC", color = color(7)[c(1,2,4:7)], miss = T, labels="Connaissance de la Convention Citoyenne pour le Climat\n (évaluation du champ libre demandant de la décrire)"))
e2$connaissance_CCC[155]
e2$connaissance_CCC[32]
e1$connaissance_CCC[c(374,457,490)]
e2$connaissance_CCC[c(152,159,166,172,175,180,189,196,203,204,205,222,256,266,277)]
e1$connaissance_CCC[c(239, 326)]
e1$connaissance_CCC[c(25, 71, 90, 107)]
e2$connaissance_CCC[c(148,151,153,154,165,182,195,204,218,226,228,232,243,246,252,254,258)]
e2$connaissance_CCC[c(421,422,428,431,433,435,440,447,455,453,458,459,463,464,469,480)]
e2$connaissance_CCC[c(1002,4,7,12,21,22,32,37,39,40,45,46,47,51,52,56,66,75,78,79,88,103,113,115,117,118)]
e2$connaissance_CCC[c(180,189,196,203,204,205,222,256,266,277,283,285,291,304,311,319,330,334,337,343,365,369,377)]
(Connaissance_CCC_v12_wo_label <- barres12(vars = "Connaissance_CCC", color = color(7)[c(1,2,4:7)], miss = F, labels="Évaluation du champ libre (V1)"))
(Connaissance_CCC_v12_wo_label <- barres12(vars = "Connaissance_CCC", color = color(7)[c(1,2,4:7)], miss = F, labels="Synhtèse du champ libre (V1)"))
(Connaissance_CCC_v12_wo_label <- barres12(vars = "Connaissance_CCC", color = color(7)[c(1,2,4:7)], miss = F, labels="Synhtèse du champ libre"))
save_plotly(Connaissance_CCC_v12_wo_label)
test <- rbind(dataKN(variables_solution, e1, miss=F), dataKN(variables_solution, e2, miss=F)),
test <- rbind(dataKN(variables_solution, e1, miss=F), dataKN(variables_solution, e2, miss=F))
test
data_solution_all
sum(data_solution_all)
sum.rows(data_solution_all)
rowSums(data_solution_all)
decrit(eb$confiance_sortition[eb$age_18_24==T & eb$sexe=="Homme"])
decrit(e1$sexe)
decrit(eb$confiance_sortition[eb$age_18_24==T & eb$sexe=="Masculin"])
decrit(eb$confiance_sortition[eb$age_18_24==T & eb$sexe=="Féminin"])
decrit(eb$confiance_sortition)
decrit("confiance_sortition", data = eb, which = eb$age_18_24==T & eb$sexe=="Féminin")
decrit("confiance_sortition", data = eb, which = eb$age_18_24==T & eb$sexe=="Masculin")
decrit(e1$confiance_sortition)
summary(lm(confiance_sortition ~ sexe, data=eb, subset=eb$age_18_24==T))
summary(lm(confiance_sortition ~ sexe, data=eb, subset=eb$age_18_24==T | eb$age_25_34==T))
summary(lm(confiance_sortition>0 ~ sexe, data=eb, subset=eb$age_18_24==T | eb$age_25_34==T))
summary(lm(confiance_sortition>0 ~ sexe, data=eb, subset = eb$age_25_34==T))
