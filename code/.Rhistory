e <- e[, -c(9:17, 131, 132, 134, 136, 137, 139, 187)] # 39:49,
return(e)
}
e1 <- prepare_e()
e2 <- prepare_e2()
prepare_e2 <- function(exclude_speeder=TRUE, exclude_screened=TRUE, only_finished=TRUE, only_known_agglo=T, duree_max=390, pilote = FALSE) { # , exclude_quotas_full=TRUE
if (pilote) {
e <- read_csv("../donnees/externe2_pilote.csv")[,c(1:126,136:139,141:164,168:171,173:193,140,194:198,213:233,127:135,165:167,172,199:212)] #[-c(1:2),]
e <- relabel_and_rename2_pilote(e)
} else {
e <- read_csv("../donnees/externe2.csv")[,c(1:126,136:139,141:164,168:171,177:179,180,181,187:202,140,203:207,222:233,127:135,165:167,172:176,182:186,208:221,234:242)] #[,c(1:126,136:139,141:164,168:171,177:179,181:182,188:203,140,204:208,223:234,127:135,165:167,172:176,183:187,209:222,235:243,180)]
# e <- e[,c(1:158,163:165,166:167,173:176,186:233,159:162,168:172,177:185)]
e <- relabel_and_rename2(e)
}
# 127:135: CCC rep / 140, 172: 28h / 165:167: referendum / 173:179: timing + gain_net_subj / 182:186: avis_estimation + timing / 208:221: 28h + députés
print(paste(length(which(e$exclu=="QuotaMet")), "QuotaMet"))
e$fini[e$exclu=="QuotaMet" | is.na(e$revenu)] <- "False" # To check the number of QuotaMet that shouldn't have incremented the quota, comment this line and: decrit(e$each_strate[e$exclu=="QuotaMet" & e$csp=="Employé" & !grepl("2019-03-04 07", e$date)])
if (exclude_screened) { e <- e[is.na(e$exclu),] }
if (exclude_speeder) { e <- e[as.numeric(as.vector(e$duree)) > duree_max,] }
# if (exclude_quotas_full) { e <- e[e[101][[1]] %in% c(1:5),]  } # remove those with a problem for the taille d'agglo
# if (exclude_quotas_full) { e <- e[e$Q_TerminateFlag=="",]  } # remove those with a problem for the taille d'agglo
if (only_finished) { # TODO: le faire marcher même pour les autres
e <- e[e$fini=="True",]
e <- convert_e(e, vague=2)
e$weight <- weighting_e(e)
e$gauche_droite_na <- as.numeric(e$gauche_droite)
e$gauche_droite_na[e$indeterminate == T] <- wtd.mean(e$gauche_droite, weights = e$weight)
} else {
e$Diplome <- (e$diplome == "Brevet des collèges") + 2*(e$diplome=="CAP ou BEP") + 3*(e$diplome=="Baccalauréat") + 4*(e$diplome=="Bac +2 (BTS, DUT, DEUG, écoles de formation sanitaires et sociales...)") + 5*(e$diplome=="Bac +3 (licence...)") + 6*(e$diplome=="Bac +5 ou plus (master, école d'ingénieur ou de commerce, doctorat, médecine, maîtrise, DEA, DESS...)") - (e$diplome=="NSP (Ne se prononce pas)")
e$diplome4 <- as.item(pmin(pmax(e$Diplome, 1), 4), labels = structure(1:4, names = c("Aucun diplôme ou brevet", "CAP ou BEP", "Baccalauréat", "Supérieur")), annotation=Label(e$diplome))
e <- e[, -c(9:17, 131, 132, 134, 136, 137, 139, 187)]
}
e$sample <- "a"
e$sample[e$fini=="True"] <- "e"
e$sample[e$fini=="True" & n(e$duree) > duree_max] <- "p"
e$sample[e$fini=="True" & n(e$duree) > duree_max & e$test_qualite=='Un peu'] <- "f" # "q"? excluded because out of quotas
e$sample[e$fini=="True" & n(e$duree) > duree_max & e$exclu==""] <- "r"
return(e)
}
# e2_pilote <- prepare_e2(pilote = T)
e1 <- prepare_e()
e2 <- prepare_e2()
# e1 <- e
# e <- e2
# e1a <- prepare_e(only_finished = F) # 40 ont abandonné avant la fin
# e2a <- prepare_e2(only_finished = F) # 49 ont abandonné avant la fin
e2$vague <- 2
e1$vague <- 1
e <- eb <- rbind.fill(e1, e2)
for (i in names(eb)) {
if (i %in% names(e1)) label(eb[[i]]) <- label(e1[[i]])
if (i %in% names(e2)) label(eb[[i]]) <- label(e2[[i]]) }
convert_c <- function(c) {
# c$confiance_gens <- c$confiance_gens_1e
# c$confiance_gens <- relabel(as.factor(c$confiance_gens_1e), "on n'est jamais assez prudent"="Méfiant", "on peut faire confiance"="Confiant", ""="NSP")
# levels(c$confiance_gens)[levels(c$confiance_gens)==""] <- 'NSP'
# label(c$confiance_gens) <- "confiance_gens: D’une manière générale, diriez-vous que… ? (On peut faire confiance à la plupart des gens/On n’est jamais assez prudent quand on a affaire aux autres) - Q65"
c$confiance_gens <- as.item(as.character(c$confiance_gens_1e), labels = structure(c("on peut faire confiance", "on n'est jamais assez prudent", "NSP"), names = c("Confiance", "Méfiance", "NSP")), annotation=Label(c$confiance_gens_1e))
temp <- -3*(c$tirage_sort_1e=='Pas du tout confiance') - (c$tirage_sort_1e=='Plutot pas confiance') + (c$tirage_sort_1e=='Plutot confiance') + 3*(c$tirage_sort_1e=='Tout à fait confiance')
c$confiance_sortition <- as.item(temp, missing.values = 0, labels=structure(c(-3, -1, 0, 1, 3), names = c('Pas du tout confiance', 'Plutôt pas confiance', 'NSP', 'Plutôt confiance', 'Tout à fait confiance')), annotation=Label(c$tirage_sort_1e))
temp <- -3*(c$problemes_invisibilises_1e=='jamais') - (c$problemes_invisibilises_1e=='peu souvent') + (c$problemes_invisibilises_1e=='assez souvent') + 3*(c$problemes_invisibilises_1e=='très souvent')
c$problemes_invisibilises <- as.item(temp, missing.values = 0, labels=structure(c(-3, -1, 0, 1, 3), names = c('Jamais', 'Peu souvent', 'NSP', 'Assez souvent', 'Très souvent')), annotation=Label(c$problemes_invisibilises_1e))
temp <- -3*(c$issue_CC_1e=='Non certainement pas') - (c$issue_CC_1e=='NOn probablement pas') + (c$issue_CC_1e=='Oui probablement') + 3*(c$issue_CC_1e=='Oui certainement')
c$issue_CC <- as.item(temp, labels=structure(c(-3, -1, 0, 1, 3), names = c('Non, certainement pas', 'Non, probablement pas', 'NSP', 'Oui, probablement', 'Oui, certainement')), annotation=Label(c$issue_CC_1e))
temp <- -1*grepl("positif", c$effets_CC_1e) + grepl("pénible", c$effets_CC_1e)
temp[is.na(c$effets_CC_1e)] <- NA
c$effets_CC_CCC <- as.item(temp, labels = structure(-1:1, names = c("Effets positifs", "Adaptation sans problème", "Extrêmement pénible")), annotation = Label(c$effets_CC_1e))
temp <- 1*grepl("uement activité hu", c$cause_CC_1e) - grepl("autant", c$cause_CC_1e) - 2*grepl("incipalement processus na", c$cause_CC_1e) - 3*grepl("iquement à des processus nat", c$cause_CC_1e) - 4*grepl("y a pas", c$cause_CC_1e) - 0.1*(c$cause_CC_1e=='NR')
temp[is.na(c$cause_CC_1e)] <- NA
c$cause_CC_CCC <- as.item(temp, labels = structure(c(-4:1, -0.1),
names = c("N'existe pas","Uniquement naturel","Principalement naturel","Autant","Principalement anthropique","Uniquement anthropique", "NSP")), missing.values = -0.1, annotation=Label(c$cause_CC_1e))
# c$France_CC <- c$France_CC_1e
# c$France_CC[c$France_CC_1e=='NR'] <- 'NSP'
# c$France_CC[c$France_CC_1e==''] <- NA
# c$France_CC <- as.factor(as.character(c$France_CC))
temp <- -1*grepl('Non', c$France_CC_1e) + grepl('Oui', c$France_CC_1e)
temp[is.na(c$France_CC_1e)] <- NA
c$France_CC <- as.item(temp, labels = structure(c(-1:1), names = c('Non', ' NSP ', 'Oui')), annotation=Label(c$France_CC_1e)) # missing.values = 0,
c$echelle_politique_CC <- -2*(c$echelle_politique_CC_1e=='Toute échelle') -1*(c$echelle_politique_CC_1e=='Mondiale') + (c$echelle_politique_CC_1e=='Nationale') + 2*(c$echelle_politique_CC_1e=='Locale')
c$echelle_politique_CC <- as.item(c$echelle_politique_CC, labels = structure(c(-2:2), names=c('à toutes les échelles', "mondiales", 'européennes', 'nationales', 'locales')), annotation=Label(c$echelle_politique_CC_1e) )
c$redistribution <- c$redistribution_1e
c$redistribution[28] <- 1 # so that there is one answer "1", avoiding a bug
variables_politiques_c <- names(c)[50:61]
for (v in variables_politiques_c) {
temp <- -3 *(c[[v]]=='pas du tout') - 1*(c[[v]]=='pas vraiment') + 1*(c[[v]]=='Assez souhitable') + 3*(c[[v]]=='très souhaitable')
# temp[!(temp %in% c(-3,-1, 1,3))] <- NA
c[[sub('_1e', '', v)]] <- as.item(temp, labels = structure(c(-3,-1, 0,1,3), names = c('Pas du tout', 'Pas vraiment', 'NSP', 'Assez', 'Très')), annotation = Label(c[[v]]))
}
variables_qualite_enfant <- names(c)[11:21]
for (v in variables_qualite_enfant) c[[sub('_1e', '', v)]] <- as.logical(c[[v]])
variables_obstacles <- names(c)[63:70] # 68
for (v in variables_obstacles) c[[sub('_1e', '', v)]] <- as.numeric(c[[v]])
c$solution_CC_changer <- grepl('faudra modifier', c$solution_CC_1e)
c$solution_CC_traite <- grepl('niveau mondial', c$solution_CC_1e)
c$solution_CC_progres <- grepl('solutions', c$solution_CC_1e)
c$solution_CC_rien <- grepl('rien', c$solution_CC_1e)
c$solution_CC_changer[is.na(c$solution_CC_1e)] <- NA
c$solution_CC_traite[is.na(c$solution_CC_1e)] <- NA
c$solution_CC_progres[is.na(c$solution_CC_1e)] <- NA
c$solution_CC_rien[is.na(c$solution_CC_1e)] <- NA
label(c$solution_CC_changer) <- "solution_CC_changer: Il faudra modifier de façon importante nos modes de vie pour empêcher le changement climatique - De ces quatre opinions, laquelle se rapproche le plus de la vôtre (Le progrès technique permettra de trouver des solutions pour empêcher le changement climatique; Il faudra modifier de façon importante nos modes de vie pour empêcher le changement climatique; C’est aux États de réglementer, au niveau mondial, le changement climatique; Il n’y a rien à faire, le changement climatique est inévitable) - Q50"
label(c$solution_CC_traite) <- "solution_CC_traite: C’est aux États de réglementer, au niveau mondial, le changement climatique - De ces quatre opinions, laquelle se rapproche le plus de la vôtre (Le progrès technique permettra de trouver des solutions pour empêcher le changement climatique; Il faudra modifier de façon importante nos modes de vie pour empêcher le changement climatique; C’est aux États de réglementer, au niveau mondial, le changement climatique; Il n’y a rien à faire, le changement climatique est inévitable) - Q50"
label(c$solution_CC_progres) <- "solution_CC_progres: Le progrès technique permettra de trouver des solutions pour empêcher le changement climatique - De ces quatre opinions, laquelle se rapproche le plus de la vôtre (Le progrès technique permettra de trouver des solutions pour empêcher le changement climatique; Il faudra modifier de façon importante nos modes de vie pour empêcher le changement climatique; C’est aux États de réglementer, au niveau mondial, le changement climatique; Il n’y a rien à faire, le changement climatique est inévitable) - Q50"
label(c$solution_CC_rien) <- "solution_CC_rien: Il n’y a rien à faire, le changement climatique est inévitable - De ces quatre opinions, laquelle se rapproche le plus de la vôtre (Le progrès technique permettra de trouver des solutions pour empêcher le changement climatique; Il faudra modifier de façon importante nos modes de vie pour empêcher le changement climatique; C’est aux États de réglementer, au niveau mondial, le changement climatique; Il n’y a rien à faire, le changement climatique est inévitable) - Q50"
return(c)
}
c <- convert_c(c)
(cause_CC_CCC <- barres(data=dataN3("cause_CC_CCC", miss = T, rev = T), miss = T, sort = F, labels = c('Population (PSE, V2)', 'Population (PSE, V1)', 'CCC'), legend=dataN("cause_CC_CCC", miss = T, rev_legend = T, return = 'legend')))
(cause_CC_CCC <- barres(data=dataN3("cause_CC_CCC", miss = T, rev = T), miss = T, sort = FALSE, labels = c('Population (PSE, V2)', 'Population (PSE, V1)', 'CCC'), legend=dataN("cause_CC_CCC", miss = T, rev_legend = T, return = 'legend')))
dataN <- function(var, data=e1, miss=T, weights = T, return = "", fr=T, rev=FALSE, rev_legend = FALSE) {
if (is.null(data[['weight']])) weights <- FALSE # TODO? warning
mat <- c()
if (is.character(data[[var]]) | (is.numeric(data[[var]]) & !grepl("item", class(data[[var]]))) | is.logical(data[[var]])) v <- as.factor(data[[var]]) # before: no is.logical
else v <- data[[var]]
if (setequal(levels(v), c(T, FALSE))) levels <- c(T) # before: not this line
else if (is.null(annotation(v))) levels <- levels(v)
else levels <- labels(v)@.Data
levels <- levels[!(levels %in% c("NSP", "PNR", "Non concerné·e"))]
if (rev_legend) levels <- rev(levels) # new (05/20)
if (weights) N <- sum(data[['weight']][!is.missing(v) & (!(v %in% c("NSP", "Non concerné·e")))])
else N <- length(which(!is.missing(v) & (!(v %in% c("NSP", "Non concerné·e")))))
for (val in levels) { # before: no %in% nowhere below
if (weights) mat <- c(mat, sum(data[['weight']][which(v==val)])/N)
else mat <- c(mat, length(which(v==val))/N) }
if (rev) mat <- rev(mat)
if (miss) {
if (is.null(annotation(v))) {
if (weights) mat <- c(mat, sum(data[['weight']][which(is.na(v) | v %in% c("NSP", "Non concerné·e"))])/N)
else mat <- c(mat, length(which(is.na(v) | v %in% c("NSP", "Non concerné·e")))/N)
} else  {
if (weights) mat <- c(mat, sum(data[['weight']][which(is.missing(v) & !is.na(v))])/N) # was defined without " & (!(v %in% c("NSP", "Non concerné·e")))" here and line below
else mat <- c(mat, length(which(is.missing(v) & !is.na(v)))/N) } } # mais ça semble équivalent pck les NSP sont missing dans ces cas-là
if (max(nchar(levels))==3 & 'Oui' %in% levels & 'Non' %in% levels) { if (which(levels=='Non') < which(levels=='Oui')) mat[2:1] <- mat[1:2]; levels[c(which(levels=='Oui'),which(levels=='Non'))] <- c('Non', 'Oui') }
if ((return %in% c("levels", "legend")) & miss & fr) return(c(levels, 'NSP'))
else if ((return %in% c("levels", "legend")) & miss & (!(fr))) return(c(levels, 'PNR'))
else if ((return %in% c("levels", "legend")) & (!(miss))) return(levels)
else if (return == "N") return(N)
else return(matrix(mat, ncol=1))
}
(cause_CC_CCC <- barres(data=dataN3("cause_CC_CCC", miss = T, rev = T), miss = T, sort = FALSE, labels = c('Population (PSE, V2)', 'Population (PSE, V1)', 'CCC'), legend=dataN("cause_CC_CCC", miss = T, rev_legend = T, return = 'legend')))
data12 <- function(vars, df = list(e1, e2), miss=T, weights = T, fr=T, rev=FALSE, return = "") {
if (length(vars)==1) return(dataN2(var=vars, df=list(df[[2]], df[[1]]), miss=miss, weights=weights, fr=fr, rev=rev, return=return))
else {
init <- T
for (var in vars) {
if (init) {
data <- dataN2(var=var, df=list(df[[2]], df[[1]]), miss=miss, weights=weights, fr=fr, rev=rev, return=return)
init <- FALSE
} else {
data <- cbind(data, dataN2(var=var, df=list(df[[2]], df[[1]]), miss=miss, weights=weights, fr=fr, rev=rev, return=return))
}
}
return(data)
} }
barres12 <- function(vars, df=list(e1, e2), labels, legend=hover, comp = "(PSE, V2)", v1 = NULL, miss=T, weights = T, fr=T, rev=T, color=c(), rev_color = FALSE, hover=legend, sort=TRUE, thin=T, return="", showLegend=T) {
if (missing(vars) & missing(legend) & missing(hover)) warning('hover or legend must be given')
if (!missing(miss)) nsp <- miss
data1 <- dataKN(vars, data=df[[1]], miss=miss, weights = weights, return = "", fr=fr, rev=rev)
if (missing(legend) & missing(hover)) {
if (is.logical(df[[1]][[vars[1]]])) hover <- legend <- labels # data1(var = vars[1], data=df, weights = weights) # before: uncommented and "else" next line
else hover <- legend <- dataN(var = vars[1], data=df[[1]], miss=miss, weights = weights, return = "legend", fr=fr, rev_legend = rev) }
agree <- order_agree(data = data1, miss = miss)
if (is.logical(df[[1]][[vars[1]]])) agree <- rev(agree)
if (return=="data") return(data12(vars[agree], df = df, miss=miss, weights = weights, fr=fr, rev=rev, return = ""))
else if (return=="labels") return(labels12(labels[agree], en = !fr, comp = comp, v1=v1))
else if (return=="legend") return(legend)
else return(barres(data = data12(vars[agree], df = df, miss=miss, weights = weights, fr=fr, rev=rev, return = ""),
labels=labels12(labels[agree], en = !fr, comp = comp, v1=v1), legend=legend,
miss=miss, weights = weights, fr=fr, rev=rev, color=color, rev_color = rev_color, hover=hover, sort=FALSE, thin=thin, showLegend=showLegend))
}
labels12 <- function(labels, en=FALSE, comp = "V2", v1 = NULL) {
new_labels <- c()
lab2 <- ifelse(comp=="V2", ifelse(en, "Wave 2 (W2)", "Vague 2 (PSE, V2)"), comp)
lab1 <- ifelse(is.null(v1), ifelse(en, "(W1)", "(PSE, V1)"), v1)
for (l in labels) {
new_labels <- c(new_labels, lab2, paste(l, lab1))
lab2 <- paste("", lab2) }
return(new_labels)
}
barres <- function(data, vars, file, title="", labels, color=c(), rev_color = FALSE, hover=legend, nsp=TRUE, sort=TRUE, legend=hover, showLegend=T, margin_r=0, margin_l=NA, online=FALSE,
display_values=T, thin=T, legend_x=NA, show_ticks=T, xrange=NA, save = FALSE, df=e1, miss=T, weights = T, fr=T, rev=T, grouped = FALSE, error_margin = FALSE, color_margin = '#00000033', N = NA) {
if (missing(vars) & missing(legend) & missing(hover)) warning('hover or legend must be given')
if (!missing(miss)) nsp <- miss
if (missing(data) & !missing(vars)) {
data <- dataKN(vars, data=df, miss=miss, weights = weights, return = "", fr=fr, rev=rev)
N <- dataN(vars[1], data=df, miss=miss, weights = weights, return = "N")
if (missing(legend) & missing(hover)) {
if (is.logical(df[[vars[1]]])) hover <- legend <- labels # data1(var = vars[1], data=df, weights = weights)
else hover <- legend <- dataN(var = vars[1], data=df, miss=miss, weights = weights, return = "legend", fr=fr, rev_legend = rev) } }
if (length(color)==0) color <- color(data, nsp, rev_color = rev_color)
margin_t <- 0 + 25*(!(thin))
if (title!="") { margin_t <- 100 }
if (grepl("<br>", title)) { margin_t <- 150 }
legendSize <- 15 # 10, 13
legendY <- 1.1  + 0.3*thin/(ncol(data)-1) # last term may be problematic
legendX <- 0.2
# legendFont <- 'Open Sans'
if (is.na(margin_l)) { margin_l <- 4.7*max(nchar(labels)/(1 + str_count(labels, '<br>'))) }
if (max(nchar(labels)) > 25) { legendSize <- 15 } # 9, 13
# if (max(nchar(labels)) > 50) { legendSize <- 8 }
# if (max(nchar(labels)) > 60) { legendSize <- 7 }
if (max(nchar(labels)) > 50) { # 70
legendSize <- 13 # 11
# legendY = 1.2
legendX= -0.2 # 1
# if (ncol(data)>1) margin_t = 170
}
if (!is.na(legend_x)) legendX <- legend_x
if (!showLegend) { margin_t <- max(0, margin_t - 70) }
if (ncol(data)==1) legendY = 1.5 + 0.3*thin
if (sort) {
order <- order_agree(data = data, miss = miss, rev = rev, n = length(labels))
labels <- labels[order]
data <- matrix(data[, order], nrow=nrow(data))
}
if (nrow(data)==1 & (sort | !showLegend)) {  # new: add !showLegend to manage responsable_CC i.e. comparisons of a multiple answer question
if (!sort) order <- 1:length(labels)
hover <- hover[order]
value <- c()
for (i in 1:length(hover)) {
hover[i] <- paste(hover[i], "<br>Choisi dans ", round(100*data[1, i]), "% des réponses", sep="")
value[i] <- paste(round(100*data[1, i]), '%', sep='') } # '%  '
hovers <- matrix(hover, nrow=length(hover))
values <- matrix(value, nrow=length(hover))
}
else {
hovers <- values <- c()
if (nsp) {
for (i in 1:(length(hover)-1)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]/(1+data[length(hover), j])), '% des réponses<br>', round(100*data[i, j]), '% des réponses exprimées') )
values <- c(values, paste(round(100*data[i, j]/(1+data[length(hover), j])), '%', sep='')) # '%  '
}
}
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[length(hover)], '<br>', round(100*data[length(hover), j]/(1+data[length(hover), j])), '% des réponses<br>') )
values <- c(values, paste(round(100*data[length(hover), j]/(1+data[length(hover), j])), '%', sep='')) # '%  '
}
}
else {
if (is.element(hover[length(hover)],c("PNR", "NSP"))) hover <- hover[1:(length(hover)-1)]
if (is.element(legend[length(legend)],c("PNR", "NSP"))) legend <- legend[1:(length(legend)-1)]
for (i in 1:length(hover)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]), '% des réponses exprimées<br>') )
values <- c(values, paste(round(100*data[i, j]), '%', sep='')) # '%  '
}
}
}
hovers <- matrix(hovers, ncol=length(hover))
values <- matrix(values, ncol=length(hover))
}
if (!(display_values)) values <- replace(values, T, '')
bars <- plot_ly(x = data[1,], y = labels, type = 'bar', orientation = 'h', text = values[,1], textposition = 'auto',
error_x = list(visible = error_margin, array=qnorm(1-0.05/2)*sqrt(data[1,]*(1-data[1,])/(N-1)), color = color_margin), # sort=FALSE,
hoverinfo = hovers[,1], name=legend[1], marker = list(color = color[1], line = list(color = 'white'))) %>% # , width = 0
layout(xaxis = list(title = "",
showgrid = show_ticks,
showline = FALSE,
showticklabels = show_ticks,
gridcolor = toRGB("gray70"), # + noir, + proche de 0
gridwidth = 1,
griddash = "dot",
autotick = FALSE,
ticks = "outside",
tick0 = 0,
dtick = 0.1,
ticklen = 5*show_ticks,
tickwidth = 1,
tickcolor = toRGB("gray70"),
zeroline = T,
range = xrange,
domain = c(0.01 + 0.14*(!(" " %in% labels)), 1)
),
yaxis = list(title = "",
showgrid = FALSE,
showline = FALSE,
showticklabels = FALSE,
categoryorder = "trace",
# automargin = T,
zeroline = FALSE),
hovermode = 'closest',
barmode = ifelse(grouped, 'group', 'stack'),
title = list(text = title, font = list(color = 'black')),
# title = title,
# titlefont = list(color='black'),
font = list(color='black', size=legendSize-1),
# paper_bgcolor = 'rgb(248, 248, 255)', plot_bgcolor = 'rgb(248, 248, 255)',
margin = list(l = margin_l, r = margin_r, t = margin_t, b = 24, autoexpand = thin), # 21, autoexpand=FALSE removes useless margin at bottom but creates bug with legend
# margin = list(b = 20, t = margin_t),
legend = list(orientation='h', y=legendY, x=legendX, traceorder='normal', font=list(size=legendSize, color='black')), # family='Balto',  , family=legendFont
# showlegend = (showLegend & !((("Yes" %in% legend) | ("Oui" %in% legend)) & (length(legend)<4)))) %>%
showlegend = (showLegend & !(setequal(legend, c('Yes', 'No', 'PNR')) | setequal(legend, c('Oui', 'Non', 'NSP'))))) %>%
# labeling the y-axis
add_annotations(xref = 'paper', yref = 'y', x = 0.14, y = labels,
xanchor = 'right',
text = labels,
font = list(family = 'Arial', size = 14, color = 'black'),
showarrow = FALSE, align = 'right') # %>%
# Legend in the Yes/No case
if ((setequal(legend, c('Yes', 'No', 'PNR')) | setequal(legend, c('Oui', 'Non', 'NSP')))) {
bars <- bars %>% add_annotations(xref = 'x', yref = 'paper',
x = c(0.1, 0.9, 1.1),
y = 1.5,
text = legend,
font = list(family = 'Arial', size = 16, color = 'black'),
showarrow = FALSE) } # %>%
# print(nrow(data))
# print(hover)
# print(nrow(hovers))
# print(ncol(hovers))
if (nrow(data)>1) { for (i in 2:nrow(data)) { # evaluate=TRUE,
bars <- add_trace(bars, x = data[i,], name=legend[i], text = values[,i], hoverinfo = 'text', hovertext = hovers[,i], marker = list(color = color[i]),
error_x = list(visible = error_margin, array=qnorm(1-0.05/2)*sqrt(data[i,]*(1-data[i,])/(N-1)), color = color_margin)) # width thickness (in px)
} }
if (online) { api_create(bars, filename=file, sharing="public") }
if (!missing(file) & save) save_plotly(bars, filename = file) # new
return(bars)
}
(cause_CC_CCC <- barres(data=dataN3("cause_CC_CCC", miss = T, rev = T), miss = T, sort = FALSE, labels = c('Population (PSE, V2)', 'Population (PSE, V1)', 'CCC'), legend=dataN("cause_CC_CCC", miss = T, rev_legend = T, return = 'legend')))
save_plotly(cause_CC_CCC)
(causes_catastrophe <- barres(data=data_causes_catastrophe[,2:1], miss = F, color = c(color(3), "#D3D3D3"), sort = F, rev_color = T, labels = rev(c('CCC', 'Population (ADEME)')), legend=c("Personne n'est sûr", "Ont toujours eu lieu", "Dues au changement climatique", "NR")))
(causes_catastrophe <- barres(data=data_causes_catastrophe[,2:1], miss = F, color = c(color(3), "#D3D3D3"), sort = FALSE, rev_color = T, labels = rev(c('CCC', 'Population (ADEME)')), legend=c("Personne n'est sûr", "Ont toujours eu lieu", "Dues au changement climatique", "NR")))
(causes_catastrophe <- barres(data=data_causes_catastrophe[,2:1], miss = FALSE, color = c(color(3), "#D3D3D3"), sort = FALSE, rev_color = T, labels = rev(c('CCC', 'Population (ADEME)')), legend=c("Personne n'est sûr", "Ont toujours eu lieu", "Dues au changement climatique", "NR")))
save_plotly(causes_catastrophe) # ADEME octobre 2019 toplot!!
(effets_CC_CCC <- barres(data=cbind(c(0.02, 0.32, 0.65)/0.99, dataN3("effets_CC_CCC", miss = F)), miss = F, sort = F, labels = c('Population (ADEME)', 'Population (PSE, V2)', 'Population (PSE, V1)', 'CCC'), legend = c("Effets positifs", "Adaptation sans trop de problème", "Extrêmement pénible")))
(effets_CC_CCC <- barres(data=cbind(c(0.02, 0.32, 0.65)/0.99, dataN3("effets_CC_CCC", miss = F)), miss = FALSE, sort = FALSE, labels = c('Population (ADEME)', 'Population (PSE, V2)', 'Population (PSE, V1)', 'CCC'), legend = c("Effets positifs", "Adaptation sans trop de problème", "Extrêmement pénible")))
(effets_CC_CCC <- barres(data=cbind(c(0.02, 0.32, 0.65)/0.99, dataN3("effets_CC_CCC", miss = FALSE)), miss = FALSE, sort = FALSE, labels = c('Population (ADEME)', 'Population (PSE, V2)', 'Population (PSE, V1)', 'CCC'), legend = c("Effets positifs", "Adaptation sans trop de problème", "Extrêmement pénible")))
save_plotly(effets_CC_CCC) # ADEME 2019 toplot!
(obstacles_CCC <- barres(data = data_obstacles_c[,c(5,7,6,4,2,3,1)], rev = FALSE, weights = FALSE, sort = FALSE, miss = FALSE, showLegend=T, legend = 1:7, labels=labels_obstacles[c(5,7,6,4,2,3,1)]))
(obstacles_all <- barres(data = data_obstacles[3:1,], color = color(4)[c(4,3,1)], grouped = T, rev = FALSE, miss=FALSE, labels=labels_obstacles[1:7], legend = rev(c('CCC', 'Population (PSE, V1)', 'Population (PSE, V2)'))))
save_plotly(obstacles_all)
(solution_CC <- barres(data = data_solution_all[4:1,], color = rev(color(7)[c(1,5:7)]), grouped = T, rev = FALSE, miss=FALSE, labels=labels_solution, legend = rev(c('CCC', 'Population (PSE, V1)', 'Population (PSE, V2)', 'Population (ADEME)'))))
save_plotly(solution_CC) # TODO!: use color(7)[c(5:6)] for all V1, V2
(echelle_politique_CC <- barres(data=dataN3("echelle_politique_CC", miss = FALSE), miss = FALSE, sort = FALSE, labels = c('Population (PSE, V2)', 'Population (PSE, V1)', 'CCC'), legend=str_to_sentence(dataN2("echelle_politique_CC", miss = FALSE, return = 'legend'))))
save_plotly(echelle_politique_CC)
(politiques_2_v12 <- barres12(variables_politiques_2, labels = labels_variables_politiques_2, miss=FALSE))
save_plotly(politiques_2_v12) # TODO!: politiques all
# labels_variables_referendum_v2 <- c(labels_variables_referendum, new_labels_variables_referendum)
(referendum_v12 <- barres(data = cbind(dataKN(vars = new_variables_referendum, data=e2, rev = T), barres12(variables_referendum, return="data")), sort=FALSE, miss=T, labels=c(new_labels_variables_referendum, barres12(variables_referendum, labels=labels_variables_referendum, return="labels")), legend=barres12(variables_referendum, return="legend")))
save_plotly(referendum_v12)
(confiance_gens_triple <- barres(data=cbind(dataN2("confiance_gens", miss = FALSE), c(0.65, 0.35)), miss = FALSE, sort = FALSE, rev_color = T, labels = c('CCC', 'Population (PSE)', 'Population (Cevipof 04/2020)'), legend=dataN2("confiance_gens", miss = FALSE, return = 'legend')))
(confiance_gens <- barres(data=cbind(c(0.35, 0.65), dataN3("confiance_gens", miss = FALSE, rev=T)), miss = FALSE, sort = FALSE, labels = c('Population (Cevipof 04/2020)', 'Population (PSE, V2)', 'Population (PSE, V1)', 'CCC'), legend=c("Confiance", "Méfiance")))
save_plotly(confiance_gens) # toplot!
(confiance_sortition <- barres(data=dataN3("confiance_sortition", miss = FALSE, rev = T), sort = FALSE, miss = FALSE, labels = c('Population (PSE, V2)', 'Population (PSE, V1)', 'CCC'), legend=rev(dataN2("confiance_sortition", miss = FALSE, return = 'legend'))))
save_plotly(confiance_sortition)
(problemes_invisibilises <- barres(data=dataN3("problemes_invisibilises", miss = FALSE), miss = FALSE, sort = FALSE, rev_color = FALSE, labels = c('Population (PSE, V2)', 'Population (PSE, V1)', 'CCC'), legend=dataN2("problemes_invisibilises", miss = FALSE, return = 'legend')))
View(problemes_invisibilises)
save_plotly(problemes_invisibilises) # « Condi^ons de vie et aspira^ons », CREDOC, janvier 2019: donne 58% d'invisibilisés (contre 61% ici)
(redistribution <- barres(data=dataN3("redistribution", miss = FALSE), rev = FALSE,  miss = FALSE, sort = FALSE, labels = c('Population (PSE, V2)', 'Population (PSE, V1)', 'CCC'), legend=dataN2("redistribution", miss = FALSE, return = 'legend')))
save_plotly(redistribution)
(qualite_enfant <- barres(data = data_qualite_enfant_all, color = color(4)[c(1,3,4)], grouped = T, rev = FALSE, miss=FALSE, labels=str_to_sentence(labels_qualite_enfant), legend = c('CCC', 'Population (PSE, V1)', "Population (PSE, V2)")))
save_plotly(qualite_enfant)
data_qualite_enfant_all
(qualite_enfant <- barres(data = data_qualite_enfant_all[3:1,], color = color(4)[c(4,3,1)], grouped = T, rev = FALSE, miss=FALSE, labels=str_to_sentence(labels_qualite_enfant), legend = rev(c('CCC', 'Population (PSE, V1)', "Population (PSE, V2)"))))
save_plotly(qualite_enfant)
(ecole <- barres(data=data_ecole[,2:1], miss = FALSE, color = c(color(2), "#D3D3D3"), sort = FALSE, rev_color = T, labels = c('Population (ADEME)', 'CCC'), legend=c("Discipline et effort", "Esprit éveillé et critique", "NR")))
save_plotly(ecole) # ADEME octobre 2019 toplot!!
(importance_environnement <- barres(data=cbind(dataN("importance_environnement", data = e2, miss = FALSE), dataN("importance_environnement", data = e1, miss = FALSE), data_importance_CCC[,2]), rev = FALSE, rev_color = T,  miss = FALSE, sort = FALSE, labels = c('Population (PSE, V2)', 'Population (PSE, V1)', 'CCC'), legend=0:10))
save_plotly(importance_environnement)
(connait_CCC <- barres12(vars = "connait_CCC", miss = FALSE, labels=" "))
(connait_CCC_title <- barres12(vars = "connait_CCC", miss = FALSE, labels="Avez-vous entendu parler de \nla Convention Citoyenne pour le Climat ?"))
save_plotly(connait_CCC_title)
(connait_CCC <- barres12(vars = "connait_CCC", miss = FALSE, labels=" "))
save_plotly(connait_CCC)
# for (v in variables_connaissances_CCC) print(paste(v, round(wtd.mean(e1[[paste("connaissance_CCC", v, sep="_")]]==T, weights = e1$weight), 3)))
# for (v in variables_connaissances_CCC) print(paste(v, round(2*wtd.mean(e2[[paste("connaissance_CCC", v, sep="_")]]==T, weights = e2$weight), 3)))
(connaissances_CCC <- barres12(data = data_connaissances_CCC, miss = FALSE, fr = FALSE, showLegend = FALSE, legend=c("",""), labels=c("Measures", "Specific measures", "Sortition", "150", "Temporality", "Internet", "Opinion", "Legacy", "Good french")))
data_connaissances_CCC <- array(0, dim=c(2, length(variables_connaissances_CCC)))
for (j in seq_along(variables_connaissances_CCC)) if ((v <- paste("connaissance_CCC", variables_connaissances_CCC[j], sep="_")) %in% names(e1)) data_connaissances_CCC[1,j] <- wtd.mean(e1[[v]]==T, weights = e1$weight)
for (j in seq_along(variables_connaissances_CCC)) if ((v <- paste("connaissance_CCC", variables_connaissances_CCC[j], sep="_")) %in% names(e2)) data_connaissances_CCC[2,j] <- wtd.mean(e2[[v]]==T, weights = e2$weight)
# for (v in variables_connaissances_CCC) print(paste(v, round(wtd.mean(e1[[paste("connaissance_CCC", v, sep="_")]]==T, weights = e1$weight), 3)))
# for (v in variables_connaissances_CCC) print(paste(v, round(2*wtd.mean(e2[[paste("connaissance_CCC", v, sep="_")]]==T, weights = e2$weight), 3)))
(connaissances_CCC <- barres12(data = data_connaissances_CCC, miss = FALSE, fr = FALSE, showLegend = FALSE, legend=c("",""), labels=c("Measures", "Specific measures", "Sortition", "150", "Temporality", "Internet", "Opinion", "Legacy", "Good french")))
(connaissances_CCC <- barres(data = data_connaissances_CCC[,9:1], grouped = T, rev = FALSE, sort = FALSE, miss=FALSE, labels=rev(c("Mesures", "Mesures spécifiques", "Tirage au sort", "150", "Déroulement", "Internet", "Opinion", "Postérité", "Bon français")), legend = c('Vague 1', "Vague 2")))
(connaissances_CCC <- barres(data = data_connaissances_CCC[,9:1], color = color(7)[5:6] grouped = T, rev = FALSE, sort = FALSE, miss=FALSE, labels=rev(c("Mesures", "Mesures spécifiques", "Tirage au sort", "150", "Déroulement", "Internet", "Opinion", "Postérité", "Bon français")), legend = c('Population (PSE, V1)', "Population (PSE, V2)")))
(connaissances_CCC <- barres(data = data_connaissances_CCC[,9:1], color = color(7)[c(5:6)] grouped = T, rev = FALSE, sort = FALSE, miss=FALSE, labels=rev(c("Mesures", "Mesures spécifiques", "Tirage au sort", "150", "Déroulement", "Internet", "Opinion", "Postérité", "Bon français")), legend = c('Population (PSE, V1)', "Population (PSE, V2)")))
(connaissances_CCC <- barres(data = data_connaissances_CCC[,9:1], color = color(7)[c(5:6)], grouped = T, rev = FALSE, sort = FALSE, miss=FALSE, labels=rev(c("Mesures", "Mesures spécifiques", "Tirage au sort", "150", "Déroulement", "Internet", "Opinion", "Postérité", "Bon français")), legend = c('Population (PSE, V1)', "Population (PSE, V2)")))
(connaissances_CCC <- barres(data = data_connaissances_CCC[,9:1], color = color(7)[c(5:6)], grouped = T, rev = FALSE, sort = FALSE, miss=FALSE, labels=rev(c("Mesures", "Mesures spécifiques", "Tirage au sort", "150", "Déroulement", "Internet", "Opinion", "Postérité", "Bon français")), legend = c('Vague 1 (PSE)', "Vague 2 (PSE)")))
save_plotly(connaissances_CCC)
# TODO: appartenance
(Connaissance_CCC_v12_wo_label_title <- barres12(vars = "Connaissance_CCC", color = color(7)[c(1,2,4:7)], miss = FALSE, labels="Synhtèse du champ libre"))
save_plotly(Connaissance_CCC_v12_wo_label_title)
(Connaissance_CCC_v12_wo_label <- barres12(vars = "Connaissance_CCC", color = color(7)[c(1,2,4:7)], miss = FALSE, labels="Population", legend = c("Bonne", "Approximatif", "Trop vague", "Aucune", "Faux", "Hors sujet")))
save_plotly(Connaissance_CCC_v12_wo_label)
(sait_CCC_devoilee_title <- barres12(vars = "sait_CCC_devoilee", miss = FALSE, labels="Des mesures proposées par la Convention \nCitoyenne pour le Climat ont déjà été dévoilées"))
save_plotly(sait_CCC_devoilee_title)
(sait_CCC_devoilee <- barres12(vars = "sait_CCC_devoilee", miss = FALSE, labels="Population"))
save_plotly(sait_CCC_devoilee) # TODO: parmi qui ?
(CCC_avis <- barres(data=rbind(dataKN(variables_CCC_avis, e1, miss=FALSE), dataKN(variables_CCC_avis, e2, miss=FALSE)), labels=labels_CCC_avis_long, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = FALSE, miss = FALSE))
(CCC_avis <- barres(data=rbind(dataKN(variables_CCC_avis, e1, miss=FALSE), dataKN(variables_CCC_avis, e2, miss=FALSE)), labels=labels_CCC_avis_long, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = FALSE, miss = FALSE))
labels_CCC_avis_long <- c()
for (v in variables_CCC_avis) labels_CCC_avis_long <- c(labels_CCC_avis_long, sub(' - .*', '', sub('.*: ', '', Label(e1[[v]]))))
(CCC_avis <- barres(data=rbind(dataKN(variables_CCC_avis, e1, miss=FALSE), dataKN(variables_CCC_avis, e2, miss=FALSE)), labels=labels_CCC_avis_long, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = FALSE, miss = FALSE))
labels_CCC_avis_long
labels_CCC_avis_long <- c("Inutile car le gouvernement ne reprendra que les mesures qui lui plaisent",
"Inutile car le gouvernement ne reprendra que les mesures qui lui plaisent",
"Un espoir pour le renouveau des institutions",
"Une expérience vouée à l’échec",
"Une opération de communication du gouvernement",
"Une initiative sincère du gouvernement en faveur de la démocratie",
"Une façon pour le gouvernement de se défausser de ses responsabilités",
"Une opportunité pour faire entendre la voix de l’ensemble des Français",
"Une assemblée manipulée ou contrôlée par le gouvernement",
"Une assemblée représentative de la population",
"Autre")
labels_CCC_avis_long <- c("Inutile car le gouvernement ne reprendra<br>que les mesures qui lui plaisent",
"Une méthode prometteuse pour définir<br>la politique climatique de la France",
"Un espoir pour<br>le renouveau des institutions",
"Une expérience vouée à l’échec",
"Une opération de communication du gouvernement",
"Une initiative sincère du gouvernement<br>en faveur de la démocratie",
"Une façon pour le gouvernement de<br>se défausser de ses responsabilités",
"Une opportunité pour faire entendre<br>la voix de l’ensemble des Français",
"Une assemblée manipulée ou<br>contrôlée par le gouvernement",
"Une assemblée représentative de la population",
"Autre")
(CCC_avis <- barres(data=rbind(dataKN(variables_CCC_avis, e1, miss=FALSE), dataKN(variables_CCC_avis, e2, miss=FALSE)), labels=labels_CCC_avis_long, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = FALSE, miss = FALSE))
labels_CCC_avis_long <- c("Inutile car le gouvernement ne reprendra<br>que les mesures qui lui plaisent",
"Une méthode prometteuse pour définir<br>la politique climatique de la France",
"Un espoir pour<br>le renouveau des institutions",
"Une expérience vouée à l’échec",
"Une opération de<br>communication du gouvernement",
"Une initiative sincère du gouvernement<br>en faveur de la démocratie",
"Une façon pour le gouvernement de<br>se défausser de ses responsabilités",
"Une opportunité pour faire entendre<br>la voix de l’ensemble des Français",
"Une assemblée manipulée ou<br>contrôlée par le gouvernement",
"Une assemblée<br>représentative de la population",
"Autre")
(CCC_avis <- barres(data=rbind(dataKN(variables_CCC_avis, e1, miss=FALSE), dataKN(variables_CCC_avis, e2, miss=FALSE)), labels=labels_CCC_avis_long, legend = c("Vague 1", "Vague 2"), sort = T, grouped=T, rev = FALSE, miss = FALSE))
save_plotly(CCC_avis)
(CCC_avis <- barres(data=rbind(dataKN(variables_CCC_avis, e1, miss=FALSE), dataKN(variables_CCC_avis, e2, miss=FALSE)), labels=labels_CCC_avis_long, legend = c("Vague 1 (PSE)", "Vague 2 (PSE)"), sort = T, grouped=T, rev = FALSE, miss = FALSE))
save_plotly(CCC_avis)
(CCC_non_representative <- barres(vars = variables_CCC_non_representative, df=e2[e2$representativite_CCC=='Non',], showLegend=FALSE, rev=FALSE, miss = FALSE, sort = T, labels = labels_CCC_non_representative))
(representativite_CCC <- barres(vars="representativite_CCC", df=e2, labels=" ", rev = FALSE, miss = T))
(representativite_CCC_titled <- barres(vars="representativite_CCC", df=e2, labels="La CCC est représentative", rev = FALSE, miss = T))
save_plotly(representativite_CCC_titled)
(representativite_CCC <- barres(vars="representativite_CCC", df=e2, labels=" ", rev = FALSE, miss = T))
(representativite_CCC_titled <- barres(vars="representativite_CCC", df=e2[e2$connait_CCC!="Non",], labels="La CCC est représentative", rev = FALSE, miss = T))
save_plotly(representativite_CCC_titled)
(representativite_CCC <- barres(vars="representativite_CCC", df=e2[e2$connait_CCC!="Non",], labels=" ", rev = FALSE, miss = T))
(representativite_CCC <- barres(vars="representativite_CCC", df=e2[e2$connait_CCC!="Non",], labels=" ", rev = FALSE, miss = T, legend = c("Oui", "Non", "NSP")))
save_plotly(representativite_CCC)
save_plotly(representativite_CCC)
(representativite_CCC <- barres(vars="representativite_CCC", df=e2[e2$connait_CCC!="Non",], labels=" ", rev = FALSE, miss = T, legend = c("Oui ", "Non ", "NSP")))
save_plotly(representativite_CCC)
(confiance_sortition <- barres(data=dataN3("confiance_sortition", miss = FALSE, rev = T), sort = FALSE, miss = FALSE, labels = c('Population (PSE, V2)', 'Population (PSE, V1)', 'CCC'), legend=rev(dataN2("confiance_sortition", miss = FALSE, return = 'legend'))))
save_plotly(confiance_sortition)
(pour_sortition <- barres12("pour_sortition", rev = FALSE, legend = c("Oui ", "Non ", "NSP"), labels = "Population", miss=T))
save_plotly(pour_sortition) # Oui Non
decrit(e1$sexe)
decrit(e2$sexe)
decrit(e1$age)
decrit(e2$age)
decrit(e1$csp)
decrit(e2$csp)
decrit(e1$diplome4)
decrit(e2$diplome4)
decrit(e1$region)
decrit(e2$region)
decrit(e1$etudiants)
decrit(e2$etudiants)
decrit(e2$diplome4[e2$etudiants==F])
decrit(as.char(e2$diplome4)[e2$etudiants==F])
decrit(as.character(e2$diplome4)[e2$etudiants==F])
decrit(as.char(e2$diplome4)[e2$etudiants==FALSE])
decrit(e2$diplome4[e2$etudiants==FALSE])
e1$diplome_4 <- e1$diplome4
e2$diplome_4 <- e2$diplome4
e1$diplome_4[e1$etudiants==T] <- "etudiant"
e2$diplome_4[e2$etudiants==T] <- "etudiant"
decrit(e1$diplome_4)
e1$diplome_4 <- e1$diplome4
decrit(e1$diplome_4)
e1$diplome_4[e1$etudiants==TRUE] <- "etudiant"
decrit(e1$diplome_4)
e1$diplome_4 <- e1$diplome4
e1$diplome_4 <- as.character(e1$diplome4)
e2$diplome_4 <- as.character(e2$diplome4)
e1$diplome_4[e1$etudiants==TRUE] <- "etudiant"
decrit(e1$diplome_4)
e2$diplome_4[e2$etudiants==TRUE] <- "etudiant"
decrit(e2$diplome_4)
save_plot <- function(plot=NULL, filename = deparse(substitute(plot)), folder = '../figures/', width = dev.size('px')[1], height = dev.size('px')[2], method='dev', trim = T, format = 'png') {
if (any(class(plot) %in% c("data.frame", "array"))) {
# file <- paste(folder, "xls/", filename, ".xlsx", sep='')
file <- paste(sub("figures", "xlsx", folder), filename, ".xlsx", sep='')
write.xlsx(as.data.frame(plot), file, row.names = T, overwrite = T)
} else {
file <- paste0(folder, filename, ".", format)
# print(file)
if (grepl('dev', method)) {
if (format == 'png') {
dev.copy(png, filename = file, width = width, height = height) # save plot from R (not plotly)
dev.off() }
else if (format == 'pdf') dev.print(pdf, file = file) # because dev.size('px')[1]/dev.size('in')[1] = 105 , width = width/105, height = height/105
}
else {
server <- orca_serve() # doesn't work within a function because requires admin rights
server$export(plot, file = file, width = width, height = height)
server$close()
}
if (trim & format == 'png') image_write(image_trim(image_read(file)), file)
if (trim & format == 'pdf') plot_crop(file) }
}
(connaissances2_CCC <- barres(data = data_connaissances_CCC[,8:1], color = color(7)[c(5:6)], grouped = T, rev = FALSE, sort = FALSE, miss=FALSE, labels=rev(c("Mesures", "Mesures spécifiques", "Tirage au sort", "'150'", "Déroulement", "Internet", "Opinion", "Postérité")), legend = c('Vague 1 (PSE)', "Vague 2 (PSE)")))
save_plotly(connaissances2_CCC, width = 400, height = 500)
save_plot(connaissances2_CCC, width = 400, height = 500)
save_plot(connaissances2_CCC, width = 400, height = 500, folder = "../images/")
(connaissances2_CCC <- barres(data = data_connaissances_CCC[,8:1], color = color(7)[c(5:6)], grouped = T, rev = FALSE, sort = FALSE, miss=FALSE, labels=rev(c("Mesures", "Mesures spécifiques", "Tirage au sort", "'150'", "Déroulement", "Internet", "Opinion", "Postérité")), legend = c('Vague 1 (PSE)', "Vague 2 (PSE)")))
save_plot(connaissances2_CCC, width = 400, height = 500, folder = "../images/")
save_plot(connaissances2_CCC, width = 400, height = 500, folder = "../images/", method = "ef")
