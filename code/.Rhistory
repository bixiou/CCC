e$connaissance_CCC_bon_francais[c(399,404,418,419,423,425,434,448,449,454,457,460,470,471,473,481,488,493,501,507,508,522,542,562,581,598,609,611,613,665,691,700,728,729,732,741,752)] <- "bon français" # ex: ; pas de faute d'orthographe, grammaire correcte, phrase élaborée (i.e. pas juste "je ne sais pas")
e$connaissance_CCC_bon_francais[c(770,776,779,796,797,875,877,895,898,935,937,988,991,993)] <- "bon français" # ex: ; pas de faute d'orthographe, grammaire correcte, phrase élaborée (i.e. pas juste "je ne sais pas")
e$connaissance_CCC_sortition[c(7,62,67,71,91,106,127,130,131,134,150,154,158,165,173,175,186,202,207,209,239,246,247,253,262,284,302,308,334,348,380,407,420,428,440,448,449,470,481)] <- "sortition"
e$connaissance_CCC_sortition[c(494,501,514,530,542,547,558,566,607,609,611,613,646,672,684,689,691,693,700,722,751,779,797,811,815,831,832,857,863,898,906,910,914,923,929,941,972,991)] <- "sortition"
e$connaissance_CCC_mesures[c(7,62,67,71,130,135,142,154,175,186,202,226,246,262,302,307,337,356,386,400,404,407,428,448,449,481,494,505,531,558,563,566,607,609,611,613,646,670,689)] <- "mesures"
e$connaissance_CCC_mesures[c(700,718,722,770,779,786,802,811,815,819,863,898,920,938,941,950,982,991,993)] <- "mesures"
e$connaissance_CCC_internet[c(44,70,239,279,512,606,701)] <- "internet"
e$connaissance_CCC_opinion[c(80,170,276,284,360,454,461,542,547,570,797,839,866,895,921,927)] <- "opinion" # 866 "des gens qui croit mieux que les autres se qu il faut faire"
e$connaissance_CCC_posterite[c(700,770)] <- "postérité"
e$connaissance_CCC_temporalite[c(84,117,131,150,172,235,249,293,302,427,501)] <- "temporalité"
e$connaissance_CCC_150[which(c(grepl('150', e$connaissance_CCC)),470)] <- "150"
} else {
e$connaissance_CCC_opinion <- e$connaissance_CCC_choix <- e$connaissance_CCC_posterite <- e$connaissance_CCC == "FALSE"
e$Connaissance_CCC[c(1003,1,5,31,48,114,124,144,198,238,241,278,279,297,328,351,352,354,466,471,493,508,522,524,529,530,536,543,553,558,559,618,632)] <- "hors sujet"
e$Connaissance_CCC[c(653,654,680,685,691,710,734,737,747,763,768,779,786,806,822,823,874,884,894,896,903,960,970,973)] <- "hors sujet"
e$Connaissance_CCC[c(38,108,169,188,194,220,271,292,318,348,408,443,602,670,693,733,773,791,847,855,880,907,986)] <- "faux"
e$Connaissance_CCC[c(2,1001,8,14,15,16,17,19,23,24,28,41,44,58,59,64,67,69,76,83,84,90,94,96,98,100,104,105,106,107,112,130,132,133,134,143,145,150,156,157,158,163,164,167,168,171,173,186,428,187)] <- "aucune"
e$Connaissance_CCC[c(191,193,199,206,208,210,214,227,242,248,249,251,255,264,272,274,280,294,309,312,314,316,320,321,323,324,329,331,333,338,340,341,347,349,355,357,364,367,374,376,379,386,387,391,393,394,395,397)] <- "aucune"
e$Connaissance_CCC[c(397,399,402,413,415,423,436,437,441,442,444,445,451,452,457,460,472,474,476,479,484,488,489,498)] <- "aucune"
e$Connaissance_CCC[c(500,505,506,511,512,513,515,519,520,523,527,532,533,541,546,550,556,568,571,576,577,583,584,586,589,591,594,601,605:607,609)] <- "aucune"
e$Connaissance_CCC[c(611,617,620,622,624,635,641,645,646,647,648,651,657,660,663:665,675,677,678,688,690,698,699,701,702,704,708,709,711,715:717,719,722)] <- "aucune"
e$Connaissance_CCC[c(728,736,741,744,746,751,761,762,764,769,771,784,787,798,803,811,813,832,835,837,841:843,845,850,851,853,854,859:861,863,870,871,878)] <- "aucune"
e$Connaissance_CCC[c(879,881,882,885,889,913,915,920,927,930,931,934,935,937,940:942,944,946,950,951,954,962,967,969,971,976,977,987,988,990,992,993,996,1000)] <- "aucune"
e$Connaissance_CCC[c(6,25,26,27,30,35,36,42,49,73,85,87,116,122,123,127,135,147,152,159,166,172,175,180,189,196,203,204,205,222,256,266,277,283,285,291,304,311,319,330,334,337,343,365,369,377)] <- "trop vague" # Réponse aurait pu être déduit simplement à partir du nom "CCC". Impossible de savoir ce que le répondant sait réellement, ou bien le répondant sait des choses à moitié, commet des erreurs.
e$Connaissance_CCC[c(380,384,392,398,411,420,425,428,446,450,468,470,475,477,483,491,501,503,510,526,539,561,570,575,581,596,604,610,613,621,627,633,634,638,639)] <- "trop vague"
e$Connaissance_CCC[c(642,643,650,658,662,669,674,679,689,707,723,731,735,748,755,758,765,766,774,783,796,802,805,807,820,827,856,865,888,893,897,898,900,905,914,924,925,939,948,953,958,991,995,998,999)] <- "trop vague"
e$Connaissance_CCC[c(1002,4,7,12,21,22,32,37,39,40,45,46,47,51,52,56,66,75,78,79,88,103,113,115,117,118,121,138,140,141,148,151,153,154,165,182,195,204,218,226,228,232,243,246,252,254,258,259,260,262)] <- "approximatif" # Contient un voire quelques éléments (mesures, sortition) mais mal formulés ou peu clair, ou avec une imprécision. Laisse penser que le répondant connaît mais ne dit pas tout ce qu'il sait. ex; 32
e$Connaissance_CCC[c(275,284,290,293,300,303,306,322,325,326,327,344,346,356,359,363,367,390,396,403,405,406,407,410,416,421,422,431,433,435,440,447,455,453,458,459,463,464,469,480,481,487,490,497)] <- "approximatif"
e$Connaissance_CCC[c(514,528,537,545,560,569,574,582,588,590,603,608,615,625,628,629,636,640,656,666,668,673,681,683,700,713,718,727,739,742,778,792,793)] <- "approximatif"
e$Connaissance_CCC[c(794,804,816,825,848,864,868,872,892,902,904,908,912,916,928,932,936,938,949,964,972,985,997)] <- "approximatif"
e$Connaissance_CCC[c(9,18,29,33,34,50,55,57,60,61,65,70,77,109,119,129,136,139,142,145,155,162,178,185,190,197,200,202,209,213,215,217,221,225,229,233,235,237,253,257,265,271,281,288,296,298,302,305)] <- "bonne" # Contient généralement plusieurs éléments (mesures, sortition, 150 ou date) bien articulés permettant de s'assurer que le répondant connaît la CCC. ex: 155
e$Connaissance_CCC[c(317,350,353,358,366,370,371,373,375,378,385,389,400,401,409,417,424,430,438,448,453,462,465,478,485,492,495)] <- "bonne"
e$Connaissance_CCC[c(509,517,518,535,542,544,548,551,554,562,564,566,580,592,598,599,614,672,682,697,705,706,740,756,790,812,831,862,890,899,917,918,961,982)] <- "bonne"
e$connaissance_CCC_mesures[c(1002,4,9,18,21,22,26,29,32,33,34,35,36,40,49,52,55,57,61,70,73,75,77,78,79,82,103,109,115,117,129,136,139,145,148,153,155,182,185,190,197,200,205,209,213,215,217,219)] <- "mesures" # mentionne que des propositions doivent être formulées / ont été formulées # TODO: check les 10 premières voir s'il y a des mesures spécifiques
e$connaissance_CCC_mesures[c(222,228,233,235,236,237,243,246,252,253,254,257,258,260,275,281,288,290,291,293,296,298,302,303,305,317,322,325,326,344,346,350,353,356,358,359,363,366,367,370,371)] <- "mesures"
e$connaissance_CCC_mesures[c(375,373,378,385,389,398,400,401,406,409,416,417,421,424,428,430,433,435,438,448,458,463,465,469,470,477,478,480,483,487,490,492,495,497)] <- "mesures"
e$connaissance_CCC_mesures[c(509,514,517,518,528,535,542,544,545,551,560,562,564,566,574,580,582,588,590,592,598,603,608,615,625,628,636,656,662,666,681)] <- "mesures"
e$connaissance_CCC_mesures[c(682,689,700,739,740,755,756,792,793,796,804,807,812,862,864,890,899,902,912,916,917,918,928,932,938,949,953,961,972,982,985)] <- "mesures"
e$connaissance_CCC_choix[c(213,215,217,440,447,481,535,628,643)] <- "mesures spécifiques" # (mentionne des mesures spécifiques proposées par la CCC)
e$connaissance_CCC_sortition[c(18,32,34,50,55,56,57,60,61,65,70,77,118,121,138,139,142,145,155,162,178,197,200,225,229,233,235,236,237,253,257,259,265,281,288,296,300,302,305,306,317,350,353,356,366)] <- "sortition"
e$connaissance_CCC_sortition[c(371,377,378,385,389,400,401,403,407,409,417,424,438,448,455,465,478,485,492,509,517,544,548,551,554,562,569,592,598,614)] <- "sortition"
e$connaissance_CCC_sortition[c(629,672,682,683,697,706,740,742,756,778,790,831,848,862,876,899,904,908,917,961,982)] <- "sortition"
e$connaissance_CCC_bon_francais[c(1002,7,9,12,26,27,29,33,45,50,52,55,60,65,66,70,78,82,88,109,119,121,123,124,129,140,141,142,144,145,148,151,152,155,162,167,169,194,196,202,221,236,238,246,253,254,256)] <- "bon français" # pas de faute d'orthographe, grammaire correcte, phrase élaborée (i.e. pas juste "je ne sais pas")
e$connaissance_CCC_bon_francais[c(257,259,266,277,281,283,284,288,296,302,304,317,334,346,353,356,358,363,365,366,367,370,378,385,390,396,398,405,408,410,417,430,435,443,446,464,465,481)] <- "bon français"
e$connaissance_CCC_bon_francais[c(508,517,518,542,544,545,548,551,562,566,569,570,598,608,614,620,621,638,640,650,651,654,670,674,679,682,705,706,707,722)] <- "bon français"
e$connaissance_CCC_bon_francais[c(723,740,790,793,812,831,855,862,864,865,876,880,888,897,899,902,908,916,917,924,925,932,942,961,992)] <- "bon français"
e$connaissance_CCC_opinion[c(1,5,38,39,42,45,52,66,70,75,108,122,135,138,140,142,151,162,188,195,215,241,243,259,271,279,285,352,359,384,390,428,468,475,477,485)] <- "opinion" # Exprime une opinion à propos de la CCC. ex: 1 "les vrais problemes non pas été traités". ex: 38, 42, 108, 805
e$connaissance_CCC_opinion[c(522,528,530,536,543,558,559,602,610,613,614,629,636,639,643,660,668,705,706,713,718,748,751,802,805,856,864,905,916,917,932,936,939,958,964)] <- "opinion"
e$connaissance_CCC_internet[c(453,462,642,794,825)] <- "internet"
e$connaissance_CCC_temporalite[c(29,34,47,82,139,265,431,438,453,509,517,590,599,912)] <- "temporalité" # Évoque la durée ou les dates de la CCC
e$connaissance_CCC_posterite[c(9,39,40,55,77,82,129,154,165,237,253,298,366,396,400,492,518,535,582,697,705,713,812,816,868,897,905,918,936)] <- "postérité" # Évoque la postérité réservée aux mesures proposées.
e$connaissance_CCC_150[which(c(grepl('150', e$connaissance_CCC)),34)] <- "150" # not 75, 127, 139, 182, 190, 233, 359, 458, 487, 535, 599, 603, 727,
e$connaissance_CCC_150[c(75, 127, 139, 182, 190, 233, 359, 458, 487, 535, 599, 603, 727)] <- FALSE
} # TODO: corrélation bon_français et Connaissance / âge / sexe / CSP, mesures et postérité, Connaissance écolo, etc., distribution du nombre de trucs cochés parmi 150/mesures/sortition
# Intéressant pour Laslier: 138 "Des citoyens tirés au sort qui ne représentent qu'eux-mêmes alors que nous avons des élu.e.s pour cela...", 285
# TODO: doublon 400-401? 403-407?
e$Connaissance_CCC[is.na(e$Connaissance_CCC) & e$connait_CCC!=-1] <- "aucune"
# variables_connaissance_CCC <<- c("bon_francais", "sortition", "mesures", "temporalite", "internet", "150")
# for (v in variables_connaissance_CCC) e[[paste("connaissance_CCC", v, sep="_")]] <- e[[paste("connaissance_CCC", v, sep="_")]]!="FALSE"
variables_connaissances_CCC <<- c("mesures", "choix", "sortition", "150", "temporalite", "internet", "opinion", "posterite", "bon_francais")
for (v in variables_connaissances_CCC) if (paste("connaissance_CCC", v, sep="_") %in% names(e)) e[[paste("connaissance_CCC", v, sep="_")]] <- e[[paste("connaissance_CCC", v, sep="_")]]!="FALSE"
temp <- -2*(e$Connaissance_CCC=="hors sujet") -1*(e$Connaissance_CCC=="faux") + 1*(e$Connaissance_CCC=="trop vague") + 2*(e$Connaissance_CCC=="approximatif") + 3*(e$Connaissance_CCC=="bonne")
temp[e$connaissance_CCC_internet==T] <- 2
e$Connaissance_CCC <- as.item(temp, labels = structure(c(-2:3), names=c("hors sujet", "faux", "aucune", "trop vague", "approximatif", "bonne")),
annotation="Connaissance_CCC: connaissance_CCC recodé en hors sujet/faux/aucune/approximatif/bonne (incl. internet) - Décrivez ce que vous savez de la Convention Citoyenne pour le Climat. (champ libre)")
label(e$connaissance_CCC_bon_francais) <- "connaissance_CCC_bon_francais: Indicatrice que la réponse à connaissance_CCC est constituée d'une phrase grammaticalement correcte et sans faute d'orthographe (à l'exception des phrases très courtes type 'Je ne sais pas')"
label(e$connaissance_CCC_sortition) <- "connaissance_CCC_sortition: Indicatrice que la réponse à connaissance_CCC mentionne le tirage au sort, ou du moins le caractère 'lambda' ou hétérogène des citoyens de la CCC"
label(e$connaissance_CCC_mesures) <- "connaissance_CCC_mesures: Indicatrice que la réponse à connaissance_CCC mentionne le fait que la CCC rend des propositions de mesures"
label(e$connaissance_CCC_temporalite) <- "connaissance_CCC_temporalite: Indicatrice que la réponse à connaissance_CCC mentionne un élément de la temporalité de la CCC (date de début ou de fin, ou fréquence de ses réunions)"
label(e$connaissance_CCC_internet) <- "connaissance_CCC_internet: Indicatrice que la réponse à connaissance_CCC a été copiée à partir des résultats d'une requête internet"
label(e$connaissance_CCC_150) <- "connaissance_CCC_150: Indicatrice que la réponse à connaissance_CCC mentionne le nombre de membres de la CCC (150)" # autre indicatrice qui aurait pu être intéressante : si ça mentionne que la CCC est française ou, au contraire, se méprend en parlant d'une initiative internationale
if (vague==2) {
e$gain_subjectif_original[grepl("pas affecté", e$gain_net_choix)] <- 0
e$gain_subjectif_original[!is.na(e$gain_net_gain)] <- n(e$gain_net_gain[!is.na(e$gain_net_gain)])
e$gain_subjectif_original[!is.na(e$gain_net_perte)] <- - n(e$gain_net_perte[!is.na(e$gain_net_perte)] )
e$gain_subjectif <- e$gain_subjectif_original / e$uc
label(e$gain_subjectif) <- "gain_subjectif: Gain net subjectif par UC pour la taxe avec dividende (variation en partie expliquée par trois valeurs de dividendes aléatoires: 0/110/170)."
e$gain <- pmax(-500, pmin(170, e$gain_subjectif)) # TODO: trim at 110/0 for respective values of dividend / assign NA to outliers
label(e$gain) <- "gain: Gain net subjectif par UC borné (trim) entre -500 et 170 pour la taxe avec dividende (variation en partie expliquée par trois valeurs de dividendes aléatoires: 0/110/170)."
e$gagnant_categorie <- 1*grepl("gagne", e$gain_net_choix) - 0.1*grepl("NSP", e$gain_net_choix) - 1*grepl("perd", e$gain_net_choix)
} else {
e$gagnant_categorie <- 1*(e$gagnant_categorie=="Gagnant") - 0.1*(e$gagnant_categorie=="NSP") - 1*(e$gagnant_categorie=="Perdant")
}
label(e$gagnant_categorie) <- "gagnant_categorie: ~ Ménage Gagnant/Non affecté/Perdant/NSP par taxe avec dividende"
e$gagnant_categorie <- as.item(n(e$gagnant_categorie), labels = structure(c(1:-1,-0.1), names=c('Gagnant', 'Non affecté', 'Perdant', 'NSP')), missing.values = -0.1, annotation=Label(e$gagnant_categorie))
e$Gagnant_categorie <- as.character(e$gagnant_categorie)
e$Gagnant_categorie[e$Gagnant_categorie=="NSP"] <- "NSP "
e$Gagnant_categorie <- relevel(as.factor(as.character(e$Gagnant_categorie)), "Non affecté")
if (vague==1) e$dividende <- 110
else e$label_taxe <- "taxe"
e <- e[, -c(9:17, 131, 132, 134, 136, 137, 139, 187)] # 39:49,
return(e)
}
# e2_pilote <- prepare_e2(pilote = T)
e1 <- prepare_e()
e2 <- prepare_e2()
e2$vague <- 2
e1$vague <- 1
eb <- rbind.fill(e1, e2)
for (i in names(eb)) {
if (i %in% names(e1)) label(eb[[i]]) <- label(e1[[i]])
if (i %in% names(e2)) label(eb[[i]]) <- label(e2[[i]]) }
data_connaissances_CCC <- array(0, dim=c(2, length(variables_connaissances_CCC)))
for (j in seq_along(variables_connaissances_CCC)) if ((v <- paste("connaissance_CCC", variables_connaissances_CCC[j], sep="_")) %in% names(e1)) data_connaissances_CCC[1,j] <- wtd.mean(e1[[v]]==T, weights = e1$weight)
for (j in seq_along(variables_connaissances_CCC)) if ((v <- paste("connaissance_CCC", variables_connaissances_CCC[j], sep="_")) %in% names(e2)) data_connaissances_CCC[2,j] <- wtd.mean(e2[[v]]==T, weights = e2$weight)
# for (v in variables_connaissances_CCC) print(paste(v, round(wtd.mean(e1[[paste("connaissance_CCC", v, sep="_")]]==T, weights = e1$weight), 3)))
# for (v in variables_connaissances_CCC) print(paste(v, round(2*wtd.mean(e2[[paste("connaissance_CCC", v, sep="_")]]==T, weights = e2$weight), 3)))
# (connaissances_CCC <- barres12(data = data_connaissances_CCC, miss = F, fr = F, showLegend = F, legend=c("",""), labels=c("Measures", "Specific measures", "Sortition", "150", "Temporality", "Internet", "Opinion", "Legacy", "Good french")))
(connaissances_CCC_en <- barres(data = data_connaissances_CCC[,9:1], grouped = T, rev = F, sort = F, miss=F, labels=rev(c("Measures", "Specific measures", "Sortition", "150", "Temporality", "Internet", "Opinion", "Legacy", "Good french")), legend = c('Wave 1', "Wave 2")))
(Connaissance_CCC_v12_wo_label_en <- barres12(vars = "Connaissance_CCC", color = color(7)[c(1,2,4:7)], fr =F, miss = F, labels="Synthesis of the open field", legend = c("Good", "Vague", "Too vague", "None", "Wrong", "Irrelevant")))
save_plotly(Connaissance_CCC_v12_wo_label_en)
decrit(e1$Connaissance_CCC, miss= T)
75.1752723032278/1003
0.11*0.69
decrit(e2$Connaissance_CCC, miss= T)
103.481761380742/1003
eb$Connaissance_CCC_all <-
CrossTable(as.character(eb$connait_CCC[eb$connait_CCC!=-1]), as.character(eb$Connaissance_CCC[eb$connait_CCC!=-1]), prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE) #
decrit(as.character(eb$connait_CCC))
decrit(as.character(eb$Connaissance_CCC))
eb$Connaissance_CCC_all <-
CrossTable(as.character(eb$connait_CCC), as.character(eb$Connaissance_CCC), prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE) #
decrit(as.character(eb$Connaissance_CCC[eb$connait_CCC!=-1]))
decrit(as.character(eb$connait_CCC[eb$connait_CCC!=-1]))
CrossTable(as.character(eb$connait_CCC[eb$connait_CCC!=-1]), as.character(eb$Connaissance_CCC[eb$connait_CCC!=-1]), prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE) #
CrossTable(as.character(eb$Connaissance_CCC[eb$connait_CCC!=-1]), as.character(eb$connait_CCC[eb$connait_CCC!=-1]), prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE) #
cor(eb$Connaissance_CCC[eb$connait_CCC!=-1], eb$connait_CCC[eb$connait_CCC!=-1])
cor(eb$connait_CCC, eb$avis_CCC)
decrit(eb$avis_CCC)
e <- eb
e$avis_CCC <- (e$CCC_prometteuse_climat + e$CCC_espoir_institutions + e$CCC_initiative_sincere + e$CCC_entendre_francais + e$CCC_representative
- e$CCC_inutile - e$CCC_vouee_echec - e$CCC_operation_comm - e$CCC_pour_se_defausser - e$CCC_controlee_govt)
e$avis_CCC[e$connait_CCC=='Non'] <- NA # TODO: labels, y.c. dans CCC_inutile etc. pour dire où sont NA
e$nb_avis_CCC <- (e$CCC_prometteuse_climat + e$CCC_espoir_institutions + e$CCC_initiative_sincere + e$CCC_entendre_francais + e$CCC_representative
+ e$CCC_inutile + e$CCC_vouee_echec + e$CCC_operation_comm + e$CCC_pour_se_defausser + e$CCC_controlee_govt + e$CCC_autre_choix)
e$nb_avis_CCC[e$connait_CCC=='Non'] <- NA
cor(eb$connait_CCC, eb$avis_CCC)
cor(e$connait_CCC, e$avis_CCC)
cor(e$Connaissance_CCC, e$avis_CCC) # -0.05
e$Connaissance_CCC_all <- e$Connaissance_CCC
e$Connaissance_CCC_all[e$connait_CCC==-1] <- 0
cor(e$Connaissance_CCC_all, e$avis_CCC) # -0.05
cor(eb$connait_CCC, eb$CCC_representative)
cor(eb$Connaissance_CCC_all, eb$CCC_representative) # .16
cor(eb$Connaissance_CCC_all, eb$CCC_representative) # .16
cor(e$connait_CCC, e$CCC_representative) # .16
cor(e$Connaissance_CCC_all, e$CCC_representative) # .16
cor(e$Connaissance_CCC_all, e$CCC_espoir_institutions) # .08
cor(e$connait_CCC, e$CCC_espoir_institutions) # .08
cor(e$connait_CCC, e$CCC_inutile) # .24
cor(e$Connaissance_CCC_all, e$CCC_inutile) # .10
cor(e$connait_CCC, e$CCC_controlee_govt) # .28
cor(e$Connaissance_CCC_all, e$CCC_controlee_govt) # .07
cor(e$connait_CCC, e$nb_avis_CCC) # -0.05
cor(e$Connaissance_CCC_all, e$nb_avis_CCC) # 0.05
c$profession_1s
c$profession_2s
data_causes_catastrophe <- cbind(c(0.2, 0.2, 0.58, 0.02), dataN("cause_catastrophes_1e", c, miss = F))
(causes_catastrophe_en <- barres(data=data_causes_catastrophe, miss = F, color = c(color(3), "#D3D3D3"), sort = F, rev_color = T, labels = c('Population (ADEME)', 'CCC'), legend=c("Have always taken place", "No one is sure", "Due to climate change", "NR")))
save_plotly(causes_catastrophe_en) # ADEME octobre 2019 toplot!!
getwd()
(issue_CC_en <- barres(data=cbind(rev(c(13, 50, 31, 5))/99, dataN3("issue_CC", miss = F, rev = T)), miss = F, sort = F, labels = c('Population (ADEME)', 'Population (PSE, W2)', 'Population (PSE, W1)', 'CCC'), legend=rev(c("No, certainly not", "No, probably not", "Yes, probably", "Yes, certainly"))))
save_plotly(issue_CC_en) # ADEME octobre 2019 toplot!
dataN2("effets_CC_CCC", miss = F)
(effets_CC_CCC_both_en <- barres(data=dataN2(df = list(e, ccc), "effets_CC_CCC", miss = F), miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=c("Positive effects", "Adaptation without problem", "Extremely strenuous")))
dataN2(df = list(e, ccc), "effets_CC_CCC", miss = F)
dataN2(df = list(e, c), "effets_CC_CCC", miss = F)
save_plotly(effets_CC_CCC_triple) # ADEME 2019 toplot!
(effets_CC_CCC_triple <- barres(data=cbind(dataN2("effets_CC_CCC", miss = F), c(0.02, 0.32, 0.65)/0.99), miss = F, sort = F, labels = c('CCC', 'Population (PSE)', 'Population (ADEME)'), legend=dataN2("effets_CC_CCC", miss = F, return = 'legend')))
data_effets_CC_CCC <- cbind(dataN2("effets_CC_CCC", miss = F), dataN(data = e2, "effets_CC_CCC", miss = F), c(0.02, 0.32, 0.65)/0.99)
data_effets_CC_CCC
(effets_CC_CCC_all_en <- barres(data=data_effets_CC_CCC[,4:1], miss = F, sort = F, labels = rev(c('CCC', 'Population (PSE, W1)', 'Population (PSE, W2)', 'Population (PSE, ADEME)')), legend=c("Positive effects", "Adaptation without problem", "Extremely strenuous")))
save_plotly(effets_CC_CCC_all_en)
(solution_CC_en <- barres(data = data_solution_all[4:1], color = color(7)[c(1,5:7)], grouped = T, rev = F, miss=F, labels=labels_solution_en, legend = rev(c('CCC', 'Population (PSE, W1)', 'Population (PSE, W2)', 'Population (ADEME)'))))
data_solution_all
(solution_CC_en <- barres(data = data_solution_all[,4:1], color = color(7)[c(1,5:7)], grouped = T, rev = F, miss=F, labels=labels_solution_en, legend = rev(c('CCC', 'Population (PSE, W1)', 'Population (PSE, W2)', 'Population (ADEME)'))))
save_plotly(solution_CC_en)
(solution_CC_en <- barres(data = data_solution_all[,4:1], color = color(7)[c(1,5:7)], sort = F, grouped = T, rev = F, miss=F, labels=labels_solution_en, legend = rev(c('CCC', 'Population (PSE, W1)', 'Population (PSE, W2)', 'Population (ADEME)'))))
(solution_CC_en <- barres(data = data_solution_all, color = color(7)[c(1,5:7)], grouped = T, rev = F, miss=F, labels=labels_solution_en, legend = rev(c('CCC', 'Population (PSE, W1)', 'Population (PSE, W2)', 'Population (ADEME)'))))
data_solution_all
(solution_CC_en <- barres(data = data_solution_all[4:1,], color = rev(color(7)[c(1,5:7)]), grouped = T, rev = F, miss=F, labels=labels_solution_en, legend = rev(c('CCC', 'Population (PSE, W1)', 'Population (PSE, W2)', 'Population (ADEME)'))))
data_solution_all
(politiques_1_en_v12 <- barres12(variables_politiques_1, comp = "(W2)", labels=labels_variables_politiques_1_en, legend = c("Very", "Rather", "Rather not", "Not at all"), miss=F, fr = F))
save_plotly(politiques_1_en_v12)
(politiques_2_en_v12 <- barres12(variables_politiques_2,  comp = "(W2)", labels=labels_variables_politiques_2_en, fr = F, legend = c("Completely", "Rather", "Indifferent/NR", "Not really", "Not at all"), miss=F))
(politiques_2_en_v12 <- barres12(variables_politiques_2,  comp = "(W2)", labels=labels_variables_politiques_2_en, fr = F, legend = c("Completely", "Rather", "Indifferent/NR", "Not really", "Not at all"), miss=F))
save_plotly(politiques_2_en_v12)
(problemes_invisibilises_en <- barres(data=dataN3("problemes_invisibilises", miss = F), miss = F, sort = F, rev_color = F, labels = c('Population (PSE, W2)', 'Population (PSE, W1)', 'CCC'), legend=c("Never", "Not often", "Quite often", "Very often")))
save_plotly(problemes_invisibilises_en) # « Condi^ons de vie et aspira^ons », CREDOC, janvier 2019: donne 58% d'invisibilisés (contre 61% ici)
data_satisfaction
data_satisfaction <- cbind(c(sum(dataN("satisfaction_vie_1e", c, miss = F)[1:3]), sum(dataN("satisfaction_vie_1e", c, miss = F)[4:6]), sum(dataN("satisfaction_vie_1e", c, miss = F)[7:10])), c(0.05, 0.33, 0.62))
(satisfaction_both_en <- barres(data=data_satisfaction[,2:1], miss = F, sort = F, rev_color = T, labels = c('Population (Cevipof 06/2019)', 'CCC'), legend=c('1 to 3', '4 to 6', '7 to 10')))
save_plotly(satisfaction_both_en) # Cevipof Juin 2019 toplot
(redistribution_both <- barres(data=cbind(dataN(data=e2, "redistribution", miss = F), dataN2("redistribution", miss = F)), rev = F,  miss = F, sort = F, labels = c('Population (PSE, W2)', 'Population (PSE, W1)', 'CCC'), legend=dataN2("redistribution", miss = F, return = 'legend')))
decrit(c$redistribution)
(redistribution_both <- barres(data=cbind(dataN(data=e2, "redistribution", miss = F), dataN2(df = list(e1, c), "redistribution", miss = F)), rev = F,  miss = F, sort = F, labels = c('Population (PSE, W2)', 'Population (PSE, W1)', 'CCC'), legend=dataN2("redistribution", miss = F, return = 'legend')))
save_plotly(redistribution_both)
data_importance_CCC
(importance_associatif_both <- barres(data=cbind(dataN(list(e2, e1), "importance_associatif", miss = F), data_importance_CCC[,1]), rev = F, rev_color = T,  miss = F, sort = F, labels = c('Population (PSE, W2)', 'Population (PSE, W1)', 'CCC'), legend=0:10))
dataN(list(e2, e1), "importance_associatif", miss = F)
(importance_environnement_both <- barres(data=cbind(dataN(list(e2, e1), "importance_environnement", miss = F), data_importance_CCC[,2]), rev = F, rev_color = T,  miss = F, sort = F, labels = c('Population (PSE, W2)', 'Population (PSE, W1)', 'CCC'), legend=0:10))
(importance_associatif_both <- barres(data=cbind(dataN(df=list(e2, e1), "importance_associatif", miss = F), data_importance_CCC[,1]), rev = F, rev_color = T,  miss = F, sort = F, labels = c('Population (PSE, W2)', 'Population (PSE, W1)', 'CCC'), legend=0:10))
(importance_associatif_both <- barres(data=cbind(dataN2(df=list(e2, e1), "importance_associatif", miss = F), data_importance_CCC[,1]), rev = F, rev_color = T,  miss = F, sort = F, labels = c('Population (PSE, W2)', 'Population (PSE, W1)', 'CCC'), legend=0:10))
save_plotly(importance_associatif_both)
(importance_environnement_both <- barres(data=cbind(dataN2(df=list(e2, e1), "importance_environnement", miss = F), data_importance_CCC[,2]), rev = F, rev_color = T,  miss = F, sort = F, labels = c('Population (PSE, W2)', 'Population (PSE, W1)', 'CCC'), legend=0:10))
save_plotly(importance_environnement_both)
(importance_confort_both <- barres(data=cbind(dataN2(df=list(e2, e1), "importance_confort", miss = F), data_importance_CCC[,3]), rev = F, rev_color = T,  miss = F, sort = F, labels = c('Population (PSE, W2)', 'Population (PSE, W1)', 'CCC'), legend=0:10))
save_plotly(importance_confort_both)
data_qualite_enfant_all
(qualite_enfant_en <- barres(data = data_qualite_enfant_all[3:1,], color = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=labels_qualite_enfant_en, legend = rev(c('CCC', 'Population (PSE, W1)', "Population (PSE, W2)"))))
(qualite_enfant_en <- barres(data = data_qualite_enfant_all[3:1,], color = rev(color(4)[c(1,3,4)]), grouped = T, rev = F, miss=F, labels=labels_qualite_enfant_en, legend = rev(c('CCC', 'Population (PSE, W1)', "Population (PSE, W2)"))))
(qualite_enfant_en <- barres(data = data_qualite_enfant_all[3:1,], color = rev(color(4)[c(1,3,4)]), grouped = T, rev = F, miss=F, labels=labels_qualite_enfant_en, legend = rev(c('CCC', 'Population (PSE, W1)', "Population (PSE, W2)"))))
save_plotly(qualite_enfant_en)
data_ecole
(ecole_en <- barres(data=data_ecole[,2:1], miss = F, color = c(color(2), "#D3D3D3"), sort = F, rev_color = T, labels = c('Population (ADEME)', 'CCC'), legend=c("Discipline and effort", "Sharp and critical mind", "NR")))
save_plotly(ecole_en) # ADEME octobre 2019 toplot!!
getwd()
library(dplyr)
library("xlsx")
# Population and code postal
data <-read.csv("../data/correspondance-code-insee-code-postal.csv", sep=';')
getwd()
setwd(C:/Users/afabre/Documents/www/oecd_climate/data)
setwd("C:/Users/afabre/Documents/www/oecd_climate/data")
# Population and code postal
data <-read.csv("../data/correspondance-code-insee-code-postal.csv", sep=';')
# Aires Urbaines (AU) and classification
data2<- read.xlsx2(file="../data/AU2020.xlsx", sheetIndex=1, header=TRUE, colClasses="character")
data<-select(data, Code.INSEE, Code.Postal, Population)
data <- data %>%
rename(CODGEO =  Code.INSEE , Code_Postal= Code.Postal, Population_commune = Population)
library(dplyr)
data <- data %>%
rename(CODGEO =  Code.INSEE , Code_Postal= Code.Postal, Population_commune = Population)
data <- data %>%  rename(CODGEO =  Code.INSEE , Code_Postal= Code.Postal, Population_commune = Population)
data <- data %>% select(Code.INSEE, Code.Postal, Population)
data <- data %>%  rename(CODGEO =  Code.INSEE , Code_Postal= Code.Postal, Population_commune = Population)
data <- data %>% select(Code.INSEE, Code.Postal, Population) %>%  rename(CODGEO =  Code.INSEE , Code_Postal= Code.Postal, Population_commune = Population)
data <- data %>%
select(Code.INSEE, Code.Postal, Population) %>%
rename(CODGEO =  Code.INSEE , Code_Postal= Code.Postal, Population_commune = Population)
data <- data %>%
select(Code.INSEE, Code.Postal, Population) %>%
rename(CODGEO =  "Code.INSEE ", Code_Postal= Code.Postal, Population_commune = Population)
data <- data %>%
select(Code.INSEE, Code.Postal, Population) %>%
rename(Code_Postal= Code.Postal, Population_commune = Population)
data <- data %>%
select(Code.INSEE, Code.Postal, Population) %>%
rename(Code_Postal= Code.Postal)
library(dplyr)
library("xlsx")
# Sources
# Data1: https://public.opendatasoft.com/explore/dataset/correspondance-code-insee-code-postal/table/
# Data2: https://www.insee.fr/fr/information/2115011 (1 January 2020)
# Data3: same as above sheet "ARM" + Wikipedia for population
# Population and code postal
data <-read.csv("../data/correspondance-code-insee-code-postal.csv", sep=';')
# Aires Urbaines (AU) and classification
data2<- read.xlsx2(file="../data/AU2020.xlsx", sheetIndex=1, header=TRUE, colClasses="character")
data <- data %>%
select(Code.INSEE, Code.Postal, Population) %>%
rename(CODGEO =  "Code.INSEE ", Code_Postal= Code.Postal, Population_commune = Population)
detach("package:memisc", unload = TRUE)
library(dplyr)
data <- data %>%
select(Code.INSEE, Code.Postal, Population) %>%
rename(CODGEO =  "Code.INSEE ", Code_Postal= Code.Postal, Population_commune = Population)
rename
detach("package:plyr", unload = TRUE)
detach("package:rcompanion", unload = TRUE)
detach("package:reshape2", unload = TRUE)
detach("package:ivmodel", unload = TRUE)
detach("package:reshape2", unload = TRUE)
detach("package:plyr", unload = TRUE)
library(dplyr)
rename
data <- data %>%
select(Code.INSEE, Code.Postal, Population) %>%
rename(CODGEO =  "Code.INSEE ", Code_Postal= Code.Postal, Population_commune = Population)
data <- data %>%
select(Code.INSEE, Code.Postal, Population) %>%
rename(CODGEO =  Code.INSEE, Code_Postal= Code.Postal, Population_commune = Population)
data2 <- merge(data2, data[,c("CODGEO", "Code_Postal", "Population_commune")], by="CODGEO")
# Aires Urbaines (AU) and classification
data2<- read.xlsx2(file="../data/AU2020.xlsx", sheetIndex=1, header=TRUE, colClasses="character")
# Aires Urbaines (AU) and classification
data2<- read.xlsx(file="../data/AU2020.xlsx", sheetIndex=1, header=TRUE, colClasses="character")
# Aires Urbaines (AU) and classification
data2<- read.xlsx2(file="../data/AU2020.xlsx", sheetIndex=1, header=TRUE, startRow = 6, colClasses="character")
# Aires Urbaines (AU) and classification
data2<- read.xlsx(file="../data/AU2020.xlsx", sheetIndex=1, header=TRUE, startRow = 6, colClasses="character")
# Aires Urbaines (AU) and classification
data2<- read.xlsx2(file="../data/AU2020.xlsx", sheetIndex=1, header=TRUE, startRow = 6)
# Aires Urbaines (AU) and classification
data2<- read.xlsx2(file="../data/AU2020.xlsx", sheetIndex=1, header=TRUE, startRow = 6, colClasses="character")[,1:4]
# Aires Urbaines (AU) and classification
data2<- read.xlsx(file="../data/AU2020.xlsx", sheetIndex=1, header=TRUE, startRow = 6)
# Aires Urbaines (AU) and classification
data2<- read.xlsx2(file="../data/AU2020.xlsx", sheetIndex=1, header=TRUE, colClasses="character")
# Aires Urbaines (AU) and classification
data2<- read.csv(file="../data/AU2020.csv")
# Aires Urbaines (AU) and classification
data2<- read.csv2(file="../data/AU2020.csv")
# Aires Urbaines (AU) and classification
data2<- read.csv2(file="../data/AU2020.csv", encoding = "utf8")
# Aires Urbaines (AU) and classification
data2<- read.csv2(file="../data/AU2020.csv", encoding = "UTF-8")
data2 <- merge(data2, data[,c("CODGEO", "Code_Postal", "Population_commune")], by="CODGEO")
# Aires Urbaines (AU) and classification
data2<- read.csv2(file="../data/AU2020.csv", encoding = "UTF-8")
data2 <- merge(data2, data[,c("CODGEO", "Code_Postal", "Population_commune")], by="CODGEO")
data2<-select(data2, LIBGEO, LIBAU2010, CODGEO, Code_Postal, Population_commune, CATAEU2010)
data2$Population_commune<-as.character(data2$Population_commune)
# Data for Paris, Lyon, Marseille (missing in data2)
data3<- read.xlsx2(file="../data/AU2020_2.xlsx", sheetIndex=1, header=TRUE, colClasses="character")
data3[data3$LIBAU2010=="Marseille",2] <- "Marseille - Aix-en-Provence"
data2 <- bind_rows(data2, data3)
names(data2)
names(data3)
# Data for Paris, Lyon, Marseille (missing in data2)
data3<- read.xlsx2(file="../data/AU2020_2.xlsx", sheetIndex=1, header=TRUE)
data3[data3$LIBAU2010=="Marseille",2] <- "Marseille - Aix-en-Provence"
data2 <- bind_rows(data2, data3)
data2$CATAEU2010<-as.character(data2$CATAEU2010)
data2 <- bind_rows(data2, data3)
data2$Population_commune <- as.double(data2$Population_commune)
data2$CATAEU2010 <- as.integer(data2$CATAEU2010)
# Get population of AUs by summing the populations of communes within the same AU
Pop_AU<-data2 %>%
group_by(LIBAU2010) %>%
summarise_at(vars(Population_commune),
list(Population_AU = sum))
# Get population of AUs by summing the populations of communes within the same AU
Pop_AU<-data2 %>%
group_by(LIBAU2010) %>%
summarise_at(dplyr::vars(Population_commune),
list(Population_AU = sum))
data2 <- merge(data2, Pop_AU[,c("Population_AU", "LIBAU2010")], by="LIBAU2010")
data2 <- data2 %>%
rename(Aire_Urbaine =  LIBAU2010, Commune = LIBGEO, Code_INSEE = CODGEO, Zone_INSEE = CATAEU2010)
data2 <- data2 %>%
mutate(Zone_GP = case_when(
Zone_INSEE == 111 ~ "GP",
Zone_INSEE == 112 ~ "Couronne GP",
TRUE ~ "Other"
))
data2 <- data2 %>%
mutate(Zone_Category = case_when(
Zone_INSEE %in% c(111, 211, 221)  ~ "Pole",
Zone_INSEE %in% c(112, 212, 222) ~ "Couronne",
Zone_INSEE %in% c(120, 300) ~ "Multipole",
Zone_INSEE == 400 ~ "Isole"
))
data2 <- data2 %>%
mutate(Zone_Category = case_when(
Zone_INSEE %in% c(111, 211, 221)  ~ "Pole",
Zone_INSEE %in% c(112, 212, 222) ~ "Couronne",
Zone_INSEE %in% c(120, 300, 400) ~ "Isolé ou multipolarisé"
))
data2 <- data2 %>%
mutate(Grand_pole = case_when(
Zone_INSEE %in% c(111)  ~ TRUE,
TRUE ~ FALSE
))
write.csv(data2, "FR_aires_urbaines_2020.csv", row.names = TRUE)
Pop_AU
Pop_cat <- data2 %>%
group_by(Zone_Category) %>%
summarise_at(dplyr::vars(Population_commune),
list(Pop_cat = sum))
Pop_cat
data2 <- data2 %>%
mutate(Zone_GP = case_when(
Zone_INSEE == 111 ~ "Grand Pôle",
Zone_INSEE == 112 ~ "Couronne GP",
TRUE ~ "Other"
))
data2 <- data2 %>%
mutate(Zone_Category3 = case_when(
Zone_INSEE %in% c(111, 211, 221)  ~ "Pôle",
Zone_INSEE %in% c(112, 212, 222) ~ "Couronne",
Zone_INSEE %in% c(120, 300) ~ "Multipôlarisé",
Zone_INSEE == 400 ~ "Isolé"
))
data2 <- data2 %>%
mutate(Zone_Category = case_when(
Zone_INSEE %in% c(111, 211, 221)  ~ "Pôle",
Zone_INSEE %in% c(112, 212, 222) ~ "Couronne",
Zone_INSEE %in% c(120, 300, 400) ~ "Isolé ou multipolarisé"
))
data2 <- data2 %>%
mutate(Grand_pole = case_when(
Zone_INSEE %in% c(111)  ~ TRUE,
TRUE ~ FALSE
))
Pop_cat <- data2 %>%
group_by(Zone_Category) %>% # Grand_pole Zone_Category Zone_Category3 Zone_GP
summarise_at(dplyr::vars(Population_commune),
list(Pop_cat = sum))
Pop_cat
Pop_cat <- data2 %>%
group_by(Zone_Category3) %>% # Grand_pole Zone_Category Zone_Category3 Zone_GP
summarise_at(dplyr::vars(Population_commune),
list(Pop_cat = sum))
Pop_cat <-
data2 %>%
group_by(Zone_Category3) %>% # Grand_pole Zone_Category Zone_Category3 Zone_GP
summarise_at(dplyr::vars(Population_commune),
list(Pop_cat = sum))
(Pop_cat <- data2 %>%
group_by(Zone_Category3) %>% # Grand_pole Zone_Category Zone_Category3 Zone_GP
summarise_at(dplyr::vars(Population_commune),
list(Pop_cat = sum)))
(Pop_cat <- data2 %>%
group_by(Zone_GP) %>% # Grand_pole Zone_Category Zone_Category3 Zone_GP
summarise_at(dplyr::vars(Population_commune),
list(Pop_cat = sum)))
(Pop_cat <- data2 %>%
group_by(Grand_pole) %>% # Grand_pole Zone_Category Zone_Category3 Zone_GP
summarise_at(dplyr::vars(Population_commune),
list(Pop_cat = sum)))
(cause_CC_CCC_en <- barres(data=dataN3("cause_CC_CCC", miss = F, rev = T), miss = F, sort = F, labels = c('Population (PSE, W2)', 'Population (PSE, W1)', 'CCC'), legend=c("Only anthropogenic", "Mostly anthropogenic", "As much", "Mostly natural", "Only natural", "Does not exist")))
save_plotly(cause_CC_CCC_en)
getwd()
save_plotly(cause_CC_CCC)
(France_CC_en <- barres(data=dataN3("France_CC", miss=F, rev = T), miss = F, sort = F, labels = c('Population (PSE, W2)', 'Population (PSE, W1)', 'CCC'), legend=c("Yes", "NR", "No")))
save_plotly(France_CC_en)
data_obstacles
(obstacles_en <- barres(data = data_obstacles[3:1,], color = rev(color(4)[c(1,3,4)]), grouped = T, rev = F, miss=F, labels=c("Lobbies", "Lack of political will", "Lack of cooperation between countries", "Inequalities", "Uncertainties of scientific community", "Demography", "Lack of alternative technologies"), legend = rev(c('CCC', 'Population (PSE, W1)', 'Population (PSE, W2)'))))
save_plotly(obstacles_en)
(echelle_politique_CC_en <- barres(data=dataN3("echelle_politique_CC", miss = F), miss = F, sort = F, labels = c('Population (PSE, W2)', 'Population (PSE, W1)', 'CCC'), legend=c("At all scales", "Global", "European", "National", "Local")))
save_plotly(echelle_politique_CC_en)
decrit(c$solution_CC_traite)
data_solution_good
variables_solution
(solution_CC_en <- barres(data = data_solution_all[4:1,], color = rev(color(7)[c(1,5:7)]), grouped = T, rev = F, miss=F, labels=labels_solution_en, legend = rev(c('CCC', 'Population (PSE, W1)', 'Population (PSE, W2)', 'Population (ADEME)'))))
save_plotly(solution_CC_en)
(politiques_1_en_v12 <- barres12(variables_politiques_1, comp = "(PSE, W2)", orig = "(PSE, W1)", labels=labels_variables_politiques_1_en, legend = c("Very", "Rather", "Rather not", "Not at all"), miss=F, fr = F))
labels_variables_politiques_1_en
(politiques_1_en_v12 <- barres12(variables_politiques_1, comp = "(PSE, W2)", orig = "(PSE, W1)", labels=labels_variables_politiques_1_en, legend = c("Very", "Rather", "Rather not", "Not at all"), miss=F, fr = F))
(politiques_1_en_v12 <- barres12(variables_politiques_1, comp = "(PSE, W2)", v1 = "(PSE, W1)", labels=labels_variables_politiques_1_en, legend = c("Very", "Rather", "Rather not", "Not at all"), miss=F, fr = F))
save_plotly(politiques_1_en_v12)
(politiques_2_en_v12 <- barres12(variables_politiques_2,  comp = "(PSE, W2)", v1 = "(PSE, W1)", labels=labels_variables_politiques_2_en, fr = F, legend = c("Completely", "Rather", "Indifferent/NR", "Not really", "Not at all"), miss=F))
save_plotly(politiques_2_en_v12)
labels_variables_referendum_v2_en
labels_variables_referendum_en
(referendum_en_v12 <- barres(data = cbind(dataKN(vars = new_variables_referendum, data=e2, rev = T), barres12(variables_referendum, return="data", comp = "(PSE, W2)", v1 = "(PSE, W1)")), sort=F, fr=F, miss=T, labels=c(new_labels_variables_referendum_en, barres12(variables_referendum, labels=labels_variables_referendum_en, return="labels", fr=F)), legend=c("Yes", "Blank", "No", "NR")))
new_labels_variables_referendum_en <- c("The inscription in the Constitution that \n the preservation of the environment comes first (PSE, W2)", "The recognition of the crime of 'ecocide' (W2)", "The inclusion in the Constitution of the preservation of biodiversity,\n the environment and the fight against climate change (PSE, W2)")
labels_variables_referendum_v2_en <- c(labels_variables_referendum_en, new_labels_variables_referendum_en)
(referendum_en_v12 <- barres(data = cbind(dataKN(vars = new_variables_referendum, data=e2, rev = T), barres12(variables_referendum, return="data")), sort=F, fr=F, miss=T, labels=c(new_labels_variables_referendum_en, barres12(variables_referendum, labels=labels_variables_referendum_en, return="labels", fr=F, comp = "(PSE, W2)", v1 = "(PSE, W1)")), legend=c("Yes", "Blank", "No", "NR")))
barres12(variables_referendum, labels=labels_variables_referendum_en, return="labels", fr=F, comp = "(PSE, W2)", v1 = "(PSE, W1)"))
barres12(variables_referendum, labels=labels_variables_referendum_en, return="labels", fr=F, comp = "(PSE, W2)", v1 = "(PSE, W1)")
(referendum_en_v12 <- barres(data = cbind(dataKN(vars = new_variables_referendum, data=e2, rev = T), barres12(variables_referendum, return="data")), sort=F, fr=F, miss=T, labels=c(new_labels_variables_referendum_en, barres12(variables_referendum, labels=labels_variables_referendum_en, return="labels", fr=F, comp = "(PSE, W2)", v1 = "(PSE, W1)")), legend=c("Yes", "Blank", "No", "NR")))
barres12 <- function(vars, df=list(e1, e2), labels, legend=hover, comp = "V2", v1 = NULL, miss=T, weights = T, fr=T, rev=T, color=c(), rev_color = FALSE, hover=legend, sort=TRUE, thin=T, return="", showLegend=T) {
if (missing(vars) & missing(legend) & missing(hover)) warning('hover or legend must be given')
if (!missing(miss)) nsp <- miss
data1 <- dataKN(vars, data=df[[1]], miss=miss, weights = weights, return = "", fr=fr, rev=rev)
if (missing(legend) & missing(hover)) {
if (is.logical(df[[1]][[vars[1]]])) hover <- legend <- labels # data1(var = vars[1], data=df, weights = weights) # before: uncommented and "else" next line
else hover <- legend <- dataN(var = vars[1], data=df[[1]], miss=miss, weights = weights, return = "legend", fr=fr, rev_legend = rev) }
agree <- order_agree(data = data1, miss = miss)
if (is.logical(df[[1]][[vars[1]]])) agree <- rev(agree)
if (return=="data") return(data12(vars[agree], df = df, miss=miss, weights = weights, fr=fr, rev=rev, return = ""))
else if (return=="labels") return(labels12(labels[agree], en = !fr, comp = comp, v1=v1))
else if (return=="legend") return(legend)
else return(barres(data = data12(vars[agree], df = df, miss=miss, weights = weights, fr=fr, rev=rev, return = ""),
labels=labels12(labels[agree], en = !fr, comp = comp, v1=v1), legend=legend,
miss=miss, weights = weights, fr=fr, rev=rev, color=color, rev_color = rev_color, hover=hover, sort=F, thin=thin, showLegend=showLegend))
}
(referendum_en_v12 <- barres(data = cbind(dataKN(vars = new_variables_referendum, data=e2, rev = T), barres12(variables_referendum, return="data")), sort=F, fr=F, miss=T, labels=c(new_labels_variables_referendum_en, barres12(variables_referendum, labels=labels_variables_referendum_en, return="labels", fr=F, comp = "(PSE, W2)", v1 = "(PSE, W1)")), legend=c("Yes", "Blank", "No", "NR")))
save_plotly(referendum_en_v12)
cbind(dataN2("confiance_gens", miss = F), c(0.65, 0.35))
decrit(e1$confiance_gens)
decrit(e2$confiance_gens)
(confiance_gens_triple_en <- barres(data=cbind(dataN2("confiance_gens", miss = F), dataN("confiance_gens", data = e2, miss = F), c(0.65, 0.35))[,3:1], miss = F, sort = F, rev_color = T, labels = rev(c('CCC', 'Population (PSE, W1)', 'Population (PSE, W2)', 'Population (Cevipof 04/2020)')), legend=c("Mistrust", "Trust"), fr = F))
dataN("confiance_gens", data = e2, miss = F)
(confiance_gens_triple_en <- barres(data=cbind(dataN2("confiance_gens", miss = F), dataN("confiance_gens", data = e2, miss = F), c(0.65, 0.35))[,4:1], miss = F, sort = F, rev_color = T, labels = rev(c('CCC', 'Population (PSE, W1)', 'Population (PSE, W2)', 'Population (Cevipof 04/2020)')), legend=c("Mistrust", "Trust"), fr = F))
save_plotly(confiance_gens_triple_en) # toplot!
(confiance_sortition_en <- barres(data=dataN3("confiance_sortition", miss = F, rev = T), sort = F, miss = F, labels = c('Population (PSE, W2)', 'Population (PSE, W1)', 'CCC'), legend=rev(c("Not at all confident", "Rather not confident", "Rather confident", "Completely confident"))))
save_plotly(confiance_sortition_en)
(connait_CCC_en <- barres12(vars = "connait_CCC", miss = F, fr=F, comp = "(PSE, W2)", v1 = "(PSE, W1)", labels="Have you heard of the \n Citizens'Convention for Climate?", legend=c("Yes, a lot", "Yes, somewhat", "Vaguely", "No")))
(connait_CCC_en)
(Connaissance_CCC_v12_wo_label_en <- barres12(vars = "Connaissance_CCC", color = color(7)[c(1,2,4:7)], fr =F, miss = F, comp = "(PSE, W2)", v1 = "(PSE, W1)", labels="Synthesis of the open field", legend = c("Good", "Vague", "Too vague", "None", "Wrong", "Irrelevant")))
save_plotly(Connaissance_CCC_v12_wo_label_en)
(sait_CCC_devoilee_en <- barres12(vars = "sait_CCC_devoilee", miss = F, fr = F, labels="Measures proposed by the CCC<br>have already been unveiled", legend=c("Yes", "Not sure", "No")))
(sait_CCC_devoilee_en <- barres12(vars = "sait_CCC_devoilee", miss = F, fr = F, comp = "(PSE, W2)", v1 = "(PSE, W1)", labels="Measures proposed by the CCC<br>have already been unveiled", legend=c("Yes", "Not sure", "No")))
save_plotly(sait_CCC_devoilee_en)
(pour_sortition_en <- barres12("pour_sortition", rev = F, fr=F, legend = c("Yes ", "No ", "PNR"), comp = "(PSE, W2)", v1 = "(PSE, W1)", labels = "For an assembly made up of 150 citizens drawn by lot,\n with a right of veto on the texts voted in the Parliament", miss=T))
save_plotly(pour_sortition_en) # Oui Non
(cause_CC_CCC_en <- barres(data=dataN3("cause_CC_CCC", miss = F, rev = T), miss = F, sort = F, labels = c('Population (PSE, W2)', 'Population (PSE, W1)', 'CCC'), legend=c("Only anthropogenic", "Mostly anthropogenic", "As much", "Mostly natural", "Only natural", "Does not exist")))
save_plotly(cause_CC_CCC_en)
(confiance_sortition_en <- barres(data=dataN3("confiance_sortition", miss = F, rev = T), sort = F, miss = F, labels = c('Population (PSE, W2)', 'Population (PSE, W1)', 'CCC'), legend=rev(c("Not at all confident", "Rather not confident", "Rather confident", "Completely confident"))))
save_plotly(confiance_sortition_en)
(connait_CCC_en <- barres12(vars = "connait_CCC", miss = F, fr=F, comp = "(PSE, W2)", v1 = "(PSE, W1)", labels="Have you heard of the \n Citizens'Convention for Climate?", legend=c("Yes, a lot", "Yes, somewhat", "Vaguely", "No")))
save_plotly(connait_CCC_en)
decrit(c$cause_CC_CCC)
decrit(e$cause_CC_CCC)
decrit(e$cause_CC_CCC)
package("memisc")
decrit(e$cause_CC_CCC)
describe(e$cause_CC_CCC)
Label(e$cause_CC_CCC)
Label(c$pour_taxe_vehicules_1e)
Label(c$pour_taxe_transports_2e)
Label(c$pour_taxe_distance_1e)
Label(e$CCCC_representative)
Label(e$CCC_representative)
Label(e$representativite_CCC)
install.packages("pillar")
install.packages("pillar")
install.packages("pillar")
