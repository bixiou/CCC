# imputer le dividende escompté à partir de confiance_gouv et déduire le % de perdants que ça explique
impute_dividende_escompte <- function(escompte_moitie = 0.5, confiance_gouv = e1$confiance_gouvernement) { # un escompte_moitie de 0.6 signifie que 60% du dividende est pris en compte par ceux qui répondent "À moitié"
escompte_dividende_by_confiance_gouv <- rep(NA, 6)
names(escompte_dividende_by_confiance_gouv) <- c(labels(e1$confiance_gouvernement))
for (i in c(labels(e1$confiance_gouvernement))) {
escompte_dividende_by_confiance_gouv[i] <- sum((((e1$confiance_dividende=="Oui") * e1$weight)[e1$confiance_gouvernement==i] +
escompte_moitie * ((e1$confiance_dividende=="À moitié") * e1$weight)[e1$confiance_gouvernement==i]), na.rm=T)/sum((!is.na(e1$confiance_dividende) * e1$weight)[e1$confiance_gouvernement==i]) }
# data[["dividende_escompte_impute"]] <- escompte_dividende_by_confiance_gouv[data[["confiance_gouvernement"]]]
print('z')
return(escompte_dividende_by_confiance_gouv[confiance_gouv])
}
e1$dividende_escompte_impute <- impute_dividende_escompte()
escompte_dividende_by_confiance_gouv[c("Toujours")]
escompte_dividende_by_confiance_gouv[c("Toujours", "Parfois")]
# imputer le dividende escompté à partir de confiance_gouv et déduire le % de perdants que ça explique
impute_dividende_escompte <- function(escompte_moitie = 0.5, confiance_gouv = e1$confiance_gouvernement) { # un escompte_moitie de 0.6 signifie que 60% du dividende est pris en compte par ceux qui répondent "À moitié"
escompte_dividende_by_confiance_gouv <- rep(NA, 6)
names(escompte_dividende_by_confiance_gouv) <- c(labels(e1$confiance_gouvernement))
for (i in c(labels(e1$confiance_gouvernement))) {
escompte_dividende_by_confiance_gouv[i] <- sum((((e1$confiance_dividende=="Oui") * e1$weight)[e1$confiance_gouvernement==i] +
escompte_moitie * ((e1$confiance_dividende=="À moitié") * e1$weight)[e1$confiance_gouvernement==i]), na.rm=T)/sum((!is.na(e1$confiance_dividende) * e1$weight)[e1$confiance_gouvernement==i]) }
# data[["dividende_escompte_impute"]] <- escompte_dividende_by_confiance_gouv[data[["confiance_gouvernement"]]]
return(escompte_dividende_by_confiance_gouv)
}
e1$dividende_escompte_impute <- impute_dividende_escompte()[e1$confiance_gouvernement]
head(e1$confiance_gouvernement)
escompte_dividende_by_confiance_gouv[c("Toujours", "Parfois", NA)]
escompte_dividende_by_confiance_gouv <- impute_dividende_escompte()
escompte_dividende_by_confiance_gouv
impute_dividende_escompte()
e1$dividende_escompte_impute <- impute_dividende_escompte()[as.character(e1$confiance_gouvernement)]
# imputer le dividende escompté à partir de confiance_gouv et déduire le % de perdants que ça explique
impute_dividende_escompte <- function(escompte_moitie = 0.5, data_modified = e1) { # un escompte_moitie de 0.6 signifie que 60% du dividende est pris en compte par ceux qui répondent "À moitié"
escompte_dividende_by_confiance_gouv <- rep(NA, 6)
names(escompte_dividende_by_confiance_gouv) <- c(labels(e1$confiance_gouvernement))
for (i in c(labels(e1$confiance_gouvernement))) {
escompte_dividende_by_confiance_gouv[i] <- sum((((e1$confiance_dividende=="Oui") * e1$weight)[e1$confiance_gouvernement==i] +
escompte_moitie * ((e1$confiance_dividende=="À moitié") * e1$weight)[e1$confiance_gouvernement==i]), na.rm=T)/sum((!is.na(e1$confiance_dividende) * e1$weight)[e1$confiance_gouvernement==i]) }
data_modified[["dividende_escompte_impute"]] <<- escompte_dividende_by_confiance_gouv[as.character(data_modified[["confiance_gouvernement"]])]
return(escompte_dividende_by_confiance_gouv)
}
impute_dividende_escompte(data_modified = e2)
impute_dividende_escompte(data_modified = eb)
# imputer le dividende escompté à partir de confiance_gouv et déduire le % de perdants que ça explique
impute_dividende_escompte <- function(escompte_moitie = 0.5, data_modified = e1) { # un escompte_moitie de 0.6 signifie que 60% du dividende est pris en compte par ceux qui répondent "À moitié"
escompte_dividende_by_confiance_gouv <- rep(NA, 6)
names(escompte_dividende_by_confiance_gouv) <- c(labels(e1$confiance_gouvernement))
for (i in c(labels(e1$confiance_gouvernement))) {
escompte_dividende_by_confiance_gouv[i] <- sum((((e1$confiance_dividende=="Oui") * e1$weight)[e1$confiance_gouvernement==i] +
escompte_moitie * ((e1$confiance_dividende=="À moitié") * e1$weight)[e1$confiance_gouvernement==i]), na.rm=T)/sum((!is.na(e1$confiance_dividende) * e1$weight)[e1$confiance_gouvernement==i]) }
data_modified[["dividende_escompte_impute"]] <<- escompte_dividende_by_confiance_gouv[as.character(data_modified[["confiance_gouvernement"]])]
return(escompte_dividende_by_confiance_gouv)
}
impute_dividende_escompte(data_modified = e1)
# imputer le dividende escompté à partir de confiance_gouv et déduire le % de perdants que ça explique
impute_dividende_escompte <- function(escompte_moitie = 0.5) { # un escompte_moitie de 0.6 signifie que 60% du dividende est pris en compte par ceux qui répondent "À moitié"
escompte_dividende_by_confiance_gouv <- rep(NA, 6)
names(escompte_dividende_by_confiance_gouv) <- c(labels(e1$confiance_gouvernement))
for (i in c(labels(e1$confiance_gouvernement))) {
escompte_dividende_by_confiance_gouv[i] <- sum((((e1$confiance_dividende=="Oui") * e1$weight)[e1$confiance_gouvernement==i] +
escompte_moitie * ((e1$confiance_dividende=="À moitié") * e1$weight)[e1$confiance_gouvernement==i]), na.rm=T)/sum((!is.na(e1$confiance_dividende) * e1$weight)[e1$confiance_gouvernement==i]) }
# data_modified[["dividende_escompte_impute"]] <<- escompte_dividende_by_confiance_gouv[as.character(data_modified[["confiance_gouvernement"]])]
return(escompte_dividende_by_confiance_gouv)
}
e1$dividende_escompte_impute <- impute_dividende_escompte()[as.character(e1$confiance_gouvernement)]
e2$dividende_escompte_impute <- impute_dividende_escompte()[as.character(e2$confiance_gouvernement)]
eb$dividende_escompte_impute <- impute_dividende_escompte()[as.character(eb$confiance_gouvernement)]
decrit("dividende_escompte_impute", data=e1, which = e1$confiance_gouvernement=="Parfois")
decrit("confiance_dividende", data=e1, which = e1$confiance_gouvernement=="Parfois")
0.082+0.231
decrit("confiance_dividende", data=e1)
decrit("confiance_dividende", data=e2)
decrit("confiance_gouvernement", data=e1)
decrit("confiance_gouvernement", data=e2)
decrit("dividende_escompte_impute", data=e1)
decrit("dividende_escompte_impute", data=e2)
decrit("dividende_escompte_impute", data=eb)
eb$dividende_escompte_impute <- impute_dividende_escompte()[as.character(eb$confiance_gouvernement)]
decrit("dividende_escompte_impute", data=eb)
decrit(eb$confiance_gouvernement)
# imputer le dividende escompté à partir de confiance_gouv et déduire le % de perdants que ça explique
impute_dividende_escompte <- function(escompte_moitie = 0.6, escompte_non = 0.2) { # un escompte_moitie de 0.6 signifie que 60% du dividende est pris en compte par ceux qui répondent "À moitié"
escompte_dividende_by_confiance_gouv <- rep(NA, 6)
names(escompte_dividende_by_confiance_gouv) <- c(labels(e1$confiance_gouvernement))
for (i in c(labels(e1$confiance_gouvernement))) {
escompte_dividende_by_confiance_gouv[i] <- sum((((e1$confiance_dividende=="Oui") * e1$weight)[e1$confiance_gouvernement==i] +
escompte_moitie * ((e1$confiance_dividende=="À moitié") * e1$weight)[e1$confiance_gouvernement==i]), na.rm=T)/sum((!is.na(e1$confiance_dividende) * e1$weight)[e1$confiance_gouvernement==i]) }
# data_modified[["dividende_escompte_impute"]] <<- escompte_dividende_by_confiance_gouv[as.character(data_modified[["confiance_gouvernement"]])]
return(escompte_dividende_by_confiance_gouv)
}
impute_dividende_escompte()
e1$dividende_escompte_impute <- impute_dividende_escompte()[as.character(e1$confiance_gouvernement)]
e2$dividende_escompte_impute <- impute_dividende_escompte()[as.character(e2$confiance_gouvernement)]
eb$dividende_escompte_impute <- impute_dividende_escompte()[as.character(eb$confiance_gouvernement)]
decrit("dividende_escompte_impute", data=e1)
decrit(impute_dividende_escompte(escompte_moitie = 0.7, escompte_non = 0.3)[as.character(e1$confiance_gouvernement)])
0.46*0 + 0.42*0.5 + 0.12
0.46*0.3 + 0.42*0.7 + 0.12
0.46*0.3 + 0.42*0.8 + 0.12
0.46*0 + 0.42*1 + 0.12
decrit(impute_dividende_escompte(escompte_moitie = 0.8, escompte_non = 0.3)[as.character(e1$confiance_gouvernement)])
summary(lm(confiance_gouvernement ~ question_confiance, data=e1))
summary(lm(n(confiance_gouvernement) ~ question_confiance, data=e1))
summary(lm((confiance_gouvernement>=0) ~ question_confiance, data=e1))
head(e1$question_confiance)
decrit(e1$confiance_gouvernement)
decrit(e1$confiance_gouvernement, numbers=T)
summary(lm((confiance_gouvernement>=-1) ~ question_confiance, data=e1))
summary(lm((confiance_gouvernement>=0) ~ question_confiance, data=e1))
decrit("confiance_gouvernement", data=e1, which = e1$question_confiance==T)
decrit("confiance_dividende", data=e1, which = e1$question_confiance==T)
decrit("confiance_dividende", data=e1)
decrit("confiance_gouvernement", data=e1)
decrit("confiance_dividende", data=e1, which = e1$question_confiance==T)
decrit("confiance_gouvernement", data=e1)
decrit("confiance_gouvernement", data=e1, which = e1$question_confiance==T)
impute_dividende_escompte()
# imputer le dividende escompté à partir de confiance_gouv et déduire le % de perdants que ça explique
impute_dividende_escompte <- function(escompte_moitie = 0.6, escompte_non = 0.2) { # un escompte_moitie de 0.6 signifie que 60% du dividende est pris en compte par ceux qui répondent "À moitié"
escompte_dividende_by_confiance_gouv <- rep(NA, 6)
names(escompte_dividende_by_confiance_gouv) <- c(labels(e1$confiance_gouvernement))
for (i in c(labels(e1$confiance_gouvernement))) {
escompte_dividende_by_confiance_gouv[i] <- sum((((e1$confiance_dividende=="Oui") * e1$weight)[e1$confiance_gouvernement==i] +
escompte_moitie * ((e1$confiance_dividende=="À moitié") * e1$weight)[e1$confiance_gouvernement==i]), na.rm=T)/sum((!is.na(e1$confiance_dividende) * e1$weight)[e1$confiance_gouvernement==i]) }
# data_modified[["dividende_escompte_impute"]] <<- escompte_dividende_by_confiance_gouv[as.character(data_modified[["confiance_gouvernement"]])]
print(paste("escompte moyen:", .46*escompte_non + .423*escompte_moitie + .117))
return(escompte_dividende_by_confiance_gouv)
}
impute_dividende_escompte()
decrit(impute_dividende_escompte(escompte_moitie = 0.8, escompte_non = 0.3)[as.character(e1$confiance_gouvernement)])
decrit(e1$confiance_gouvernement)
# imputer le dividende escompté à partir de confiance_gouv et déduire le % de perdants que ça explique
impute_dividende_escompte <- function(escompte_moitie = 0.6, escompte_non = 0.2) { # un escompte_moitie de 0.6 signifie que 60% du dividende est pris en compte par ceux qui répondent "À moitié"
escompte_dividende_by_confiance_gouv <- prop_confiance_gouv <- rep(NA, 6)
names(escompte_dividende_by_confiance_gouv) <- names(prop_confiance_gouv) <- c(labels(e1$confiance_gouvernement))
for (i in c(labels(e1$confiance_gouvernement))) {
prop_confiance_gouv[i] <- wtd.mean(e1$confiance_gouvernement==i, weights = e1$weight)
escompte_dividende_by_confiance_gouv[i] <- sum((((e1$confiance_dividende=="Oui") * e1$weight)[e1$confiance_gouvernement==i] +
escompte_moitie * ((e1$confiance_dividende=="À moitié") * e1$weight)[e1$confiance_gouvernement==i]), na.rm=T)/sum((!is.na(e1$confiance_dividende) * e1$weight)[e1$confiance_gouvernement==i]) }
# data_modified[["dividende_escompte_impute"]] <<- escompte_dividende_by_confiance_gouv[as.character(data_modified[["confiance_gouvernement"]])]
print(paste("escompte moyen:", .46*escompte_non + .423*escompte_moitie + .117))
print(paste("escompte imputé moyen:", sum(escompte_dividende_by_confiance_gouv * prop_confiance_gouv)))
return(escompte_dividende_by_confiance_gouv)
}
impute_dividende_escompte()
# imputer le dividende escompté à partir de confiance_gouv et déduire le % de perdants que ça explique
impute_dividende_escompte <- function(escompte_moitie = 0.6, escompte_non = 0.2) { # un escompte_moitie de 0.6 signifie que 60% du dividende est pris en compte par ceux qui répondent "À moitié"
escompte_dividende_by_confiance_gouv <- prop_confiance_gouv <- rep(NA, 6)
names(escompte_dividende_by_confiance_gouv) <- names(prop_confiance_gouv) <- c(labels(e1$confiance_gouvernement))
for (i in c(labels(e1$confiance_gouvernement))) {
prop_confiance_gouv[i] <- wtd.mean(e1$confiance_gouvernement==i, weights = e1$weight)
escompte_dividende_by_confiance_gouv[i] <- sum((((e1$confiance_dividende=="Oui") * e1$weight)[e1$confiance_gouvernement==i] +
escompte_moitie * ((e1$confiance_dividende=="À moitié") * e1$weight)[e1$confiance_gouvernement==i]), na.rm=T)/sum((!is.na(e1$confiance_dividende) * e1$weight)[e1$confiance_gouvernement==i]) }
# data_modified[["dividende_escompte_impute"]] <<- escompte_dividende_by_confiance_gouv[as.character(data_modified[["confiance_gouvernement"]])]
print(paste("escompte moyen:", .46*escompte_non + .423*escompte_moitie + .117))
print(paste("escompte imputé moyen:", round(sum(escompte_dividende_by_confiance_gouv * prop_confiance_gouv)), 4))
return(escompte_dividende_by_confiance_gouv)
}
impute_dividende_escompte()
# imputer le dividende escompté à partir de confiance_gouv et déduire le % de perdants que ça explique
impute_dividende_escompte <- function(escompte_moitie = 0.6, escompte_non = 0.2) { # un escompte_moitie de 0.6 signifie que 60% du dividende est pris en compte par ceux qui répondent "À moitié"
escompte_dividende_by_confiance_gouv <- prop_confiance_gouv <- rep(NA, 6)
names(escompte_dividende_by_confiance_gouv) <- names(prop_confiance_gouv) <- c(labels(e1$confiance_gouvernement))
for (i in c(labels(e1$confiance_gouvernement))) {
prop_confiance_gouv[i] <- wtd.mean(e1$confiance_gouvernement==i, weights = e1$weight)
escompte_dividende_by_confiance_gouv[i] <- sum((((e1$confiance_dividende=="Oui") * e1$weight)[e1$confiance_gouvernement==i] +
escompte_moitie * ((e1$confiance_dividende=="À moitié") * e1$weight)[e1$confiance_gouvernement==i]), na.rm=T)/sum((!is.na(e1$confiance_dividende) * e1$weight)[e1$confiance_gouvernement==i]) }
# data_modified[["dividende_escompte_impute"]] <<- escompte_dividende_by_confiance_gouv[as.character(data_modified[["confiance_gouvernement"]])]
print(paste("escompte moyen:", .46*escompte_non + .423*escompte_moitie + .117))
print(paste("escompte imputé moyen:", round(sum(escompte_dividende_by_confiance_gouv * prop_confiance_gouv), 4)))
return(escompte_dividende_by_confiance_gouv)
}
impute_dividende_escompte()
decrit("dividende_escompte_impute", data=e1)
decrit("dividende_escompte_impute", data=e1, which = e1$confiance_gouvernement=="Parfois")
decrit("confiance_dividende", data=e1, which = e1$confiance_gouvernement=="Parfois")
decrit("confiance_dividende", data=e1, which = e1$confiance_gouvernement=="Parfois", numbers=T)
e <- e1
e$confiance_dividende <- as.item(temp, labels=structure(c(0, 0.5, 1), names=c('Non', 'À moitié', 'Oui')), annotation=Label(e$confiance_dividende))
decrit(e$confiance_dividende, numbers=T)
decrit(e$confiance_dividende)
temp <- 1*(e$confiance_dividende=='Oui') - 0.5*(e$confiance_dividende=='À moitié')
e$confiance_dividende <- as.item(temp, labels=structure(c(0, 0.5, 1), names=c('Non', 'À moitié', 'Oui')), annotation=Label(e$confiance_dividende))
decrit(e$confiance_dividende)
e <- e1
temp <- 1*(e$confiance_dividende=='Oui') + 0.5*(e$confiance_dividende=='À moitié')
e$confiance_dividende <- as.item(temp, labels=structure(c(0, 0.5, 1), names=c('Non', 'À moitié', 'Oui')), annotation=Label(e$confiance_dividende))
decrit(e$confiance_dividende)
decrit(e$confiance_dividende, numbers=T)
e1 <- e
decrit("dividende_escompte_impute", data=e1, which = e1$confiance_gouvernement=="Parfois")
decrit("confiance_dividende", data=e1, which = e1$confiance_gouvernement=="Parfois", numbers=T)
# imputer le dividende escompté à partir de confiance_gouv et déduire le % de perdants que ça explique
impute_dividende_escompte <- function(escompte_moitie = 0.5, escompte_non = 0) { # un escompte_moitie de 0.6 signifie que 60% du dividende est pris en compte par ceux qui répondent "À moitié"
escompte_dividende_by_confiance_gouv <- prop_confiance_gouv <- rep(NA, 6)
names(escompte_dividende_by_confiance_gouv) <- names(prop_confiance_gouv) <- c(labels(e1$confiance_gouvernement))
for (i in c(labels(e1$confiance_gouvernement))) {
prop_confiance_gouv[i] <- wtd.mean(e1$confiance_gouvernement==i, weights = e1$weight)
escompte_dividende_by_confiance_gouv[i] <- sum((((e1$confiance_dividende=="Oui") * e1$weight)[e1$confiance_gouvernement==i] +
escompte_moitie * ((e1$confiance_dividende=="À moitié") * e1$weight)[e1$confiance_gouvernement==i]), na.rm=T)/sum((!is.na(e1$confiance_dividende) * e1$weight)[e1$confiance_gouvernement==i]) }
# data_modified[["dividende_escompte_impute"]] <<- escompte_dividende_by_confiance_gouv[as.character(data_modified[["confiance_gouvernement"]])]
print(paste("escompte moyen:", .46*escompte_non + .423*escompte_moitie + .117))
print(paste("escompte imputé moyen:", round(sum(escompte_dividende_by_confiance_gouv * prop_confiance_gouv), 4)))
return(escompte_dividende_by_confiance_gouv)
}
e1$dividende_escompte_impute <- impute_dividende_escompte()[as.character(e1$confiance_gouvernement)]
e2$dividende_escompte_impute <- impute_dividende_escompte()[as.character(e2$confiance_gouvernement)]
eb$dividende_escompte_impute <- impute_dividende_escompte()[as.character(eb$confiance_gouvernement)]
decrit("dividende_escompte_impute", data=e1, which = e1$confiance_gouvernement=="Parfois")
decrit("confiance_dividende", data=e1, which = e1$confiance_gouvernement=="Parfois", numbers=T)
decrit("dividende_escompte_impute", data=e1, which = e1$confiance_gouvernement=="Parfois" & e1$question_confiance==T)
decrit("confiance_dividende", data=e1, which = e1$confiance_gouvernement=="Parfois", numbers=T)
decrit(impute_dividende_escompte(escompte_moitie = 0.8, escompte_non = 0.3)[as.character(e1$confiance_gouvernement)])
decrit(impute_dividende_escompte(escompte_moitie = 0.5, escompte_non = 0)[as.character(e1$confiance_gouvernement)])
decrit(impute_dividende_escompte(escompte_moitie = 0.8, escompte_non = 0)[as.character(e1$confiance_gouvernement)])
# imputer le dividende escompté à partir de confiance_gouv et déduire le % de perdants que ça explique
impute_dividende_escompte <- function(escompte_moitie = 0.5, escompte_non = 0) { # un escompte_moitie de 0.6 signifie que 60% du dividende est pris en compte par ceux qui répondent "À moitié"
escompte_dividende_by_confiance_gouv <- prop_confiance_gouv <- rep(NA, 6)
names(escompte_dividende_by_confiance_gouv) <- names(prop_confiance_gouv) <- c(labels(e1$confiance_gouvernement))
for (i in c(labels(e1$confiance_gouvernement))) {
prop_confiance_gouv[i] <- wtd.mean(e1$confiance_gouvernement==i, weights = e1$weight)
escompte_dividende_by_confiance_gouv[i] <- sum((((e1$confiance_dividende=="Oui") * e1$weight)[e1$confiance_gouvernement==i] + escompte_non * ((e1$confiance_dividende=="Non") * e1$weight)[e1$confiance_gouvernement==i] +
escompte_moitie * ((e1$confiance_dividende=="À moitié") * e1$weight)[e1$confiance_gouvernement==i]), na.rm=T)/sum((!is.na(e1$confiance_dividende) * e1$weight)[e1$confiance_gouvernement==i]) }
# data_modified[["dividende_escompte_impute"]] <<- escompte_dividende_by_confiance_gouv[as.character(data_modified[["confiance_gouvernement"]])]
print(paste("escompte moyen:", .46*escompte_non + .423*escompte_moitie + .117))
print(paste("escompte imputé moyen:", round(sum(escompte_dividende_by_confiance_gouv * prop_confiance_gouv), 4)))
return(escompte_dividende_by_confiance_gouv)
}
decrit(impute_dividende_escompte(escompte_moitie = 0.8, escompte_non = 0.3)[as.character(e1$confiance_gouvernement)])
# imputer le dividende escompté à partir de confiance_gouv et déduire le % de perdants que ça explique
impute_dividende_escompte <- function(escompte_moitie = 0.5, escompte_non = 0) { # un escompte_moitie de 0.6 signifie que 60% du dividende est pris en compte par ceux qui répondent "À moitié"
escompte_dividende_by_confiance_gouv <- rep(NA, 6)
names(escompte_dividende_by_confiance_gouv) <- c(labels(e1$confiance_gouvernement))
for (i in c(labels(e1$confiance_gouvernement))) {
prop_confiance_gouv[i] <- wtd.mean(e1$confiance_gouvernement==i, weights = e1$weight)
escompte_dividende_by_confiance_gouv[i] <- sum((((e1$confiance_dividende=="Oui") * e1$weight)[e1$confiance_gouvernement==i] + escompte_non * ((e1$confiance_dividende=="Non") * e1$weight)[e1$confiance_gouvernement==i] +
escompte_moitie * ((e1$confiance_dividende=="À moitié") * e1$weight)[e1$confiance_gouvernement==i]), na.rm=T)/sum((!is.na(e1$confiance_dividende) * e1$weight)[e1$confiance_gouvernement==i]) }
# data_modified[["dividende_escompte_impute"]] <<- escompte_dividende_by_confiance_gouv[as.character(data_modified[["confiance_gouvernement"]])]
print(paste("escompte moyen:", .46*escompte_non + .423*escompte_moitie + .117))
return(escompte_dividende_by_confiance_gouv)
}
e1$dividende_escompte_impute <- impute_dividende_escompte()[as.character(e1$confiance_gouvernement)]
e2$dividende_escompte_impute <- impute_dividende_escompte()[as.character(e2$confiance_gouvernement)]
eb$dividende_escompte_impute <- impute_dividende_escompte()[as.character(eb$confiance_gouvernement)]
# imputer le dividende escompté à partir de confiance_gouv et déduire le % de perdants que ça explique
impute_dividende_escompte <- function(escompte_moitie = 0.5, escompte_non = 0) { # un escompte_moitie de 0.6 signifie que 60% du dividende est pris en compte par ceux qui répondent "À moitié"
escompte_dividende_by_confiance_gouv <- rep(NA, 6)
names(escompte_dividende_by_confiance_gouv) <- c(labels(e1$confiance_gouvernement))
for (i in c(labels(e1$confiance_gouvernement))) {
escompte_dividende_by_confiance_gouv[i] <- sum((((e1$confiance_dividende=="Oui") * e1$weight)[e1$confiance_gouvernement==i] + escompte_non * ((e1$confiance_dividende=="Non") * e1$weight)[e1$confiance_gouvernement==i] +
escompte_moitie * ((e1$confiance_dividende=="À moitié") * e1$weight)[e1$confiance_gouvernement==i]), na.rm=T)/sum((!is.na(e1$confiance_dividende) * e1$weight)[e1$confiance_gouvernement==i]) }
# data_modified[["dividende_escompte_impute"]] <<- escompte_dividende_by_confiance_gouv[as.character(data_modified[["confiance_gouvernement"]])]
print(paste("escompte moyen:", .46*escompte_non + .423*escompte_moitie + .117))
return(escompte_dividende_by_confiance_gouv)
}
e1$dividende_escompte_impute <- impute_dividende_escompte()[as.character(e1$confiance_gouvernement)]
e2$dividende_escompte_impute <- impute_dividende_escompte()[as.character(e2$confiance_gouvernement)]
eb$dividende_escompte_impute <- impute_dividende_escompte()[as.character(eb$confiance_gouvernement)]
# imputer le dividende escompté à partir de confiance_gouv et déduire le % de perdants que ça explique
impute_dividende_escompte <- function(escompte_moitie = 0.5, escompte_non = 0, print = F) { # un escompte_moitie de 0.6 signifie que 60% du dividende est pris en compte par ceux qui répondent "À moitié"
escompte_dividende_by_confiance_gouv <- rep(NA, 6)
names(escompte_dividende_by_confiance_gouv) <- c(labels(e1$confiance_gouvernement))
for (i in c(labels(e1$confiance_gouvernement))) {
escompte_dividende_by_confiance_gouv[i] <- sum((((e1$confiance_dividende=="Oui") * e1$weight)[e1$confiance_gouvernement==i] + escompte_non * ((e1$confiance_dividende=="Non") * e1$weight)[e1$confiance_gouvernement==i] +
escompte_moitie * ((e1$confiance_dividende=="À moitié") * e1$weight)[e1$confiance_gouvernement==i]), na.rm=T)/sum((!is.na(e1$confiance_dividende) * e1$weight)[e1$confiance_gouvernement==i]) }
# data_modified[["dividende_escompte_impute"]] <<- escompte_dividende_by_confiance_gouv[as.character(data_modified[["confiance_gouvernement"]])]
if (print) print(paste("escompte moyen:", .46*escompte_non + .423*escompte_moitie + .117))
return(escompte_dividende_by_confiance_gouv)
}
decrit(impute_dividende_escompte(escompte_moitie = 0.8, escompte_non = 0.3)[as.character(e1$confiance_gouvernement)])
e1$dividende_escompte_impute <- impute_dividende_escompte()[as.character(e1$confiance_gouvernement)]
e2$dividende_escompte_impute <- impute_dividende_escompte()[as.character(e2$confiance_gouvernement)]
e1$dividende_escompte_ajuste <- impute_dividende_escompte(escompte_moitie = 0.8, escompte_non = 0.3)[as.character(e1$confiance_gouvernement)]
e2$dividende_escompte_ajuste <- impute_dividende_escompte(escompte_moitie = 0.8, escompte_non = 0.3)[as.character(e2$confiance_gouvernement)]
impute_dividende_escompte(print=T)
impute_dividende_escompte(escompte_moitie = 0.8, escompte_non = 0.3)
impute_dividende_escompte(escompte_moitie = 0.8, escompte_non = 0.3, print=T)
# imputer le dividende escompté à partir de confiance_gouv et déduire le % de perdants que ça explique
impute_dividende_escompte <- function(escompte_moitie = 0.5, escompte_non = 0, print = F) { # un escompte_moitie de 0.6 signifie que 60% du dividende est pris en compte par ceux qui répondent "À moitié"
escompte_dividende_by_confiance_gouv <- rep(NA, 6)
names(escompte_dividende_by_confiance_gouv) <- c(labels(e1$confiance_gouvernement))
for (i in c(labels(e1$confiance_gouvernement))) {
escompte_dividende_by_confiance_gouv[i] <- sum((((e1$confiance_dividende=="Oui") * e1$weight)[e1$confiance_gouvernement==i] + escompte_non * ((e1$confiance_dividende=="Non") * e1$weight)[e1$confiance_gouvernement==i] +
escompte_moitie * ((e1$confiance_dividende=="À moitié") * e1$weight)[e1$confiance_gouvernement==i]), na.rm=T)/sum((!is.na(e1$confiance_dividende) * e1$weight)[e1$confiance_gouvernement==i]) }
# data_modified[["dividende_escompte_impute"]] <<- escompte_dividende_by_confiance_gouv[as.character(data_modified[["confiance_gouvernement"]])]
if (print) print(paste("escompte moyen:", round(.46*escompte_non + .423*escompte_moitie + .117, 2)))
return(escompte_dividende_by_confiance_gouv)
}
decrit("dividende_escompte_impute", data=e1)
e1$dividende_escompte_impute <- impute_dividende_escompte()[as.character(e1$confiance_gouvernement)] * 110 * pmin(2, e1$nb_adultes)/e1$uc
e2$dividende_escompte_impute <- impute_dividende_escompte()[as.character(e2$confiance_gouvernement)] * e2$dividende * pmin(2, e2$nb_adultes)/e2$uc
e1$dividende_escompte_ajuste <- impute_dividende_escompte(escompte_moitie = 0.8, escompte_non = 0.3)[as.character(e1$confiance_gouvernement)] * 110 * pmin(2, e1$nb_adultes)/e1$uc
e2$dividende_escompte_ajuste <- impute_dividende_escompte(escompte_moitie = 0.8, escompte_non = 0.3)[as.character(e2$confiance_gouvernement)] * e2$dividende * pmin(2, e2$nb_adultes)/e2$uc
impute_dividende_escompte(print=T)
impute_dividende_escompte(escompte_moitie = 0.8, escompte_non = 0.3, print=T)
wtd.mean(e1$simule_gain_verif + e1$dividende_escompte_impute - (110 * pmin(2, e1$nb_adultes)/e1$uc) < 0, weights = e1$weight)
wtd.mean(e1$simule_gain_verif + e1$dividende_escompte_ajuste - (110 * pmin(2, e1$nb_adultes)/e1$uc) < 0, weights = e1$weight)
decrit(e2$simule_gain)
0.25*0 + 0.75*wtd.mean(e2$simule_gain[e2$dividende==110] < 0, weights = e2$weight[e2$dividende==110]) # 52% cas extrême où 25% pensent recevoir 0 et 75% 110 (mieux calculé)
# wtd.mean(e1$simule_gain_verif + e1$dividende_escompte_impute - (110 * pmin(2, e1$nb_adultes)/e1$uc) < 0, weights = e1$weight) # 63% explique tout pour escompte non,moitié = 0, 0.5 /!\ débile de faire ça pour e1 puisqu'on a les données individuelles, cf. gain_min etc.
# wtd.mean(e1$simule_gain_verif + e1$dividende_escompte_ajuste - (110 * pmin(2, e1$nb_adultes)/e1$uc) < 0, weights = e1$weight) # 47% mais pas qd on ajuste le dividende escompté à la valeur de v2
wtd.mean((e2$simule_gain + e2$dividende_escompte_impute - (e2$dividende * pmin(2, e2$nb_adultes)/e2$uc))[e2$dividende==0] < 0, weights = e2$weight[e2$dividende==0]) # 63% explique tout pour escompte non,moitié = 0, 0.5
wtd.mean((e2$simule_gain + e2$dividende_escompte_ajuste - (e2$dividende * pmin(2, e2$nb_adultes)/e2$uc))[e2$dividende==0] < 0, weights = e2$weight[e2$dividende==0]) # 47% mais pas qd on ajuste le dividende escompté à la valeur de v2
wtd.mean((e2$simule_gain + e2$dividende_escompte_impute - (e2$dividende * pmin(2, e2$nb_adultes)/e2$uc))[e2$dividende==110] < 0, weights = e2$weight[e2$dividende==110]) # 63% explique tout pour escompte non,moitié = 0, 0.5
wtd.mean((e2$simule_gain + e2$dividende_escompte_ajuste - (e2$dividende * pmin(2, e2$nb_adultes)/e2$uc))[e2$dividende==110] < 0, weights = e2$weight[e2$dividende==110]) # 47% mais pas qd on ajuste le dividende escompté à la valeur de v2
wtd.mean((e2$simule_gain + e2$dividende_escompte_impute - (e2$dividende * pmin(2, e2$nb_adultes)/e2$uc))[e2$dividende==170] < 0, weights = e2$weight[e2$dividende==170]) # 63% explique tout pour escompte non,moitié = 0, 0.5
wtd.mean((e2$simule_gain + e2$dividende_escompte_ajuste - (e2$dividende * pmin(2, e2$nb_adultes)/e2$uc))[e2$dividende==170] < 0, weights = e2$weight[e2$dividende==170]) # 47% mais pas qd on ajuste le dividende escompté à la valeur de v2
wtd.mean(e2$simule_gain_verif < 0, weights = e2$weight) # 27%
wtd.mean(e2$simule_gain < 0, weights = e2$weight) # 27%
decrit("gagnant_categorie", data=e1)
decrit("gagnant_categorie", data=e2, which = e2$dividende==0)
decrit("gagnant_categorie", data=e2, which = e2$dividende==0, miss=T)
decrit("gagnant_categorie", data=e1) # 60% Perdants
decrit("gagnant_categorie", data=e2, which = e2$dividende==0, miss=T) # 48%
decrit("gagnant_categorie", data=e1)
decrit("gagnant_categorie", data=e2, which = e2$dividende==110, miss=T) # 60/9
decrit("gagnant_categorie", data=e2, which = e2$dividende==170, miss=T)
wtd.mean(e2$simule_gain[e2$dividende==0] < 0, weights = e2$weight[e2$dividende==0]) # 47% gain fiscal
wtd.mean(e2$simule_gain[e2$dividende==110] < 0, weights = e2$weight[e2$dividende==110]) # 47% gain fiscal
wtd.mean(e2$simule_gain[e2$dividende==170] < 0, weights = e2$weight[e2$dividende==170]) # 47% gain fiscal
decrit("dividende_escompte_impute", data=e2, which=e2$gain_net_choix=="NSP")
summary(lm(dividende_escompte_impute ~ (gain_net_choix=="NSP")*dividende, data=e2, weights = e2$weight))
summary(lm(dividende_escompte_impute ~ (gain_net_choix=="NSP")*as.factor(dividende), data=e2, weights = e2$weight))
summary(lm(dividende_escompte_impute ~ (gain_net_choix=="NSP"), data=e2, weights = e2$weight))
summary(lm(dividende_escompte_ajuste ~ (gain_net_choix=="NSP"), data=e2, weights = e2$weight)) # pas d'effet
summary(lm(dividende_escompte_impute ~ (gain_net_choix=="NSP"), data=e2, weights = e2$weight)) # pas d'effet
decrit("gagnant_categorie", data=e1, which = e1$question_confiance==F) # 60/9% Perdants/Gagnants
summary(lm(gagnant_categorie=="Perdant" ~ confiance_dividende, data=e1, weights = e1$weight))
summary(lm(gagnant_categorie=="Perdant" ~ as.factor(confiance_dividende), data=e1, weights = e1$weight))
##### approbation y.c. détaxe urba #####
# Valeur du dividende accroît approbation mais formule alternative correspond à dividende <110
decrit(e1$taxe_approbation, miss = T)
decrit("certitude_gagnant", data=e1, which=e1$gagnant_categorie=="Perdant")
# Il y a plus de perdants parmi ceux qui sont sûrs de leur réponse
CrossTable(e1$certitude_gagnant, e1$gagnant_categorie, prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE) # perdant~sûr gagnant~moyennement non affecté~pas sûr du tout
CrossTable(e1$gagnant_categorie, e1$certitude_gagnant, prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE) # perdant~sûr gagnant~moyennement non affecté~pas sûr du tout
CrossTable(e2$gagnant_categorie, e2$certitude_gagnant, prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE) # NSP~pas sûr du tout perdant~moyennement
CrossTable(e1$gagnant_categorie, e1$certitude_gagnant, prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE) # perdant~sûr gagnant~moyennement non affecté~pas sûr du tout
CrossTable(e2$gagnant_categorie[e2$dividende==110], e2$certitude_gagnant[e2$dividende==110], prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE) # Perdants aussi sûrs que autres
CrossTable(e2$gagnant_categorie[e2$dividende==170], e2$certitude_gagnant[e2$dividende==170], prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE)
CrossTable(e1$gagnant_categorie, e1$certitude_gagnant, prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE) # Perdants + sûrs que autres
decrit(e1$gain < 0)
decrit(e1$gain)
decrit(e1$gain_min)
decrit(e1$gain < 0)
decrit(e1$gain_min < 0)
impute_dividende_escompte(print=T) # part du dividende pris en compte (imputée)
impute_dividende_escompte(escompte_moitie = 0.8, escompte_non = 0.3, print=T)
summary(lm(taxe_approbation!="Non" ~ as.factor(confiance_dividende), data=e1, weights = e1$weight))
# Parmi le peu qui croient recevoir le dividende, gagnant_categorie est bien plus alignée avec la réponse objective: +32***p.p.
CrossTable(e1$simule_gain_verif[e1$confiance_dividende=='Oui'] > 0, e1$gagnant_categorie[e1$confiance_dividende=='Oui'], prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE)
summary(lm(taxe_approbation!="Non" ~ question_confiance, data=e1, weights = e1$weight)) # pas d'influence de la question
summary(lm(gagnant_categorie=="Perdant" ~ question_confiance, data=e1, weights = e1$weight)) # pas d'influence de la question
# 1.b mais cette explication a des limites, mises en évidence dans v2
summary(lm(gain ~ as.factor(dividende), data = e2, weights = e2$weight))
summary(lm((gain + $hausse_depenses_par_uc) ~ as.factor(dividende), data=e2, subset = grepl("Correct", e2$avis_estimation), weights = e2$weight))
summary(lm((gain + hausse_depenses_par_uc) ~ as.factor(dividende), data=e2, subset = grepl("Correct", e2$avis_estimation), weights = e2$weight))
summary(lm((gain + hausse_depenses_par_uc) ~ as.factor(dividende), data=e2, subset = grepl("Correct", e2$avis_estimation)))
decrit(e2$gain + e2$hausse_depenses_par_uc, which = grepl("Correct", e2$avis_estimation) & e2$dividende==0) # mean 6 / médiane 2 : dividende qu'ils croient recevoir s'ils acceptent notre estimation
decrit(e2$gain + e2$hausse_depenses_par_uc, which = grepl("Correct", e2$avis_estimation) & e2$dividende==110) # 108 / 136
decrit(e2$gain + e2$hausse_depenses_par_uc, which = grepl("Correct", e2$avis_estimation) & e2$dividende==170) # 161 / 175
summary(lm((gain + hausse_depenses_par_uc) ~ as.factor(dividende), data=e2, subset = grepl("Correct", e2$avis_estimation), weights = e2$weight))
summary(lm((gain + hausse_depenses_par_uc) ~ as.factor(dividende), data=e2, subset = grepl("Correct", e2$avis_estimation)))
decrit(e2$gain + e2$hausse_depenses_par_uc, which = grepl("Correct", e2$avis_estimation) & e2$dividende==0, weights = e2$weight) # mean 6 / médiane 2 : dividende qu'ils croient recevoir s'ils acceptent notre estimation
decrit(e2$gain + e2$hausse_depenses_par_uc, which = grepl("Correct", e2$avis_estimation) & e2$dividende==110, weights = e2$weight) # 108 / 136
decrit(e2$gain + e2$hausse_depenses_par_uc, which = grepl("Correct", e2$avis_estimation) & e2$dividende==170, weights = e2$weight) # 161 / 175
summary(lm((gain + hausse_depenses_par_uc) ~ as.factor(dividende), data=e2, subset = e2$avis_estimation=="Correct", weights = e2$weight))
summary(lm((gain + hausse_depenses_par_uc) ~ as.factor(dividende), data=e2, subset = e2$avis_estimation=="Correcte", weights = e2$weight))
summary(lm((gain + hausse_depenses_par_uc) ~ as.factor(dividende), data=e2, subset = e2$avis_estimation!="Trop élevée", weights = e2$weight))
summary(lm((gain + hausse_depenses_par_uc) ~ as.factor(dividende), data=e2, subset = e2$avis_estimation=="Trop élevée", weights = e2$weight)) # seul dividende=170 pas tout à fait pris en compte
#     37% Perdants:
#     Ceux qui croient à notre estimation intègrent le dividende. Donc l'effet doit passer par hausse_depenses et pas seulement dividende.
decrit(e2$gain + e2$hausse_depenses_par_uc, which = e2$avis_estimation=="Correct" & e2$dividende==0, weights = e2$weight) # mean 4 / médiane 3 : dividende qu'ils croient recevoir s'ils acceptent notre estimation
#     37% Perdants:
#     Ceux qui croient à notre estimation intègrent le dividende. Donc l'effet doit passer par hausse_depenses et pas seulement dividende.
decrit(e2$gain + e2$hausse_depenses_par_uc, which = e2$avis_estimation=="Correcte" & e2$dividende==0, weights = e2$weight) # mean 4 / médiane 3 : dividende qu'ils croient recevoir s'ils acceptent notre estimation
decrit(e2$gain + e2$hausse_depenses_par_uc, which = e2$avis_estimation=="Correcte" & e2$dividende==110, weights = e2$weight) # 110 / 125
decrit(e2$gain + e2$hausse_depenses_par_uc, which = e2$avis_estimation=="Correcte" & e2$dividende==170, weights = e2$weight) # 150 / 172
decrit(e2$avis_estimation)
decrit(e2$avis_estimation, miss=T)
#     37% Perdants:
#     Ceux qui croient à notre estimation intègrent le dividende. Donc l'effet doit passer par hausse_depenses et pas seulement dividende.
decrit(e2$gain + e2$hausse_depenses_par_uc, which = (e2$avis_estimation %in% c("Correcte", "NSP")) & e2$dividende==0, weights = e2$weight) # mean 4 / médiane 3 : dividende qu'ils croient recevoir s'ils acceptent notre estimation
decrit(e2$gain + e2$hausse_depenses_par_uc, which = (e2$avis_estimation %in% c("Correcte", "NSP")) & e2$dividende==110, weights = e2$weight) # 110 / 125
decrit(e2$gain + e2$hausse_depenses_par_uc, which = (e2$avis_estimation %in% c("Correcte", "NSP")) & e2$dividende==170, weights = e2$weight) # 150 / 172
#     37% Perdants: pas besoin du dividende pour l'expliquer; au contraire trop faible si n'intègrent pas dividende
decrit("gagnant_categorie", data=e2, which = e2$dividende==110, miss=T) # 37% perdants Pk telle différence ? ajout de "NSP" explique 20 p.p., cadrage 15 p.p. (v1: juste avant: hausse dépenses, v2 formulation plus douce)
#     37% Perdants: pas besoin du dividende pour l'expliquer; au contraire trop faible si n'intègrent pas dividende
decrit("gagnant_categorie", data=e2, which = e2$dividende==110) # 37% perdants Pk telle différence ? ajout de "NSP" explique 20 p.p., cadrage 15 p.p. (v1: juste avant: hausse dépenses, v2 formulation plus douce)
#     37% Perdants: pas besoin du dividende pour l'expliquer; au contraire trop faible si n'intègrent pas dividende
decrit("gagnant_categorie", data=e2, which = e2$dividende==110, miss=T) # 37% perdants Pk telle différence ? ajout de "NSP" explique 20 p.p., cadrage 15 p.p. (v1: juste avant: hausse dépenses, v2 formulation plus douce)
decrit("gagnant_categorie", data=e1)
decrit("gagnant_categorie", data=e2, which = e2$dividende==110, miss=T) # 25/24 perdants Pk telle différence ? ajout de "NSP" explique 20 p.p., cadrage 15 p.p. (v1: juste avant: hausse dépenses, v2 formulation plus douce)
decrit("gagnant_categorie", data=e2, which = e2$dividende==0, miss=T) # Perdants gagne 20 p.p. au profit de Gagnant (qui passe à 4%), les autres restent stables: logique
decrit("gagnant_categorie", data=e2, which = e2$dividende==170, miss=T) #  Plus que 11% de Perdants, les 14% en moins se sont répartis en trois tiers entre NSP, NA et G
wtd.mean(e1$simule_gain < 0, weights = e2$weight) # 27%
wtd.mean(e2$simule_gain < 0, weights = e2$weight) # 22%
summary(lm(taxe_approbation!='Non' ~ as.factor(dividende), data=e2, subset = origine_taxe=="gouvernement", weights = e2$weight)) # 2/6
#
summary(lm(taxe_approbation!='Non' ~ as.factor(dividende), data=e2, subset = origine_taxe=="gouvernement", weights = e2$weight)) # 2/6
#
ivreg(taxe_approbation!='Non' ~ gain | as.factor(dividende), data=e2)
#
ivreg2(taxe_approbation!='Non' ~ gain | as.factor(dividende), data=e2)
#
summary(ivreg(taxe_approbation!='Non' ~ gain | as.factor(dividende), data=e2))
#
iv_div <- ivreg(taxe_approbation!='Non' ~ gain | as.factor(dividende), data=e2)
summary(iv_div)
iv_div$diagnostics[1,3]
iv_div <- summary(iv_div)
iv_div$diagnostics[1,3]
#
iv_div <- summary(ivreg(taxe_approbation!='Non' ~ gain | as.factor(dividende), data=e2))
iv_div$diagnostics[1,3]
#
iv_div <- summary(ivreg(taxe_approbation!='Non' ~ gain | as.factor(dividende), data=e2), diagnostics = TRUE)
iv_div$diagnostics[1,3]
iv_div <- summary(ivreg(taxe_approbation!='Non' ~ gain > 0 | as.factor(dividende), data=e2), diagnostics = TRUE)
iv_div_binary
iv_div_binary <- summary(ivreg(taxe_approbation!='Non' ~ (gain > 0) | as.factor(dividende), data=e2), diagnostics = TRUE)
iv_div_binary
#
iv_div <- summary(ivreg(taxe_approbation!='Non' ~ gain | as.factor(dividende), data=e2), diagnostics = TRUE) # F-stat: 57 iv_div$diagnostics[1,3]
#
summary(ivreg(taxe_approbation!='Non' ~ gain | as.factor(dividende), data=e2), diagnostics = TRUE) # F-stat: 57 $diagnostics[1,3]
summary(ivreg(taxe_approbation!='Non' ~ (gain > 0) | as.factor(dividende), data=e2), diagnostics = TRUE)
summary(lm((gain > 0) ~ as.factor(dividende), data=e2, subset = origine_taxe=="gouvernement", weights = e2$weight)) # 2/6
# 2 autres mécanismes
# 2.1 effet de cadrage
#     ajout de "NSP" explique 20 p.p., contexte & formulation 15 p.p. (v1: juste avant: hausse dépenses, v2 formulation plus douce)
summary(lm(taxe_approbation!='Non' ~ gagnant_categorie, data=e2, weights = e2$weight))
# 2 autres mécanismes
# 2.1 effet de cadrage
#     ajout de "NSP" explique 20 p.p., contexte & formulation 15 p.p. (v1: juste avant: hausse dépenses, v2 formulation plus douce)
summary(lm(taxe_approbation!='Non' ~ as.factor(gagnant_categorie), data=e2, weights = e2$weight))
# 2 autres mécanismes
# 2.1 effet de cadrage
#     ajout de "NSP" explique 20 p.p., contexte & formulation 15 p.p. (v1: juste avant: hausse dépenses, v2 formulation plus douce)
summary(lm(taxe_approbation!='Non' ~ as.character(gagnant_categorie), data=e2, weights = e2$weight))
# 2 autres mécanismes
# 2.1 effet de cadrage
#     ajout de "NSP" explique 20 p.p., contexte & formulation 15 p.p. (v1: juste avant: hausse dépenses, v2 formulation plus douce)
summary(lm(taxe_approbation=='Oui' ~ as.character(gagnant_categorie), data=e2, weights = e2$weight)) # pb de cette explication: pas de différence entre NSP et NA
summary(lm(taxe_approbation=='Oui' ~ Gagnant_categorie, data=e2, weights = e2$weight))
# 2 autres mécanismes
# 2.1 effet de cadrage
#     ajout de "NSP" explique 20 p.p., contexte & formulation 15 p.p. (v1: juste avant: hausse dépenses, v2 formulation plus douce)
e2$Gagnant_categorie <- relevel(e2$Gagnant_categorie, "NSP")
# 2 autres mécanismes
# 2.1 effet de cadrage
#     ajout de "NSP" explique 20 p.p., contexte & formulation 15 p.p. (v1: juste avant: hausse dépenses, v2 formulation plus douce)
e2$Gagnant_categorie <- relevel(as.factor(e2$Gagnant_categorie), "NSP")
# 2 autres mécanismes
# 2.1 effet de cadrage
#     ajout de "NSP" explique 20 p.p., contexte & formulation 15 p.p. (v1: juste avant: hausse dépenses, v2 formulation plus douce)
e2$Gagnant_categorie <- relevel(as.factor(as.character(e2$Gagnant_categorie)), "NSP")
decrit(as.factor(as.character(e2$Gagnant_categorie)))
# 2 autres mécanismes
# 2.1 effet de cadrage
#     ajout de "NSP" explique 20 p.p., contexte & formulation 15 p.p. (v1: juste avant: hausse dépenses, v2 formulation plus douce)
e2$Gagnant_categorie <- relevel("NSP", as.factor(as.character(e2$Gagnant_categorie)))
# 2 autres mécanismes
# 2.1 effet de cadrage
#     ajout de "NSP" explique 20 p.p., contexte & formulation 15 p.p. (v1: juste avant: hausse dépenses, v2 formulation plus douce)
e2$Gagnant_categorie <- relevel(as.factor(as.character(e2$Gagnant_categorie)), "NSP")
# 2 autres mécanismes
# 2.1 effet de cadrage
#     ajout de "NSP" explique 20 p.p., contexte & formulation 15 p.p. (v1: juste avant: hausse dépenses, v2 formulation plus douce)
e2$Gagnant_categorie <- relevel(as.factor(as.character(e2$Gagnant_categorie)), "Non affecté")
summary(lm(taxe_approbation=='Oui' ~ Gagnant_categorie, data=e2, weights = e2$weight))
# certitude: perdants + sûrs va contre hypothèse aversion perte 2
# perte_relatif: faible écart à la moyenne, plutôt contre hyp qu'ils s'imaginent à tort particuliers 2 TODO
decrit(s$perte_relative_partielle, weights = s$weight) # proportions similaires pour les 3, environ 60% pensent perdre plus que la moyenne
# certitude: perdants + sûrs va contre hypothèse aversion perte 2
# perte_relatif: faible écart à la moyenne, plutôt contre hyp qu'ils s'imaginent à tort particuliers 2 TODO
decrit("perte_relative_partielle", data=b) # proportions similaires pour les 3, environ 60% pensent perdre plus que la moyenne
summary(lm(gagnant_categorie == "Perdant" ~ perte_relative_partielle, data = b, weights = b$weight))
summary(lm(gagnant_categorie == "Perdant" ~ perte_relative_partielle > 0, data = b, weights = b$weight))
u
summary(lm(taxe_approbation=="Oui" ~ as.character(avis_estimation), data = e2, weights = e2$weight)) # 46% Oui quand estimation correcte, ***26 p.p. de plus que les autres
summary(lm(taxe_approbation=="Oui" ~ (avis_estimation=="Correcte") * (gain == 0), data = e2, weights = e2$weight))
summary(lm(taxe_approbation=="Oui" ~ (avis_estimation=="Correcte") * (gagnant_categorie %in% c("NSP", "Non affecté")), data = e2, weights = e2$weight))
summary(lm(taxe_approbation=="Oui" ~ (avis_estimation=="Correcte") * I(gagnant_categorie %in% c("NSP", "Non affecté")), data = e2, weights = e2$weight))
summary(lm(taxe_approbation=="Oui" ~ I(avis_estimation %in% c("Correcte", "NSP")) * I(gagnant_categorie %in% c("NSP", "Non affecté")), data = e2, weights = e2$weight))
summary(lm(taxe_approbation=="Oui" ~ (avis_estimation=="Correcte") * I(gagnant_categorie %in% c("NSP", "Non affecté")), data = e2, weights = e2$weight))
summary(lm(taxe_approbation=="Oui" ~ (avis_estimation=="Correcte") * I(gagnant_categorie %in% c("NSP")), data = e2, weights = e2$weight))
# 2.e x raisonnement motivé: lié à méfiance mais ici la non-intégration d'une info n'est pas liée à la source de l'info mais à sa teneur. On s'attend à asymétrie dans update.
#     contrairement à v0, on ne peut pas mettre en évidence asymétrie dans l'update: les perdants optimistes sont 40% (4) à s'aligner (contre 82% (~45) en v0) et les gagnants pessimistes 26% (contre 12%), échantillon trop faible
#     pourquoi ça aurait changé ? Évolution des opinions; cadrage (certitude, (question_confiance, hausse_depenses plutôt que gain)); hasard (on ne peut pas exclure qu'il y ait de l'asymétrie);
#       ou bien l'asymétrie était drivée par les diesel_2_1 = T TODO: check
CrossTable(e1$gagnant_categorie[e1$simule_gagnant==1 & e1$bug_touche==F], e1$gagnant_feedback_categorie[e1$simule_gagnant==1 & e1$bug_touche==F], prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE)
# Conclusions: dividende, cadrage, biais: on a toujours plusieurs façons différentes d'expliquer les données, on a éliminé des explications mais on ne peut pas en singulariser une seule. Mtn on se demande presque pourquoi il n'y a pas plus de gens qui se disent Perdants.
# Quoi d'autre que les 3 motifs influent sur approbation ? Confiance est une raison omniprésente
# 3 rôle du contexte, des acteurs et de la formule:
# 3.a Évolution de l'opinion, particularité de l'épisode des GJ
decrit(b$taxe_approbation, miss = T) # 47/23
decrit(e2$taxe_approbation, which=e2$dividende==170 & e2$origine_taxe=="gouvernement", miss = T) # 44/31
# 3.d Effet de confiance_gouvernement
# méfiance gouv est capturée par méfiance dividende pour expliquer Perdant. confiance_gouv augmente proba NA (v1) mais pas corrélé avec gagnant_categorie (v2)
# Parmi le peu qui croient recevoir le dividende, gagnant_categorie est bien plus alignée avec la réponse objective: +32***p.p.
decrit("confiance_gouvernement", data=eb, miss=T) # 26/38/18/14 jamais/parfois/moitié/plupart temps
summary(lm(gagnant_categorie=='Perdant' ~ (confiance_gouvernement < 0) data = e1, weights = e1$weight)) # dividende 0.33*** / gouv: 0.13**
summary(lm(gagnant_categorie=='Perdant' ~ (confiance_gouvernement < 0), data = e1, weights = e1$weight)) # dividende 0.33*** / gouv: 0.13**
summary(lm(gagnant_categorie=='Perdant' ~ (confiance_gouvernement < 0) * as.factor(confiance_dividende), data = e1, weights = e1$weight)) # confiance_gouv pas significatif / dividende -0.27*** et -0.45***
summary(lm(tax_acceptance ~ (confiance_gouvernement < 0), data = e1, weights = e1$weight)) #
summary(lm(tax_acceptance ~ (confiance_gouvernement < 0) * as.factor(confiance_dividende), data = e1, weights = e1$weight)) # confiance_gouv pas significatif / dividende 0.38*** et 0.46***
summary(lm(gagnant_categorie=='Perdant' ~ (confiance_gouvernement < 0), data = e2, weights = e2$weight)) # gouv: 0.16**
summary(lm(tax_acceptance ~ (confiance_gouvernement < 0), data = e2, weights = e2$weight)) # -.14***
summary(lm(tax_acceptance ~ (confiance_gouvernement < 0), data = eb, weights = eb$weight)) # -.14***
summary(lm(tax_acceptance ~ (confiance_gouvernement < 0) * dividende, data = e2, weights = e2$weight)) # -.14***
summary(lm(tax_acceptance ~ (confiance_gouvernement < 0), data = e2, weights = e2$weight)) # -.14***
