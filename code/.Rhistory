c$identifiant_inconnu[grepl("NA", c$id)] <- TRUE
c <- c[,-1]
# write_dta(c, '../donnees/responses.dta', version = 11) # variable names too long for Stata 11
C[38, 209] <- substr(C[38, 209], 1, 208) # string already truncated in raw data (at 244 characters), bug when not truncated a bit more # was 38,213 (check s2_e_notes_sur_le_questionnaire) which(grepl('commentaire', names(c))) max(nchar(c[, 167]), na.rm=T)
c <- convert_c(c)
decrit(c$appartenance_2e)
Q2e <- read_dta("../donnees/2e.dta")
decrit(Q2e$s2_e_q10_clean)
decrit(Q2e$s2_e_q10)
levels(Q2e$s2_e_q10)
labels(Q2e$s2_e_q10)
Q2e <- read_dta("../donnees/all.dta")
decrit(Q2e$s2_s_q10_tranche)
decrit(Q2e$s2_s_q10)
(appartenance <- barres(data=data_appartenance, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=dataN("appartenance_2e", c[c$appartenance_2e!="",], miss = F, return = 'legend')))
(appartenance <- barres(data=data_appartenance, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=dataN("appartenance_2e", c[c$appartenance_2e!="",], miss = F, return = 'legend')))
data_appartenance <- cbind(dataN("appartenance_2e", c[c$appartenance_2e!="",], miss = F), c(39, 21, 16, 10, 6, 6, 2)/100) # TODO: bug (France absente)
(appartenance <- barres(data=data_appartenance, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=dataN("appartenance_2e", c[c$appartenance_2e!="",], miss = F, return = 'legend')))
load("/var/www/conv_citoyenne/CCC/code/.RData")
# data_appartenance <- cbind(dataN("appartenance_2e", c[c$appartenance_2e!="",], miss = F), c(39, 21, 16, 10, 6, 6, 2)/100) # TODO: bug (France absente)
data_appartenance <- cbind(dataN("appartenance_2e", c[c$appartenance_2e!="",], miss = F), c(39, 21, 16, 10, 6, 6, 2)/100) # TODO: bug (France absente)
(appartenance <- barres(data=data_appartenance, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=dataN("appartenance_2e", c[c$appartenance_2e!="",], miss = F, return = 'legend')))
# data_appartenance <- cbind(dataN("appartenance_2e", c[c$appartenance_2e!="",], miss = F), c(39, 21, 16, 10, 6, 6, 2)/100) # TODO: bug (France absente)
# (appartenance <- barres(data=data_appartenance, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=dataN("appartenance_2e", c[c$appartenance_2e!="",], miss = F, return = 'legend')))
data_appartenance <- cbind(c(31,3,4,29,1,11,3)/81, c(39, 21, 16, 10, 6, 6, 2)/100) # TODO: bug (France absente)
(appartenance <- barres(data=data_appartenance, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("la France", "ma commune, mon quartier", "ma région", "le monde", "mon département", "l'Europe", "un autre pays")))
sum(c(31,3,4,29,1,11,3))
# data_appartenance <- cbind(dataN("appartenance_2e", c[c$appartenance_2e!="",], miss = F), c(39, 21, 16, 10, 6, 6, 2)/100) # TODO: bug (France absente)
# (appartenance <- barres(data=data_appartenance, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=dataN("appartenance_2e", c[c$appartenance_2e!="",], miss = F, return = 'legend')))
data_appartenance <- cbind(c(31,3,4,29,1,11,0)/79, c(39, 21, 16, 10, 6, 6, 2)/100) # TODO: bug (France absente)
(appartenance <- barres(data=data_appartenance, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("la France", "ma commune, mon quartier", "ma région", "le monde", "mon département", "l'Europe", "un autre pays")))
c("la France", "ma commune, mon quartier", "ma région", "le monde", "mon département", "l'Europe", "un autre pays")[2,5,3,1,7,6,4]
c("la France", "ma commune, mon quartier", "ma région", "le monde", "mon département", "l'Europe", "un autre pays")[c(2,5,3,1,7,6,4)]
data_appartenance
# data_appartenance <- cbind(dataN("appartenance_2e", c[c$appartenance_2e!="",], miss = F), c(39, 21, 16, 10, 6, 6, 2)/100) # TODO: bug (France absente)
# (appartenance <- barres(data=data_appartenance, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=dataN("appartenance_2e", c[c$appartenance_2e!="",], miss = F, return = 'legend')))
data_appartenance <- cbind(c(31,3,4,29,1,11,0)/79, c(39, 21, 16, 10, 6, 6, 2)/100) # TODO: bug (France absente)
(appartenance <- barres(data=data_appartenance[c(2,5,3,1,7,6,4),], miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("la France", "ma commune, mon quartier", "ma région", "le monde", "mon département", "l'Europe", "un autre pays")[c(2,5,3,1,7,6,4)]))
(appartenance <- barres(data=data_appartenance[c(2,5,3,1,7,6,4),], miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("la France", "ma commune, mon quartier", "ma région", "le monde", "mon département", "l'Europe", "un autre pays")[c(2,5,3,1,7,6,4)]))
(appartenance <- barres(data=data_appartenance[c(2,5,3,7,1,6,4),], miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("la France", "ma commune, mon quartier", "ma région", "le monde", "mon département", "l'Europe", "un autre pays")[c(2,5,3,7,1,6,4)]))
save_plotly(appartenance) # ADEME octobre 2019 toplot TODO!
(cause_pauvrete <- barres(data=data_cause_pauvrete, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Pas eu de chance", "Pas fait d'effort")))
(cause_pauvrete <- barres(data=data_cause_pauvrete, miss = T, sort = F, labels = c('CCC', 'Population'), legend=c("Pas eu de chance", "Pas fait d'effort")))
(cause_pauvrete <- barres(data=data_cause_pauvrete, miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=dataN2("confiance_gens", miss = F, return = 'legend')))
(cause_pauvrete <- barres(data=data_cause_pauvrete, miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Pas eu de chance", "Pas fait d'effort")))
(cause_pauvrete <- barres(data=data_cause_pauvrete, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Pas eu de chance", "Pas fait d'effort")))
(cause_pauvrete <- barres(data=data_cause_pauvrete, miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Pas eu de chance", "Pas fait d'effort")))
decrit(c$appartenance_2e)
(ecole <- barres(data=data_ecole, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Discipline et effort", "Esprit éveillé et critique", "NSP")))
data_ecole <- cbind(dataN("ecole_2e", c[c$ecole_2e!="",], miss = T), c(0.41, 0.56, 0.03))
data_ecole
data_ecole <- cbind(dataN("ecole_2e", c[c$ecole_2e!="",], miss = F), c(0.41, 0.56, 0.03))
(ecole <- barres(data=data_ecole, miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Discipline et effort", "Esprit éveillé et critique", "NSP")))
(ecole <- barres(data=data_ecole, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Discipline et effort", "Esprit éveillé et critique")))
dataN("ecole_2e", c[c$ecole_2e!="",], miss = F)
(ecole <- barres(data=data_ecole, miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Discipline et effort", "Esprit éveillé et critique", "NSP")))
(causes_catastrophe <- barres(data=data_causes_catastrophe, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Personne n'est sûr", "Ont toujours eu lieu", "Dues au changement climatique", "NSP")))
dataN("cause_catastrophes_1e", c, miss = F)
(causes_catastrophe <- barres(data=data_causes_catastrophe, miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Personne n'est sûr", "Ont toujours eu lieu", "Dues au changement climatique", "NSP")))
(causes_catastrophe <- barres(data=data_causes_catastrophe, miss = T, nsp = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Personne n'est sûr", "Ont toujours eu lieu", "Dues au changement climatique", "NSP")))
(causes_catastrophe <- barres(data=data_causes_catastrophe, miss = T, nsp = F, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Personne n'est sûr", "Ont toujours eu lieu", "Dues au changement climatique", "NSP")))
(causes_catastrophe <- barres(data=data_causes_catastrophe, miss = F, nsp = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Personne n'est sûr", "Ont toujours eu lieu", "Dues au changement climatique", "NSP")))
(causes_catastrophe <- barres(data=data_causes_catastrophe, miss = F, nsp = F, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Personne n'est sûr", "Ont toujours eu lieu", "Dues au changement climatique", "NSP")))
(causes_catastrophe <- barres(data=data_causes_catastrophe, miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Personne n'est sûr", "Ont toujours eu lieu", "Dues au changement climatique")))
(causes_catastrophe <- barres(data=data_causes_catastrophe, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Personne n'est sûr", "Ont toujours eu lieu", "Dues au changement climatique")))
dataN("ecole_2e", c[c$ecole_2e!="",], miss = F)
dataN("ecole_2e", c[c$ecole_2e!="",], miss = T)
dataN("cause_catastrophes_1e", c, miss = F)
inflate_for_miss <- function(v) return(c(v[1:(length(v)-1)]/(1-v[length(v)]), v[length(v)]))
data_causes_catastrophe <- cbind(dataN("cause_catastrophes_1e", c, miss = F), inflate_for_miss(c(0.2, 0.2, 0.58, 0.02)))
(causes_catastrophe <- barres(data=data_causes_catastrophe, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Personne n'est sûr", "Ont toujours eu lieu", "Dues au changement climatique", "NSP")))
data_ecole <- cbind(dataN("ecole_2e", c[c$ecole_2e!="",], miss = F), inflate_for_miss(c(0.41, 0.56, 0.03)))
(ecole <- barres(data=data_ecole, miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Discipline et effort", "Esprit éveillé et critique", "NSP")))
(ecole <- barres(data=data_ecole, miss = T, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Discipline et effort", "Esprit éveillé et critique", "NSP")))
(cause_pauvrete <- barres(data=data_cause_pauvrete, miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Pas eu de chance", "Pas fait d'effort")))
(inquietant_CC <- barres(data=data_inquietant_CC, rev = F, miss = F, grouped = T, labels = c("catastrophe naturelle", "conflits entre états", "conflits sociaux", "température", "migrations", "maladies", "aucun"), legend=c('CCC', 'Population')))
(effets_CC_CCC_triple <- barres(data=cbind(dataN2("effets_CC_CCC", miss = F), c(0.02, 0.32, 0.65)/0.99), miss = F, sort = F, labels = c('CCC', 'Population (PSE)', 'Population'), legend=dataN2("effets_CC_CCC", miss = F, return = 'legend')))
(pour_sortition <- barres(vars = "pour_sortition", miss = T, rev=F, thin=F, labels="Pour une assemblée constituée de 150 citoyens tirés au sort, \ndotée d'un droit de veto sur les textes votés au Parlement"))
decrit(c$importance_associatif_1e)
decrit(c$cause_catastrophes_1e)
decrit(c$appartenance_2e)
ccc
ccc <- read.dta13("../donnees/all_benedicte.dta")
names(ccc)
decrit(ccc$s2_e_q10)
View(ccc[,1:12])
ccc <- read.dta13("../donnees/all_benedicte.dta")
decrit(ccc$s2_e_q10_clean)
decrit(ccc$s2_e_q10)
ccc$s2_e_q10[1:10]
ccc$appartenance_france <- grepl("France", ccc$s2_e_q10)
ccc$appartenance_monde <- grepl("monde", ccc$s2_e_q10)
ccc$appartenance_Europe <- grepl("Europe", ccc$s2_e_q10)
ccc$appartenance_commune <- grepl("commune", ccc$s2_e_q10)
ccc$appartenance_region <- grepl("region", ccc$s2_e_q10)
ccc$appartenance_departement <- grepl("departement", ccc$s2_e_q10)
ccc$appartenance_nr <- grepl("nr", ccc$s2_e_q10)
decrit(ccc$appartenance_france)
decrit(ccc$appartenance_monde)
decrit(ccc$appartenance_Europe)
decrit(ccc$appartenance_commune)
decrit(ccc$appartenance_region)
decrit(ccc$appartenance_departement)
decrit(ccc$appartenance_nr)
(echelle_politique_CC_both <- barres(data=dataN2("echelle_politique_CC", miss = F), miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=dataN2("echelle_politique_CC", miss = F, return = 'legend')))
save_plotly(echelle_politique_CC_both)
(echelle_politique_CC_both <- barres(data=dataN2("echelle_politique_CC", miss = F), miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=dataN2("echelle_politique_CC", miss = F, return = 'legend')))
save_plotly(echelle_politique_CC_both)
orca_available()
orca()
orca_serve()
orca_available
orca
Sys.which("orca")
orca()
(echelle_politique_CC_both <- barres(data=dataN2("echelle_politique_CC", miss = F), miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=dataN2("echelle_politique_CC", miss = F, return = 'legend')))
save_plotly(echelle_politique_CC_both)
orca()
orca_available()
(echelle_politique_CC_both <- barres(data=dataN2("echelle_politique_CC", miss = F), miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=dataN2("echelle_politique_CC", miss = F, return = 'legend')))
save_plotly(echelle_politique_CC_both)
Sys.getenv("PATH")
Sys.setenv("PATH" = paste(Sys.getenv("PATH"), "home/adrien/anaconda3/bin", sep = .Platform$path.sep))
save_plotly(echelle_politique_CC_both)
orca()
Sys.which("orca")
Sys.setenv("PATH" = paste(Sys.getenv("PATH"), "/home/adrien/anaconda3/bin", sep = .Platform$path.sep))
Sys.which("orca")
Sys.which("orca")
Sys.which("orca")
Sys.which("orca")
(echelle_politique_CC_both <- barres(data=dataN2("echelle_politique_CC", miss = F), miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=dataN2("echelle_politique_CC", miss = F, return = 'legend')))
save_plotly(echelle_politique_CC_both)
orca()
system('orca')
system('orca')
system('orca')
Sys.which('orca')
orca()
(echelle_politique_CC_both <- barres(data=dataN2("echelle_politique_CC", miss = F), miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=dataN2("echelle_politique_CC", miss = F, return = 'legend')))
save_plotly(echelle_politique_CC_both)
getwd()
data_obstacles_both <- matrix(NA, ncol = length(variables_obstacles), nrow = 2)
for (j in 1:length(variables_obstacles)) data_obstacles_both[1,j] <- length(which(c[[variables_obstacles[j]]]<=2))/length(which(!is.na(c[[variables_obstacles[j]]])))
for (j in 1:length(variables_obstacles)) data_obstacles_both[2,j] <- sum(e$weight[e[[variables_obstacles[j]]]<=2],na.rm=T)/sum(e$weight)
(obstacles_both <- barres(data = data_obstacles_both, grouped = T, rev = F, miss=F, labels=labels_obstacles[1:7], legend = c('CCC', 'Population (PSE)')))
save_plotly(obstacles_both)
save_plotly(obstacles_CCC)
(France_CC_both <- barres(data=dataN2("France_CC", miss=F, rev = T), miss = F, sort = F, labels = c('CCC', 'Population'), legend=rev(dataN2("France_CC", return = 'legend', miss=F))))
(France_CC_both <- barres(data=dataN2("France_CC", miss=F, rev = T), miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=rev(dataN2("France_CC", return = 'legend', miss=F))))
save_plotly(France_CC_both)
(causes_catastrophe <- barres(data=data_causes_catastrophe, miss = F, color = c(color(3), "#D3D3D3"), sort = F, rev_color = T, labels = c('CCC', 'Population (ADEME)'), legend=c("Personne n'est s?r", "Ont toujours eu lieu", "Dues au changement climatique", "NR")))
data_causes_catastrophe <- cbind(dataN("cause_catastrophes_1e", c, miss = F), c(0.2, 0.2, 0.58, 0.02))
(causes_catastrophe <- barres(data=data_causes_catastrophe, miss = F, color = c(color(3), "#D3D3D3"), sort = F, rev_color = T, labels = c('CCC', 'Population (ADEME)'), legend=c("Personne n'est sûr", "Ont toujours eu lieu", "Dues au changement climatique", "NR")))
save_plotly2(causes_catastrophe) # ADEME octobre 2019 toplot!!
save_plotly(causes_catastrophe) # ADEME octobre 2019 toplot!!
save_plotly(causes_catastrophe) # ADEME octobre 2019 toplot!!
save_plotly(causes_catastrophe) # ADEME octobre 2019 toplot!!
(causes_catastrophe <- barres(data=data_causes_catastrophe, miss = F, color = c(color(3), "#D3D3D3"), sort = F, rev_color = T, labels = c('CCC', 'Population (ADEME)'), legend=c("Personne n'est sûr", "Ont toujours eu lieu", "Dues au changement climatique", "NR")))
save_plotly(causes_catastrophe) # ADEME octobre 2019 toplot!!
(cause_CC_CCC_both <- barres(data=dataN2("cause_CC_CCC", miss = F, rev = T), miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=rev(dataN2("cause_CC_CCC", miss = F, return = 'legend'))))
save_plotly(cause_CC_CCC_both)
save_plotly(cause_CC_CCC_both)
save_plotly(cause_CC_CCC_both)
(causes_catastrophe <- barres(data=data_causes_catastrophe, miss = F, color = c(color(3), "#D3D3D3"), sort = F, rev_color = T, labels = c('CCC', 'Population (ADEME)'), legend=c("Personne n'est sûr", "Ont toujours eu lieu", "Dues au changement climatique", "NR")))
(cause_CC_CCC_both <- barres(data=dataN2("cause_CC_CCC", miss = F, rev = T), miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=rev(dataN2("cause_CC_CCC", miss = F, return = 'legend'))))
save_plotly(cause_CC_CCC_both)
save_plotly(cause_CC_CCC_both)
save_plotly(cause_CC_CCC_both)
(importance_environnement_both <- barres(data=cbind(data_importance_CCC[,2], dataN("importance_environnement", miss = F)), rev = F, rev_color = T,  miss = F, sort = F, labels = c('CCC', 'Population'), legend=0:10))
save_plotly(importance_environnement_both)
save_plotly(importance_environnement_both)
(importance_confort_both <- barres(data=cbind(data_importance_CCC[,3], dataN("importance_confort", miss = F)), rev = F, rev_color = T,  miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=0:10))
save_plotly(importance_confort_both)
save_plotly(importance_confort_both)
(importance_associatif_both <- barres(data=cbind(data_importance_CCC[,1], dataN("importance_associatif", miss = F)), rev = F, rev_color = T,  miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=0:10))
save_plotly(importance_associatif_both)
(ecole <- barres(data=data_ecole, miss = F, color = c(color(2), "#D3D3D3"), sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Discipline et effort", "Esprit ?veill? et critique", "NR")))
data_ecole <- cbind(dataN("ecole_2e", c[c$ecole_2e!="",], miss = F), c(0.41, 0.56, 0.03))
(ecole <- barres(data=data_ecole, miss = F, color = c(color(2), "#D3D3D3"), sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Discipline et effort", "Esprit ?veill? et critique", "NR")))
save_plotly2(ecole) # ADEME octobre 2019 toplot!!
save_plotly(ecole) # ADEME octobre 2019 toplot!!
save_plotly(ecole) # ADEME octobre 2019 toplot!!
save_plotly(ecole) # ADEME octobre 2019 toplot!!
save_plotly(ecole) # ADEME octobre 2019 toplot!!
save_plotly(ecole) # ADEME octobre 2019 toplot!!
save_plotly(ecole) # ADEME octobre 2019 toplot!!
data_qualite_enfant <- matrix(NA, ncol = length(variables_qualite_enfant), nrow = 2)
for (j in 1:length(variables_qualite_enfant)) data_qualite_enfant[1,j] <- length(which(c[[variables_qualite_enfant[j]]]==T))/length(which(!is.missing(c[[variables_qualite_enfant[j]]])))
for (j in 1:length(variables_qualite_enfant)) data_qualite_enfant[2,j] <- sum(e$weight[e[[variables_qualite_enfant[j]]]==T])/sum(e$weight)
(qualite_enfant_both <- barres(data = data_qualite_enfant, grouped = T, rev = F, miss=F, labels=labels_qualite_enfant, legend = c('CCC', 'Population')))
data_qualite_enfant <- matrix(NA, ncol = length(variables_qualite_enfant), nrow = 2)
for (j in 1:length(variables_qualite_enfant)) data_qualite_enfant[1,j] <- length(which(c[[variables_qualite_enfant[j]]]==T))/length(which(!is.missing(c[[variables_qualite_enfant[j]]])))
length(which(!is.missing(c[[variables_qualite_enfant[j]]])))
for (j in 1:length(variables_qualite_enfant)) data_qualite_enfant[1,j] <- length(which(c[[variables_qualite_enfant[j]]]==T))/length(which(!is.na(c[[variables_qualite_enfant[j]]])))
for (j in 1:length(variables_qualite_enfant)) data_qualite_enfant[2,j] <- sum(e$weight[e[[variables_qualite_enfant[j]]]==T])/sum(e$weight)
(qualite_enfant_both <- barres(data = data_qualite_enfant, grouped = T, rev = F, miss=F, labels=labels_qualite_enfant, legend = c('CCC', 'Population')))
data_qualite_enfant
variables_qualite_enfant
length(which(c[[variables_qualite_enfant[11]]]==T))
length(which(!is.na(c[[variables_qualite_enfant[11]]])))
length(which(!is.na(c[[variables_qualite_enfant[10]]])))
decrit(c$qualite_enfant_foi_1e)
c$qualite_enfant_foi <- c$qualite_enfant_foi_1e
for (j in 1:length(variables_qualite_enfant)) data_qualite_enfant[1,j] <- length(which(c[[variables_qualite_enfant[j]]]==T))/length(which(!is.na(c[[variables_qualite_enfant[j]]])))
for (j in 1:length(variables_qualite_enfant)) data_qualite_enfant[2,j] <- sum(e$weight[e[[variables_qualite_enfant[j]]]==T])/sum(e$weight)
(qualite_enfant_both <- barres(data = data_qualite_enfant, grouped = T, rev = F, miss=F, labels=labels_qualite_enfant, legend = c('CCC', 'Population (PSE)')))
save_plotly(qualite_enfant_both) # TODO: alterner lignes CCC et externe ?
save_plotly(qualite_enfant_both) # TODO: alterner lignes CCC et externe ?
(redistribution_both <- barres(data=dataN2("redistribution", miss = F), rev = F,  miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=dataN2("redistribution", miss = F, return = 'legend')))
save_plotly(redistribution_both)
data_cause_pauvrete <- cbind(dataN("cause_pauvrete_1e", c[!(c$cause_pauvrete_1e %in% c('NR', '')),], miss = F), c(0.63, 0.37))
(cause_pauvrete <- barres(data=data_cause_pauvrete, miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population (Crédoc)'), legend=c("Pas eu de chance", "Pas fait d'effort")))
save_plotly(cause_pauvrete) # CREDOC janvier 2019 toplot /!\ 50% de non réponses dans la CCC toplot!
data_satisfaction <- cbind(c(sum(dataN("satisfaction_vie_1e", c, miss = F)[1:3]), sum(dataN("satisfaction_vie_1e", c, miss = F)[4:6]), sum(dataN("satisfaction_vie_1e", c, miss = F)[7:10])), c(0.05, 0.33, 0.62))
(satisfaction_both <- barres(data=data_satisfaction, miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c('1 à 3', '4 à 6', '7 à 10')))
(satisfaction_both <- barres(data=data_satisfaction, miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population (Cevipof 06/2019)'), legend=c('1 à 3', '4 à 6', '7 à 10')))
save_plotly(satisfaction_both) # Cevipof Juin 2019 toplot
data_causes_catastrophe <- cbind(dataN("cause_catastrophes_1e", c, miss = F), c(0.2, 0.2, 0.58, 0.02))
save_plotly(satisfaction_both) # Cevipof Juin 2019 toplot
(problemes_invisibilises_both <- barres(data=dataN2("problemes_invisibilises", miss = F), miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population (PSE)'), legend=dataN2("problemes_invisibilises", miss = F, return = 'legend')))
save_plotly(problemes_invisibilises_both) # « Condi^ons de vie et aspira^ons », CREDOC, janvier 2019: donne 58% d'invisibilisés (contre 61% ici)
save_plotly(problemes_invisibilises_both) # « Condi^ons de vie et aspira^ons », CREDOC, janvier 2019: donne 58% d'invisibilisés (contre 61% ici)
(confiance_sortition_both <- barres(data=dataN2("confiance_sortition", miss = F), sort = F, miss = F, rev_color = T, labels = c('CCC', 'Population (PSE)'), legend=dataN2("confiance_sortition", miss = F, return = 'legend')))
save_plotly(confiance_sortition_both)
save_plotly(confiance_sortition_both)
save_plotly(confiance_sortition_both)
save_plotly(confiance_sortition_both)
(confiance_gens_triple <- barres(data=cbind(dataN2("confiance_gens", miss = F), c(0.65, 0.35)), miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population (PSE)', 'Population (Cevipof 04/2020)'), legend=dataN2("confiance_gens", miss = F, return = 'legend')))
save_plotly(confiance_gens_triple) # toplot!
save_plotly(confiance_gens_triple) # toplot!
(politiques_c1 <- barres(vars = variables_politiques_1, df = c, miss=F, labels=labels_variables_politiques_1))
labels_variables_politiques_1 <- c("Réduire le gaspillage alimentaire", "Obliger les cantines à proposer des menus verts", "Favoriser l'usage des véhicules peu polluants ou partagés",
"Densifier les villes", "Développer les énergies renouvelables", "Taxer l'acheminement polluant des marchandises")
(politiques_c1 <- barres(vars = variables_politiques_1, df = c, miss=F, labels=labels_variables_politiques_1))
save_plotly(politiques_c1) # TODO: alterner lignes CCC et externe ?
save_plotly(politiques_c1) # TODO: alterner lignes CCC et externe ?
save_plotly(politiques_c1) # TODO: alterner lignes CCC et externe ?
data_ecole <- cbind(dataN("ecole_2e", c[c$ecole_2e!="",], miss = F), c(0.41, 0.56, 0.03))
(ecole <- barres(data=data_ecole, miss = F, color = c(color(2), "#D3D3D3"), sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Discipline et effort", "Esprit ?veill? et critique", "NR")))
(ecole <- barres(data=data_ecole, miss = F, color = c(color(2), "#D3D3D3"), sort = F, rev_color = T, labels = c('CCC', 'Population (PSE)'), legend=c("Discipline et effort", "Esprit éveillé et critique", "NR")))
save_plotly(ecole) # ADEME octobre 2019 toplot!!
save_plotly(ecole) # ADEME octobre 2019 toplot!!
save_plotly(ecole) # ADEME octobre 2019 toplot!!
save_plotly(ecole) # ADEME octobre 2019 toplot!!
(importance_environnement_both <- barres(data=cbind(data_importance_CCC[,2], dataN("importance_environnement", miss = F)), rev = F, rev_color = T,  miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=0:10))
save_plotly(importance_environnement_both)
(ecole <- barres(data=data_ecole, miss = F, color = c(color(2), "#D3D3D3"), sort = F, rev_color = T, labels = c('CCC', 'Population (ADEME)'), legend=c("Discipline et effort", "Esprit éveillé et critique", "NR")))
save_plotly(ecole) # ADEME octobre 2019 toplot!!
save_plotly(ecole) # ADEME octobre 2019 toplot!!
decrit(c$solution_CC_1e)
data_solution
data_solution <- matrix(NA, ncol = length(variables_solution), nrow = 2)
for (j in 1:length(variables_solution)) data_solution[1,j] <- length(which(c[[variables_solution[j]]]==T))/length(which(!is.na(c[[variables_solution[j]]])))
for (j in 1:length(variables_solution)) data_solution[2,j] <- sum(e$weight[e[[variables_solution[j]]]==T])/sum(e$weight)
data_solution
## 0. Load Bénédicte merged data
call <- read_dta("../donnees/all_benedicte.dta")
package('haven')
package('plyr')
package('memisc')
package('Hmisc')
package('stringr')
package('ISOweek')
package('foreign')
## 0. Load Bénédicte merged data
call <- read_dta("../donnees/all_benedicte.dta")
decrit(c$solution_CC_changer)
decrit(c$solution_CC_traite)
decrit(c$solution_CC_1e)
decrit(call$s1_e_q19)
variables_solution
call$solution_CC_changer <- grepl('modifier nos modes de vie', call$s1_e_q19)
call$solution_CC_rien <- grepl('rien a fraire', call$s1_e_q19)
call$solution_CC_progres <- grepl('technique permettra de trouver des solutions', call$s1_e_q19)
call$solution_CC_traite <- grepl('est aux etats de reglementer au niveau mond', call$s1_e_q19)
decrit(call$solution_CC_changer)
call$solution_CC_changer <- ifelse(grepl('modifier nos modes de vie', call$s1_e_q19), T, is.na(call$s1_e_q19))
decrit(call$solution_CC_changer)
call$solution_CC_changer <- ifelse(grepl('modifier nos modes de vie', call$s1_e_q19), T, call$s1_e_q19=='a')
decrit(call$solution_CC_changer)
call$solution_CC_changer <- call$solution_CC_rien <- call$solution_CC_progres <- call$solution_CC_traite <- call$s1_e_q19
call$solution_CC_changer <- grepl('modifier nos modes de vie', call$s1_e_q19)
call$solution_CC_rien <- grepl('rien a fraire', call$s1_e_q19)
call$solution_CC_progres <- grepl('technique permettra de trouver des solutions', call$s1_e_q19)
call$solution_CC_traite <- grepl('est aux etats de reglementer au niveau mond', call$s1_e_q19)
call$solution_CC_changer[is.na(call$s1_e_q19)] <- NA
call$solution_CC_progres[is.na(call$s1_e_q19)] <- NA
call$solution_CC_traite[is.na(call$s1_e_q19)] <- NA
call$s1_e_q19[is.na(call$s1_e_q19)] <- NA
decrit(call$solution_CC_changer)
length(which(is.na(call$s1_e_q19)))
call$solution_CC_changer[call$s1_e_q19==''] <- NA
decrit(call$solution_CC_changer)
call$solution_CC_changer <- grepl('modifier nos modes de vie', call$s1_e_q19)
call$solution_CC_rien <- grepl('rien a fraire', call$s1_e_q19)
call$solution_CC_progres <- grepl('technique permettra de trouver des solutions', call$s1_e_q19)
call$solution_CC_traite <- grepl('est aux etats de reglementer au niveau mond', call$s1_e_q19)
call$solution_CC_changer[call$s1_e_q19==''] <- NA
call$solution_CC_progres[call$s1_e_q19==''] <- NA
call$solution_CC_traite[call$s1_e_q19==''] <- NA
call$s1_e_q19[call$s1_e_q19==''] <- NA
for (j in 1:length(variables_solution)) data_solution[1,j] <- length(which(call[[variables_solution[j]]]==T))/length(which(!is.na(call[[variables_solution[j]]])))
data_solution <- matrix(NA, ncol = length(variables_solution), nrow = 2)
for (j in 1:length(variables_solution)) data_solution[1,j] <- length(which(c[[variables_solution[j]]]==T))/length(which(!is.na(c[[variables_solution[j]]])))
for (j in 1:length(variables_solution)) data_solution[2,j] <- sum(e$weight[e[[variables_solution[j]]]==T])/sum(e$weight)
data_solution_good <- data_solution
for (j in 1:length(variables_solution)) data_solution_good[1,j] <- length(which(call[[variables_solution[j]]]==T))/length(which(!is.na(call[[variables_solution[j]]])))
data_solution_good
data_solution
sum(data_solution[1,])
sum(data_solution_good[1,])
decrit(call$solution_CC_changer)
decrit(call$solution_CC_progres)
(solution_CC_triple <- barres(data = cbind(data_solution_good, c(11, 52, 19, 17)/99), grouped = T, rev = F, miss=F, labels=labels_solution, legend = c('CCC', 'Population (PSE)', 'Population (ADEME)')))
data_solution_good
data_solution
(solution_CC_triple <- barres(data = cbind(data_solution, c(11, 52, 19, 17)/99), grouped = T, rev = F, miss=F, labels=labels_solution, legend = c('CCC', 'Population (PSE)', 'Population (ADEME)')))
(solution_CC_triple <- barres(data = rbind(data_solution_good, c(11, 52, 19, 17)/99), grouped = T, rev = F, miss=F, labels=labels_solution, legend = c('CCC', 'Population (PSE)', 'Population (ADEME)')))
(solution_CC_triple <- barres(data = rbind(data_solution_good, c(11, 52, 19, 17)/99), color = color(4)[1,2,4], grouped = T, rev = F, miss=F, labels=labels_solution, legend = c('CCC', 'Population (PSE)', 'Population (ADEME)')))
color(4)
(solution_CC_triple <- barres(data = rbind(data_solution_good, c(11, 52, 19, 17)/99), color = color(4)[c(1,2,4)], grouped = T, rev = F, miss=F, labels=labels_solution, legend = c('CCC', 'Population (PSE)', 'Population (ADEME)')))
(solution_CC_triple <- barres(data = rbind(data_solution_good, c(11, 52, 19, 17)/99), color = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=labels_solution, legend = c('CCC', 'Population (PSE)', 'Population (ADEME)')))
save_plotly(solution_CC_triple) # ADEME octobre 2019 toplot!
save_plotly(solution_CC_triple) # ADEME octobre 2019 toplot!
legend=dataN2("confiance_gens", miss = F, return = 'legend')
dataN2("confiance_gens", miss = F, return = 'legend')
getwd()
(confiance_gens_both_en <- barres(data=dataN2("confiance_gens", miss = F), fr = F, miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population'), legend=c("Mistrust", "Trust")))
save_plotly(confiance_gens_both_en)
(confiance_gens_triple_en <- barres(data=cbind(dataN2("confiance_gens", miss = F), c(0.65, 0.35)), miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population (PSE)', 'Population (Cevipof 04/2020)'), legend=c("Mistrust", "Trust"), fr = F))
save_plotly(confiance_gens_triple_en) # toplot!
save_plotly(confiance_gens_triple_en) # toplot!
dataN2("confiance_sortition", miss = F, return = 'legend')
(confiance_sortition_both_en <- barres(data=dataN2("confiance_sortition", miss = F), sort = F, miss = F, rev_color = T, labels = c('CCC', 'Population (PSE)'), legend=c("Not at all confident", "Rather not confident", "Rather confident", "Completely confident")))
save_plotly(confiance_sortition_both_en)
save_plotly(confiance_sortition_both_en)
dataN2("problemes_invisibilises", miss = F, return = 'legend')
(problemes_invisibilises_both_en <- barres(data=dataN2("problemes_invisibilises", miss = F), miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population (PSE)'), legend=c("Never", "Not often", "Quite often", "Very often")))
save_plotly(problemes_invisibilises_both_en) # « Condi^ons de vie et aspira^ons », CREDOC, janvier 2019: donne 58% d'invisibilisés (contre 61% ici)
save_plotly(problemes_invisibilises_both_en) # « Condi^ons de vie et aspira^ons », CREDOC, janvier 2019: donne 58% d'invisibilisés (contre 61% ici)
(satisfaction_both_en <- barres(data=data_satisfaction, miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population (Cevipof 06/2019)'), legend=c('1 to 3', '4 to 6', '7 to 10')))
save_plotly(satisfaction_both_en) # Cevipof Juin 2019 toplot
save_plotly(satisfaction_both_en) # Cevipof Juin 2019 toplot
save_plotly(satisfaction_both_en) # Cevipof Juin 2019 toplot
labels_qualite_enfant
labels_qualite_enfant_en <- c("Independence", "Tolerance and respect for others", "Generosity", "Assiduity at work", "The sense of saving", "Obedience", "Responsibility", "Determination and perseverance", "Self-expression", "Imagination", "Religious faith")
(qualite_enfant_both_en <- barres(data = data_qualite_enfant, grouped = T, rev = F, miss=F, labels=labels_qualite_enfant_en, legend = c('CCC', 'Population (PSE)')))
save_plotly(qualite_enfant_both_en) # TODO: alterner lignes CCC et externe ?
save_plotly(qualite_enfant_both_en) # TODO: alterner lignes CCC et externe ?
save_plotly(qualite_enfant_both_en) # TODO: alterner lignes CCC et externe ?
(ecole_en <- barres(data=data_ecole, miss = F, color = c(color(2), "#D3D3D3"), sort = F, rev_color = T, labels = c('CCC', 'Population (ADEME)'), legend=c("Discipline and effort", "Sharp and critical mind", "NR")))
save_plotly(ecole_en) # ADEME octobre 2019 toplot!!
rev(dataN2("cause_CC_CCC", miss = F, return = 'legend'))
(cause_CC_CCC_both_en <- barres(data=dataN2("cause_CC_CCC", miss = F, rev = T), miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=c("Only anthropogenic", "Mostly anthropogenic", "As much", "Mostly natural", "Only natural", "Does not exist")))
save_plotly(cause_CC_CCC_both_en)
(causes_catastrophe_en <- barres(data=data_causes_catastrophe, miss = F, color = c(color(3), "#D3D3D3"), sort = F, rev_color = T, labels = c('CCC', 'Population (ADEME)'), legend=c("Have always taken place", "No one is sure", "Due to climate change", "NR")))
(causes_catastrophe <- barres(data=data_causes_catastrophe, miss = F, color = c(color(3), "#D3D3D3"), sort = F, rev_color = T, labels = c('CCC', 'Population (ADEME)'), legend=c("Personne n'est sûr", "Ont toujours eu lieu", "Dues au changement climatique", "NR")))
(causes_catastrophe_en <- barres(data=data_causes_catastrophe, miss = F, color = c(color(3), "#D3D3D3"), sort = F, rev_color = T, labels = c('CCC', 'Population (ADEME)'), legend=c("Have always taken place", "No one is sure", "Due to climate change", "NR")))
save_plotly(causes_catastrophe_en) # ADEME octobre 2019 toplot!!
save_plotly(causes_catastrophe_en) # ADEME octobre 2019 toplot!!
dataN2("issue_CC", miss = F, return = 'legend')
(issue_CC_triple <- barres(data=cbind(dataN2("issue_CC", miss = F), c(13, 50, 31, 5)/99), miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population (PSE)', 'Population (ADEME)'), legend=c("No, certainly not", "No, probably not", "Yes, probably", "Yes, certainly")))
(issue_CC_triple <- barres(data=cbind(dataN2("issue_CC", miss = F), c(13, 50, 31, 5)/99), miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population (PSE)', 'Population (ADEME)'), legend=dataN2("issue_CC", miss = F, return = 'legend')))
(issue_CC_triple_en <- barres(data=cbind(dataN2("issue_CC", miss = F), c(13, 50, 31, 5)/99), miss = F, sort = F, rev_color = T, labels = c('CCC', 'Population (PSE)', 'Population (ADEME)'), legend=c("No, certainly not", "No, probably not", "Yes, probably", "Yes, certainly")))
save_plotly(issue_CC_triple_en) # ADEME octobre 2019 toplot!
save_plotly(issue_CC_triple_en) # ADEME octobre 2019 toplot!
save_plotly(issue_CC_triple_en) # ADEME octobre 2019 toplot!
dataN2("effets_CC_CCC", miss = F, return = 'legend')
(effets_CC_CCC_both_en <- barres(data=dataN2("effets_CC_CCC", miss = F), miss = F, sort = F, labels = c('CCC', 'Population'), legend=c("Positive effects", "Adaptation without problem", "Extremely strenuous")))
save_plotly(effets_CC_CCC_both_en)
rev(dataN2("France_CC", return = 'legend', miss=F))
(France_CC_both_en <- barres(data=dataN2("France_CC", miss=F, rev = T), miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=c("Yes", "NR", "No")))
save_plotly(France_CC_both_en)
save_plotly(France_CC_both_en)
dataN2("echelle_politique_CC", miss = F, return = 'legend')
(echelle_politique_CC_both_en <- barres(data=dataN2("echelle_politique_CC", miss = F), miss = F, sort = F, labels = c('CCC', 'Population (PSE)'), legend=c("At all scales", "Global", "European", "National", "Local")))
save_plotly(echelle_politique_CC_both_en)
save_plotly(echelle_politique_CC_both_en)
save_plotly(echelle_politique_CC_both_en)
save_plotly(echelle_politique_CC_both_en)
dataN2("echelle_politique_CC", miss = F, return = 'legend')
labels_obstacles
(obstacles_both_en <- barres(data = data_obstacles_both, grouped = T, rev = F, miss=F, labels=c("Lobbies", "Lack of political will", "Lack of cooperation between countries", "Inequalities", "Uncertainties of scientific community", "Demography", "Lack of alternative technologies"), legend = c('CCC', 'Population (PSE)')))
save_plotly(obstacles_both_en)
labels_solution
labels_solution_en <- c("Technological progress will make it possible to find solutions to prevent climate change", "It will be necessary to significantly modify our lifestyles to prevent climate change", "It is up to States to regulate climate change at the global level", "There is nothing to be done, climate change is inevitable")
(solution_CC_triple_en <- barres(data = rbind(data_solution_good, c(11, 52, 19, 17)/99), color = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=labels_solution_en, legend = c('CCC', 'Population (PSE)', 'Population (ADEME)')))
labels_solution_en <- c("Technological progress will make it possible to\n find solutions to prevent climate change", "It will be necessary to significantly modify \nour lifestyles to prevent climate change", "It is up to States to regulate\n climate change at the global level", "There is nothing to be done,\n climate change is inevitable")
(solution_CC_triple_en <- barres(data = rbind(data_solution_good, c(11, 52, 19, 17)/99), color = color(4)[c(1,3,4)], grouped = T, rev = F, miss=F, labels=labels_solution_en, legend = c('CCC', 'Population (PSE)', 'Population (ADEME)')))
save_plotly(solution_CC_triple_en) # ADEME octobre 2019 toplot!
labels_variables_politiques_1
labels_variables_politiques_1_en <- c("Reducing food waste", "Obliging canteens to offer green menus", "Encouraging the use of low-polluting or shared vehicles", "Densifying cities", "Developing renewable energies", "Taxing the polluting transport of goods")
(politiques_c1_en <- barres(vars = variables_politiques_1, df = c, miss=F, labels=labels_variables_politiques_1_en))
(politiques_c1_en <- barres(vars = variables_politiques_1, df = c, miss=F, labels=labels_variables_politiques_1_en, legend = c("Very", "Rather", "Rather not", "Not at all")))
save_plotly(politiques_c1_en) # TODO: alterner lignes CCC et externe ?
(politiques_1_en <- barres(vars = variables_politiques_1, miss=FALSE,  labels=labels_variables_politiques_1_en, legend = c("Very", "Rather", "Rather not", "Not at all")))
save_plotly(politiques_1_en)
labels_variables_politiques_2
labels_variables_politiques_2_en <- c("Reinforcement of the bonus/malus", "Train subsidies", "Contribution to a global fund", "Red meat tax", "Conditioning of innovation aid to the carbon balance", "Ban on polluting vehicles in city centers", "Limiting speed on freeways to 110 km/h", "Obligation of thermal renovation accompanied by State aid".)
(politiques_2_en <- barres(vars = variables_politiques_2, miss=FALSE, labels=labels_variables_politiques_2_en))
labels_variables_politiques_2_en <- c("Reinforcement of the bonus/malus", "Train subsidies", "Contribution to a global fund", "Red meat tax", "Conditioning of innovation aid to the carbon balance", "Ban on polluting vehicles in city centers", "Limiting speed on freeways to 110 km/h", "Obligation of thermal renovation accompanied by State aid".)
(politiques_2_en <- barres(vars = variables_politiques_2, miss=FALSE, labels=labels_variables_politiques_2_en))
labels_variables_politiques_2_en <- c("Reinforcement of the bonus/malus", "Train subsidies", "Contribution to a global fund", "Red meat tax", "Conditioning of innovation aid to a carbon balance", "Ban on polluting vehicles in city centers", "Limiting speed on freeways to 110 km/h", "Obligation of thermal renovation accompanied by State aid")
(politiques_2_en <- barres(vars = variables_politiques_2, miss=FALSE, labels=labels_variables_politiques_2_en))
(politiques_2_en <- barres(vars = variables_politiques_2, miss=FALSE, labels=labels_variables_politiques_2_en, legend = c("Completely", "Rather", "Indifferent/NR", "Not really", "Not at all")))
save_plotly(politiques_2_en)
save_plotly(politiques_2_en)
labels_variables_referendum_en <- c("Obligation of thermal renovation accompanied by State aid", "Food voucher to the poorest for CSA and bio", "Ban on advertising of polluting products", "Ban from 2025 of the most polluting new vehicles", "Tax of 4% on dividends from large companies to finance the transition", "Deposit system for glass and plastic")
(referendum_en <- barres(vars = variables_referendum, miss=T, labels=labels_variables_referendum_en))
(referendum_en <- barres(vars = variables_referendum, miss=T, labels=labels_variables_referendum_en, legend=c("Yes", "Blank", "No", "NR")))
labels_variables_referendum_en <- c("Obligation of thermal renovation accompanied by State aid", "Food voucher to the poorest for CSA and bio", "Ban on advertising of polluting products", "Ban from 2025 of the most polluting new vehicles", "Tax of 4% on dividends from large companies\n to finance the transition", "Deposit system for glass and plastic")
(referendum_en <- barres(vars = variables_referendum, miss=T, labels=labels_variables_referendum_en, legend=c("Yes", "Blank", "No", "NR")))
save_plotly(referendum_en)
save_plotly(politiques_c1_en) # TODO: alterner lignes CCC et externe ?
(politiques_c1_en <- barres(vars = variables_politiques_1, df = c, miss=F, labels=labels_variables_politiques_1_en, legend = c("Very", "Rather", "Rather not", "Not at all")))
save_plotly(politiques_c1_en) # TODO: alterner lignes CCC et externe ?
labels_variables_politiques_1_en <- c("Reducing food waste", "Obliging canteens to offer green menus", "Encouraging the use of \nlow-polluting or shared vehicles", "Densifying cities", "Developing renewable energies", "Taxing the polluting transport of goods")
(politiques_c1_en <- barres(vars = variables_politiques_1, df = c, miss=F, labels=labels_variables_politiques_1_en, legend = c("Very", "Rather", "Rather not", "Not at all")))
save_plotly(politiques_c1_en) # TODO: alterner lignes CCC et externe ?
(politiques_1_en <- barres(vars = variables_politiques_1, miss=FALSE,  labels=labels_variables_politiques_1_en, legend = c("Very", "Rather", "Rather not", "Not at all")))
save_plotly(politiques_1_en)
(politiques_2_en <- barres(vars = variables_politiques_2, miss=FALSE, labels=labels_variables_politiques_2_en, legend = c("Completely", "Rather", "Indifferent/NR", "Not really", "Not at all")))
labels_variables_politiques_2_en <- c("Reinforcement of the bonus/malus", "Train subsidies", "Contribution to a global fund", "Red meat tax", "Conditioning of innovation aid to a carbon balance", "Ban on polluting vehicles in city centers", "Limiting speed on freeways to 110 km/h", "Obligation of thermal renovation\n accompanied by State aid")
(politiques_2_en <- barres(vars = variables_politiques_2, miss=FALSE, labels=labels_variables_politiques_2_en, legend = c("Completely", "Rather", "Indifferent/NR", "Not really", "Not at all")))
save_plotly(politiques_2_en)
decrit(e$duree)
decrit(e$duree)
decrit(e$duree)
decrit(e$duree/60)
decrit(e$pour_limitation_110, weights =F)
decrit(e$pour_limitation_110)
decrit(e$soutenu_limitation_110)
decrit(e$pour_limitation_110)
###### Efforts relatifs #####
decrit(e$efforts_relatifs)
##### Taxe carbone ~ sondage #####
decrit(e$pour_taxe_carbone, miss=T)
annotation(e$efforts_relatifs)
label(e$efforts_relatifs)
Label(e$efforts_relatifs)
describe(e$efforts_relatifs)
##### Taxe carbone ~ sondage #####
decrit(e$pour_taxe_carbone, miss=F)
##### Taxe carbone ~ sondage #####
decrit(e$pour_taxe_carbone, miss=T)
###### Efforts relatifs #####
decrit(e$efforts_relatifs, miss=T)
###### Efforts relatifs #####
decrit(e$efforts_relatifs, miss=F)
decrit <- function(variable, miss = FALSE, weights = NULL, numbers = FALSE, data = e, which = NULL, weight = T) { # TODO!: allow for boolean weights
# if (!missing(data)) variable <- data[[variable]]
if (is.character(variable) & length(variable)==1) variable <- data[[variable]]
if (!missing(which)) variable <- variable[which]
if (weight) {
# if (length(variable) > 1) warning("Field 'variable' is a vector instead of a character, weight will not be used.")
weights <- data[["weight"]]  #  if (missing(data)) warning("Field 'data' is missing, weight will not be used.") else {
if (!missing(which)) weights <- weights[which]
if (length(weights)!=length(variable)) {
warning("Lengths of weight and variable differ, non-weighted results are provided")
weights <- NULL
} }
if (length(annotation(variable))>0 & !numbers) {
if (!miss) {
# if (is.element("Oui", levels(as.factor(variable))) | grepl("(char)", annotation(variable)) | is.element("quotient", levels(as.factor(variable)))  | is.element("Pour", levels(as.factor(variable))) | is.element("Plutôt", levels(as.factor(variable))) ) { describe(as.factor(variable[variable!="" & !is.na(variable)]), weights = weights[variable!="" & !is.na(variable)], descript=Label(variable)) }
# else { describe(variable[variable!="" & !is.na(variable)], weights = weights[variable!="" & !is.na(variable)], descript=Label(variable)) }
if (length(which(!is.na(suppressWarnings(as.numeric(levels(as.factor(variable)))))))==0) { describe(as.factor(variable[variable!=""]), weights = weights[variable!=""], descript=Label(variable)) } # encore avant:  & !is.na(variable), avant: (length(which(is.numeric(levels(as.factor(variable)))))==0)
else { describe(as.numeric(as.vector(variable[variable!=""])), weights = weights[variable!=""], descript=Label(variable)) } # avant:  & !is.na(variable)
}
else {
if (length(which(suppressWarnings(!is.na(as.numeric(levels(as.factor(variable)))))))>10) describe(include.missings(variable[variable!="" & !is.na(variable)]), weights = weights[variable!="" & !is.na(variable)], descript=Label(variable)) # encore avant:  & !is.na(variable), avant: (length(which(is.numeric(levels(as.factor(variable)))))==0)
else describe(as.factor(include.missings(variable[variable!="" & !is.na(variable)])), weights = weights[variable!="" & !is.na(variable)], descript=Label(variable)) }
}
else {
if (length(annotation(variable))>0) {
if (miss) describe(variable[variable!=""], weights = weights[variable!=""], descript=Label(variable))
else describe(variable[variable!="" & !is.missing(variable)], weights = weights[variable!="" & !is.missing(variable)], descript=paste(length(which(is.missing(variable))), "missing obs.", Label(variable)))
} else describe(variable[variable!=""], weights = weights[variable!=""])  }
}
###### Efforts relatifs #####
decrit(e$efforts_relatifs, miss=F)
###### Efforts relatifs #####
decrit(e$efforts_relatifs, miss=T)
###### Efforts relatifs #####
decrit(e$efforts_relatifs)
##### Taxe carbone ~ label_taxe * origine_taxe #####
summary(lm(taxe_approbation!='Non' ~ question_confiance, data=e, weights = e$weight))
summary(lm(taxe_approbation!='Non' ~ label_taxe, data=e, weights = e$weight))
summary(lm(taxe_approbation!='Non' ~ origine_taxe, data=e, weights = e$weight))
summary(lm(taxe_approbation!='Non' ~ (origine_taxe!='inconnue'), data=e, weights = e$weight))
summary(lm(taxe_approbation!='Non' ~ label_taxe * origine_taxe, data=e, weights = e$weight))
summary(lm(taxe_approbation!='Non' ~ label_taxe * origine_taxe * question_confiance, data=e, weights = e$weight)) # no effect
summary(lm(gagnant_categorie=='Perdant' ~ question_confiance, data=e, weights = e$weight))
summary(lm(gagnant_categorie=='Perdant' ~ label_taxe * origine_taxe * question_confiance, data=e, weights = e$weight))
##### Confiance dividende ~ label_taxe * origine_taxe #####
decrit(e$confiance_dividende)
decrit(e$confiance_dividende, which = e$origine_taxe=='gouvernement')
summary(lm(confiance_dividende!='Non' ~ origine_taxe, data=e, weights = e$weight))
summary(lm(confiance_dividende!='Non' ~ label_taxe * origine_taxe, data=e, weights = e$weight)) # no effect
summary(lm(update_correct ~ (gagnant_categorie=='Gagnant') + Gilets_jaunes + taxe_approbation, subset = feedback_infirme_large==T, data=e, weights = e$weight))
summary(lm(update_correct ~ (gagnant_categorie=='Gagnant') * confiance_dividende, subset = feedback_infirme_large==T, data=e, weights = e$weight)) # 0.14*
summary(lm(prop_referenda_politiques_2 ~ info_CCC, data=e, weights = e$weight)) # 0.03*
decrit(e$taxe_feedback_approbation)
decrit(e$taxe_feedback_approbation, miss=T)
decrit(e$taxe_approbation, miss=T)
decrit(e$concentration)
decrit(e$pour_sortition)
decrit(e$pour_sortition, miss=T)
decrit(e$soutenu_bonus_malus)
decrit(e$soutenu_obligation_renovation)
decrit(e$soutenu_normes_isolation)
decrit(e$soutenu_limitation_110)
